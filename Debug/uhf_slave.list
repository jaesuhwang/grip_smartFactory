
uhf_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f65c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  0800f7f0  0800f7f0  0001f7f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fed8  0800fed8  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800fed8  0800fed8  0001fed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fee0  0800fee0  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fee0  0800fee0  0001fee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fee4  0800fee4  0001fee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800fee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a0  20000204  080100ec  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  080100ec  000206a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000269cb  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bc6  00000000  00000000  00046bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d10  00000000  00000000  0004c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002f649  00000000  00000000  0004e4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00026af9  00000000  00000000  0007db21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00114fe6  00000000  00000000  000a461a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001b9600  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001aa8  00000000  00000000  001b9650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008c80  00000000  00000000  001bb0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f7d4 	.word	0x0800f7d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800f7d4 	.word	0x0800f7d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4b6f      	ldr	r3, [pc, #444]	; (80011cc <MX_GPIO_Init+0x1d4>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a6e      	ldr	r2, [pc, #440]	; (80011cc <MX_GPIO_Init+0x1d4>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b6c      	ldr	r3, [pc, #432]	; (80011cc <MX_GPIO_Init+0x1d4>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	4b69      	ldr	r3, [pc, #420]	; (80011cc <MX_GPIO_Init+0x1d4>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a68      	ldr	r2, [pc, #416]	; (80011cc <MX_GPIO_Init+0x1d4>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b66      	ldr	r3, [pc, #408]	; (80011cc <MX_GPIO_Init+0x1d4>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103e:	4b63      	ldr	r3, [pc, #396]	; (80011cc <MX_GPIO_Init+0x1d4>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a62      	ldr	r2, [pc, #392]	; (80011cc <MX_GPIO_Init+0x1d4>)
 8001044:	f043 0308 	orr.w	r3, r3, #8
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b60      	ldr	r3, [pc, #384]	; (80011cc <MX_GPIO_Init+0x1d4>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0308 	and.w	r3, r3, #8
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	4b5d      	ldr	r3, [pc, #372]	; (80011cc <MX_GPIO_Init+0x1d4>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a5c      	ldr	r2, [pc, #368]	; (80011cc <MX_GPIO_Init+0x1d4>)
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b5a      	ldr	r3, [pc, #360]	; (80011cc <MX_GPIO_Init+0x1d4>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_SET);
 800106e:	2201      	movs	r2, #1
 8001070:	f248 1110 	movw	r1, #33040	; 0x8110
 8001074:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001078:	f004 fefc 	bl	8005e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8001082:	4853      	ldr	r0, [pc, #332]	; (80011d0 <MX_GPIO_Init+0x1d8>)
 8001084:	f004 fef6 	bl	8005e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8 | GPIO_PIN_9 , GPIO_PIN_SET);
 8001088:	2201      	movs	r2, #1
 800108a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800108e:	4851      	ldr	r0, [pc, #324]	; (80011d4 <MX_GPIO_Init+0x1dc>)
 8001090:	f004 fef0 	bl	8005e74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10 */  // ID read port
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001094:	230f      	movs	r3, #15
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001098:	2300      	movs	r3, #0
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	484b      	ldr	r0, [pc, #300]	; (80011d4 <MX_GPIO_Init+0x1dc>)
 80010a8:	f004 fc2e 	bl	8005908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010ac:	2310      	movs	r3, #16
 80010ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010b8:	2302      	movs	r3, #2
 80010ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c6:	f004 fc1f 	bl	8005908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d0:	2312      	movs	r3, #18
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010dc:	2304      	movs	r3, #4
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	483b      	ldr	r0, [pc, #236]	; (80011d4 <MX_GPIO_Init+0x1dc>)
 80010e8:	f004 fc0e 	bl	8005908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010fa:	2301      	movs	r3, #1
 80010fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4832      	ldr	r0, [pc, #200]	; (80011d0 <MX_GPIO_Init+0x1d8>)
 8001106:	f004 fbff 	bl	8005908 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800110a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001118:	2302      	movs	r3, #2
 800111a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	482b      	ldr	r0, [pc, #172]	; (80011d0 <MX_GPIO_Init+0x1d8>)
 8001124:	f004 fbf0 	bl	8005908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800112e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001134:	2301      	movs	r3, #1
 8001136:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f004 fbe1 	bl	8005908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800114c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001152:	2301      	movs	r3, #1
 8001154:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001160:	f004 fbd2 	bl	8005908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001172:	2301      	movs	r3, #1
 8001174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001180:	f004 fbc2 	bl	8005908 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001184:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118e:	2301      	movs	r3, #1
 8001190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001192:	2301      	movs	r3, #1
 8001194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	480d      	ldr	r0, [pc, #52]	; (80011d4 <MX_GPIO_Init+0x1dc>)
 800119e:	f004 fbb3 	bl	8005908 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2105      	movs	r1, #5
 80011a6:	2017      	movs	r0, #23
 80011a8:	f003 ffa3 	bl	80050f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011ac:	2017      	movs	r0, #23
 80011ae:	f003 ffbc 	bl	800512a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2105      	movs	r1, #5
 80011b6:	2028      	movs	r0, #40	; 0x28
 80011b8:	f003 ff9b 	bl	80050f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011bc:	2028      	movs	r0, #40	; 0x28
 80011be:	f003 ffb4 	bl	800512a <HAL_NVIC_EnableIRQ>

}
 80011c2:	bf00      	nop
 80011c4:	3728      	adds	r7, #40	; 0x28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48000800 	.word	0x48000800
 80011d4:	48000400 	.word	0x48000400

080011d8 <mac_ready>:
void read_data(void);
/* USER CODE BEGIN PFP */
extern uint8_t tx_complete;

volatile uint16_t counter_test;
uint16_t mac_ready(void) {
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
	// return 1 to wake the cpu up
#if 0
	sleepMode = 0 ;
#endif
	return 1;
 80011dc:	2301      	movs	r3, #1
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_write>:

int _write(int file, char *p, int len) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, p, len, 10);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	230a      	movs	r3, #10
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <_write+0x24>)
 80011fe:	f008 fcea 	bl	8009bd6 <HAL_UART_Transmit>
	return len;
 8001202:	687b      	ldr	r3, [r7, #4]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000440 	.word	0x20000440

08001210 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001216:	f003 fb8b 	bl	8004930 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800121a:	f000 f8c9 	bl	80013b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800121e:	f7ff feeb 	bl	8000ff8 <MX_GPIO_Init>

	MX_USART1_UART_Init();
 8001222:	f000 fcaf 	bl	8001b84 <MX_USART1_UART_Init>
	MX_SPI1_Init();
 8001226:	f000 f97f 	bl	8001528 <MX_SPI1_Init>
	MX_TIM4_Init();
 800122a:	f000 fba1 	bl	8001970 <MX_TIM4_Init>
	//MX_TIM15_Init(); //
	MX_USART3_UART_Init(); //
 800122e:	f000 fcd9 	bl	8001be4 <MX_USART3_UART_Init>
	power_init();   //
 8001232:	f001 fbff 	bl	8002a34 <power_init>
	HAL_Delay(300);
 8001236:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800123a:	f003 fbfb 	bl	8004a34 <HAL_Delay>
	MX_RTC_Init(); // 
 800123e:	f000 f911 	bl	8001464 <MX_RTC_Init>
	read_sen_id();
 8001242:	f001 fc0f 	bl	8002a64 <read_sen_id>
	/* USER CODE BEGIN 2 */

	//sensor_init();
	read_data(); // eep read data
 8001246:	f000 f887 	bl	8001358 <read_data>

	cc1120_freq_set(sensor_id);
 800124a:	4b37      	ldr	r3, [pc, #220]	; (8001328 <main+0x118>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f001 fba4 	bl	800299c <cc1120_freq_set>
	uartRingBuff_init();
 8001254:	f001 fc76 	bl	8002b44 <uartRingBuff_init>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001258:	4b34      	ldr	r3, [pc, #208]	; (800132c <main+0x11c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	4b33      	ldr	r3, [pc, #204]	; (800132c <main+0x11c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f042 0220 	orr.w	r2, r2, #32
 8001266:	601a      	str	r2, [r3, #0]

	//HAL_ADC_Start_DMA(&hadc2,(uint32_t*)test_value, 1);
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	if (sen_id != 0) { 
 8001268:	4b31      	ldr	r3, [pc, #196]	; (8001330 <main+0x120>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <main+0x6c>
		mac_init(1);
 8001270:	2001      	movs	r0, #1
 8001272:	f002 fd41 	bl	8003cf8 <mac_init>
		mac_set_access_allowed_cb(mac_ready);
 8001276:	482f      	ldr	r0, [pc, #188]	; (8001334 <main+0x124>)
 8001278:	f002 fdcc 	bl	8003e14 <mac_set_access_allowed_cb>
	}
	sysTick = HAL_GetTick();
 800127c:	f003 fbce 	bl	8004a1c <HAL_GetTick>
 8001280:	6078      	str	r0, [r7, #4]
	while (1) {
		/* USER CODE END WHILE */
		if (sleep_init == 1) {
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <main+0x128>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d10c      	bne.n	80012a4 <main+0x94>
			wakeup_init();
 800128a:	f002 fcf7 	bl	8003c7c <wakeup_init>
			read_data();
 800128e:	f000 f863 	bl	8001358 <read_data>
			mac_init(1);
 8001292:	2001      	movs	r0, #1
 8001294:	f002 fd30 	bl	8003cf8 <mac_init>
			mac_set_access_allowed_cb(mac_ready);  // TEST ING
 8001298:	4826      	ldr	r0, [pc, #152]	; (8001334 <main+0x124>)
 800129a:	f002 fdbb 	bl	8003e14 <mac_set_access_allowed_cb>
			sleep_init = 0;
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <main+0x128>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
		}
		/* USER CODE BEGIN 3 */
		//sensor_drv();
		uart2_receive_func();
 80012a4:	f002 fa98 	bl	80037d8 <uart2_receive_func>

#if 1
		if (mac_is_access_allowed()) {
 80012a8:	f002 fd96 	bl	8003dd8 <mac_is_access_allowed>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0e7      	beq.n	8001282 <main+0x72>

			uint8_t bat_h = 5;
 80012b2:	2305      	movs	r3, #5
 80012b4:	70fb      	strb	r3, [r7, #3]
			uint8_t bat_l = 5;
 80012b6:	2305      	movs	r3, #5
 80012b8:	70bb      	strb	r3, [r7, #2]
			mac_payload[0] = sen_id;
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <main+0x12c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <main+0x120>)
 80012c0:	7812      	ldrb	r2, [r2, #0]
 80012c2:	701a      	strb	r2, [r3, #0]
			mac_payload[1] = sen_1_h;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	; (800133c <main+0x12c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	4a1d      	ldr	r2, [pc, #116]	; (8001340 <main+0x130>)
 80012cc:	7812      	ldrb	r2, [r2, #0]
 80012ce:	701a      	strb	r2, [r3, #0]
			mac_payload[2] = sen_1_l;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <main+0x12c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	3302      	adds	r3, #2
 80012d6:	4a1b      	ldr	r2, [pc, #108]	; (8001344 <main+0x134>)
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	701a      	strb	r2, [r3, #0]
			mac_payload[3] = sen_2_h;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <main+0x12c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3303      	adds	r3, #3
 80012e2:	4a19      	ldr	r2, [pc, #100]	; (8001348 <main+0x138>)
 80012e4:	7812      	ldrb	r2, [r2, #0]
 80012e6:	701a      	strb	r2, [r3, #0]
			mac_payload[4] = sen_2_l;
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <main+0x12c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3304      	adds	r3, #4
 80012ee:	4a17      	ldr	r2, [pc, #92]	; (800134c <main+0x13c>)
 80012f0:	7812      	ldrb	r2, [r2, #0]
 80012f2:	701a      	strb	r2, [r3, #0]
			mac_payload[5] = sen_3_h;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <main+0x12c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	3305      	adds	r3, #5
 80012fa:	4a15      	ldr	r2, [pc, #84]	; (8001350 <main+0x140>)
 80012fc:	7812      	ldrb	r2, [r2, #0]
 80012fe:	701a      	strb	r2, [r3, #0]
			mac_payload[6] = sen_3_l;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <main+0x12c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3306      	adds	r3, #6
 8001306:	4a13      	ldr	r2, [pc, #76]	; (8001354 <main+0x144>)
 8001308:	7812      	ldrb	r2, [r2, #0]
 800130a:	701a      	strb	r2, [r3, #0]
			mac_payload[7] = bat_h;
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <main+0x12c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3307      	adds	r3, #7
 8001312:	78fa      	ldrb	r2, [r7, #3]
 8001314:	701a      	strb	r2, [r3, #0]
			mac_payload[8] = bat_l;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <main+0x12c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3308      	adds	r3, #8
 800131c:	78ba      	ldrb	r2, [r7, #2]
 800131e:	701a      	strb	r2, [r3, #0]
			mac_send();
 8001320:	f002 fd6c 	bl	8003dfc <mac_send>
		if (sleep_init == 1) {
 8001324:	e7ad      	b.n	8001282 <main+0x72>
 8001326:	bf00      	nop
 8001328:	200002cd 	.word	0x200002cd
 800132c:	20000440 	.word	0x20000440
 8001330:	20000596 	.word	0x20000596
 8001334:	080011d9 	.word	0x080011d9
 8001338:	20000614 	.word	0x20000614
 800133c:	0800f9d4 	.word	0x0800f9d4
 8001340:	2000054b 	.word	0x2000054b
 8001344:	2000054c 	.word	0x2000054c
 8001348:	2000054d 	.word	0x2000054d
 800134c:	2000054e 	.word	0x2000054e
 8001350:	2000054f 	.word	0x2000054f
 8001354:	20000550 	.word	0x20000550

08001358 <read_data>:
#endif
	}
	/* USER CODE END 3 */
}

void read_data(void) {
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	read_configuration_data(&configs);
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <read_data+0x3c>)
 800135e:	f001 fd7d 	bl	8002e5c <read_configuration_data>
	//node_addr = configs.NID;
	node_addr = 2;
 8001362:	4b0d      	ldr	r3, [pc, #52]	; (8001398 <read_data+0x40>)
 8001364:	2202      	movs	r2, #2
 8001366:	701a      	strb	r2, [r3, #0]
	sensor_id = configs.sensorID;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <read_data+0x3c>)
 800136a:	781a      	ldrb	r2, [r3, #0]
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <read_data+0x44>)
 800136e:	701a      	strb	r2, [r3, #0]
	g_channel = configs.ch;
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <read_data+0x3c>)
 8001372:	789a      	ldrb	r2, [r3, #2]
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <read_data+0x48>)
 8001376:	701a      	strb	r2, [r3, #0]
	txPowerTeb = configs.pw;  // Tx power
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <read_data+0x3c>)
 800137a:	78da      	ldrb	r2, [r3, #3]
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <read_data+0x4c>)
 800137e:	701a      	strb	r2, [r3, #0]
	DBG_LED = configs.DBG_led;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <read_data+0x3c>)
 8001382:	7c5a      	ldrb	r2, [r3, #17]
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <read_data+0x50>)
 8001386:	701a      	strb	r2, [r3, #0]
	sleep_flag = configs.sleepOn;  // on 1 off 0
 8001388:	4b02      	ldr	r3, [pc, #8]	; (8001394 <read_data+0x3c>)
 800138a:	7a1a      	ldrb	r2, [r3, #8]
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <read_data+0x54>)
 800138e:	701a      	strb	r2, [r3, #0]
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200005f0 	.word	0x200005f0
 8001398:	20000005 	.word	0x20000005
 800139c:	200002cd 	.word	0x200002cd
 80013a0:	20000551 	.word	0x20000551
 80013a4:	20000560 	.word	0x20000560
 80013a8:	200002cc 	.word	0x200002cc
 80013ac:	20000615 	.word	0x20000615

080013b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b096      	sub	sp, #88	; 0x58
 80013b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	2244      	movs	r2, #68	; 0x44
 80013bc:	2100      	movs	r1, #0
 80013be:	4618      	mov	r0, r3
 80013c0:	f009 fcde 	bl	800ad80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013c4:	463b      	mov	r3, r7
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80013d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013d6:	f004 fdb1 	bl	8005f3c <HAL_PWREx_ControlVoltageScaling>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80013e0:	f000 f83a 	bl	8001458 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80013e4:	f004 fd76 	bl	8005ed4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <SystemClock_Config+0xa4>)
 80013ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ee:	4a19      	ldr	r2, [pc, #100]	; (8001454 <SystemClock_Config+0xa4>)
 80013f0:	f023 0318 	bic.w	r3, r3, #24
 80013f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80013f8:	2306      	movs	r3, #6
 80013fa:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013fc:	2301      	movs	r3, #1
 80013fe:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001400:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001404:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001406:	2310      	movs	r3, #16
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800140a:	2300      	movs	r3, #0
 800140c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4618      	mov	r0, r3
 8001414:	f004 fe4c 	bl	80060b0 <HAL_RCC_OscConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0x72>
		Error_Handler();
 800141e:	f000 f81b 	bl	8001458 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001422:	230f      	movs	r3, #15
 8001424:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001426:	2301      	movs	r3, #1
 8001428:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001436:	463b      	mov	r3, r7
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f005 fa14 	bl	8006868 <HAL_RCC_ClockConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0x9a>
		Error_Handler();
 8001446:	f000 f807 	bl	8001458 <Error_Handler>
	}
}
 800144a:	bf00      	nop
 800144c:	3758      	adds	r7, #88	; 0x58
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000

08001458 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800145c:	b672      	cpsid	i
}
 800145e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001460:	e7fe      	b.n	8001460 <Error_Handler+0x8>
	...

08001464 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <MX_RTC_Init+0x48>)
 800146a:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <MX_RTC_Init+0x4c>)
 800146c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_RTC_Init+0x48>)
 8001470:	2200      	movs	r2, #0
 8001472:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001474:	4b0d      	ldr	r3, [pc, #52]	; (80014ac <MX_RTC_Init+0x48>)
 8001476:	227f      	movs	r2, #127	; 0x7f
 8001478:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_RTC_Init+0x48>)
 800147c:	22ff      	movs	r2, #255	; 0xff
 800147e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <MX_RTC_Init+0x48>)
 8001482:	2200      	movs	r2, #0
 8001484:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_RTC_Init+0x48>)
 8001488:	2200      	movs	r2, #0
 800148a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <MX_RTC_Init+0x48>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_RTC_Init+0x48>)
 8001494:	2200      	movs	r2, #0
 8001496:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_RTC_Init+0x48>)
 800149a:	f006 f8c5 	bl	8007628 <HAL_RTC_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80014a4:	f7ff ffd8 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	200002d0 	.word	0x200002d0
 80014b0:	40002800 	.word	0x40002800

080014b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0a4      	sub	sp, #144	; 0x90
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	2288      	movs	r2, #136	; 0x88
 80014c2:	2100      	movs	r1, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f009 fc5b 	bl	800ad80 <memset>
  if(rtcHandle->Instance==RTC)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a14      	ldr	r2, [pc, #80]	; (8001520 <HAL_RTC_MspInit+0x6c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d120      	bne.n	8001516 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80014da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e2:	f107 0308 	add.w	r3, r7, #8
 80014e6:	4618      	mov	r0, r3
 80014e8:	f005 fbe2 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80014f2:	f7ff ffb1 	bl	8001458 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <HAL_RTC_MspInit+0x70>)
 80014f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014fc:	4a09      	ldr	r2, [pc, #36]	; (8001524 <HAL_RTC_MspInit+0x70>)
 80014fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001502:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2003      	movs	r0, #3
 800150c:	f003 fdf1 	bl	80050f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001510:	2003      	movs	r0, #3
 8001512:	f003 fe0a 	bl	800512a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001516:	bf00      	nop
 8001518:	3790      	adds	r7, #144	; 0x90
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40002800 	.word	0x40002800
 8001524:	40021000 	.word	0x40021000

08001528 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <MX_SPI1_Init+0x74>)
 800152e:	4a1c      	ldr	r2, [pc, #112]	; (80015a0 <MX_SPI1_Init+0x78>)
 8001530:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <MX_SPI1_Init+0x74>)
 8001534:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001538:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <MX_SPI1_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001540:	4b16      	ldr	r3, [pc, #88]	; (800159c <MX_SPI1_Init+0x74>)
 8001542:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001546:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <MX_SPI1_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <MX_SPI1_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <MX_SPI1_Init+0x74>)
 8001556:	f44f 7200 	mov.w	r2, #512	; 0x200
 800155a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <MX_SPI1_Init+0x74>)
 800155e:	2218      	movs	r2, #24
 8001560:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_SPI1_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001568:	4b0c      	ldr	r3, [pc, #48]	; (800159c <MX_SPI1_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <MX_SPI1_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_SPI1_Init+0x74>)
 8001576:	2207      	movs	r2, #7
 8001578:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <MX_SPI1_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <MX_SPI1_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_SPI1_Init+0x74>)
 8001588:	f006 fa78 	bl	8007a7c <HAL_SPI_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001592:	f7ff ff61 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200002f4 	.word	0x200002f4
 80015a0:	40013000 	.word	0x40013000

080015a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_SPI_MspInit+0x7c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d128      	bne.n	8001618 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_SPI_MspInit+0x80>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ca:	4a16      	ldr	r2, [pc, #88]	; (8001624 <HAL_SPI_MspInit+0x80>)
 80015cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015d0:	6613      	str	r3, [r2, #96]	; 0x60
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <HAL_SPI_MspInit+0x80>)
 80015d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_SPI_MspInit+0x80>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <HAL_SPI_MspInit+0x80>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_SPI_MspInit+0x80>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015f6:	23e0      	movs	r3, #224	; 0xe0
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001606:	2305      	movs	r3, #5
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001614:	f004 f978 	bl	8005908 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	; 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40013000 	.word	0x40013000
 8001624:	40021000 	.word	0x40021000

08001628 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a08      	ldr	r2, [pc, #32]	; (8001658 <HAL_SPI_MspDeInit+0x30>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d10a      	bne.n	8001650 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <HAL_SPI_MspDeInit+0x34>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800163e:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_SPI_MspDeInit+0x34>)
 8001640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001644:	6613      	str	r3, [r2, #96]	; 0x60
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001646:	21e0      	movs	r1, #224	; 0xe0
 8001648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164c:	f004 fb06 	bl	8005c5c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40013000 	.word	0x40013000
 800165c:	40021000 	.word	0x40021000

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	4b0f      	ldr	r3, [pc, #60]	; (80016a4 <HAL_MspInit+0x44>)
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	4a0e      	ldr	r2, [pc, #56]	; (80016a4 <HAL_MspInit+0x44>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6613      	str	r3, [r2, #96]	; 0x60
 8001672:	4b0c      	ldr	r3, [pc, #48]	; (80016a4 <HAL_MspInit+0x44>)
 8001674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_MspInit+0x44>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001682:	4a08      	ldr	r2, [pc, #32]	; (80016a4 <HAL_MspInit+0x44>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001688:	6593      	str	r3, [r2, #88]	; 0x58
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_MspInit+0x44>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40021000 	.word	0x40021000

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <NMI_Handler+0x4>

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <MemManage_Handler+0x4>

080016ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f4:	f003 f97e 	bl	80049f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}

080016fc <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <RTC_WKUP_IRQHandler+0x10>)
 8001702:	f006 f995 	bl	8007a30 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200002d0 	.word	0x200002d0

08001710 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <DMA1_Channel2_IRQHandler+0x10>)
 8001716:	f003 fdb3 	bl	8005280 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000284 	.word	0x20000284

08001724 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
//  if (gdo0_cb != 0x0)
//  {
//	  gdo0_cb();
//  }
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001728:	f44f 7080 	mov.w	r0, #256	; 0x100
 800172c:	f004 fbba 	bl	8005ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}

08001734 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001738:	4802      	ldr	r0, [pc, #8]	; (8001744 <TIM4_IRQHandler+0x10>)
 800173a:	f007 fa6d 	bl	8008c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	2000035c 	.word	0x2000035c

08001748 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint8_t c;

	if ((__HAL_UART_GET_FLAG(&huart1, UART_FLAG_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(&huart1, UART_IT_RXNE) != RESET))
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <USART1_IRQHandler+0x64>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	f003 0320 	and.w	r3, r3, #32
 8001758:	2b20      	cmp	r3, #32
 800175a:	d120      	bne.n	800179e <USART1_IRQHandler+0x56>
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <USART1_IRQHandler+0x64>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0320 	and.w	r3, r3, #32
 8001766:	2b00      	cmp	r3, #0
 8001768:	d019      	beq.n	800179e <USART1_IRQHandler+0x56>
	{
		c = (uint8_t)(huart1.Instance->RDR & (uint8_t)0x00FF);
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <USART1_IRQHandler+0x64>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001770:	b29b      	uxth	r3, r3
 8001772:	71fb      	strb	r3, [r7, #7]
		if(c != 0)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00d      	beq.n	8001796 <USART1_IRQHandler+0x4e>
		{
			ringbuf_writeone(&rxrb, c);
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	4619      	mov	r1, r3
 800177e:	480c      	ldr	r0, [pc, #48]	; (80017b0 <USART1_IRQHandler+0x68>)
 8001780:	f002 f8a4 	bl	80038cc <ringbuf_writeone>
			//ringbuf_writeone(&rxrb, c);
			if(c == '\r' || c == '\n')
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	2b0d      	cmp	r3, #13
 8001788:	d002      	beq.n	8001790 <USART1_IRQHandler+0x48>
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	2b0a      	cmp	r3, #10
 800178e:	d102      	bne.n	8001796 <USART1_IRQHandler+0x4e>
				uart_flag = 1;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <USART1_IRQHandler+0x6c>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
		}
		__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <USART1_IRQHandler+0x64>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2220      	movs	r2, #32
 800179c:	621a      	str	r2, [r3, #32]
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800179e:	4803      	ldr	r0, [pc, #12]	; (80017ac <USART1_IRQHandler+0x64>)
 80017a0:	f008 faae 	bl	8009d00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000440 	.word	0x20000440
 80017b0:	2000059c 	.word	0x2000059c
 80017b4:	20000597 	.word	0x20000597

080017b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if (gdo2_cb != 0x0)
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <EXTI15_10_IRQHandler+0x28>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <EXTI15_10_IRQHandler+0x12>
  {
	  gdo2_cb();
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <EXTI15_10_IRQHandler+0x28>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4798      	blx	r3
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80017ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80017ce:	f004 fb69 	bl	8005ea4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80017d2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017d6:	f004 fb65 	bl	8005ea4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000055c 	.word	0x2000055c

080017e4 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <TIM6_DAC_IRQHandler+0x10>)
 80017ea:	f007 fa15 	bl	8008c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	200003f4 	.word	0x200003f4

080017f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
	return 1;
 80017fc:	2301      	movs	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_kill>:

int _kill(int pid, int sig)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001812:	f009 fa8b 	bl	800ad2c <__errno>
 8001816:	4603      	mov	r3, r0
 8001818:	2216      	movs	r2, #22
 800181a:	601a      	str	r2, [r3, #0]
	return -1;
 800181c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001820:	4618      	mov	r0, r3
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <_exit>:

void _exit (int status)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff ffe7 	bl	8001808 <_kill>
	while (1) {}		/* Make sure we hang here */
 800183a:	e7fe      	b.n	800183a <_exit+0x12>

0800183c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	e00a      	b.n	8001864 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800184e:	f3af 8000 	nop.w
 8001852:	4601      	mov	r1, r0
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	60ba      	str	r2, [r7, #8]
 800185a:	b2ca      	uxtb	r2, r1
 800185c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbf0      	blt.n	800184e <_read+0x12>
	}

return len;
 800186c:	687b      	ldr	r3, [r7, #4]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
	return -1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001882:	4618      	mov	r0, r3
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189e:	605a      	str	r2, [r3, #4]
	return 0;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_isatty>:

int _isatty(int file)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
	return 1;
 80018b6:	2301      	movs	r3, #1
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e8:	4a14      	ldr	r2, [pc, #80]	; (800193c <_sbrk+0x5c>)
 80018ea:	4b15      	ldr	r3, [pc, #84]	; (8001940 <_sbrk+0x60>)
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018fc:	4b11      	ldr	r3, [pc, #68]	; (8001944 <_sbrk+0x64>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	; (8001948 <_sbrk+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4b10      	ldr	r3, [pc, #64]	; (8001944 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001910:	f009 fa0c 	bl	800ad2c <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	220c      	movs	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295
 800191e:	e009      	b.n	8001934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <_sbrk+0x64>)
 8001930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20018000 	.word	0x20018000
 8001940:	00000400 	.word	0x00000400
 8001944:	20000358 	.word	0x20000358
 8001948:	200006a8 	.word	0x200006a8

0800194c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <SystemInit+0x20>)
 8001952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001956:	4a05      	ldr	r2, [pc, #20]	; (800196c <SystemInit+0x20>)
 8001958:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800195c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <MX_TIM4_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim6;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08e      	sub	sp, #56	; 0x38
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001990:	463b      	mov	r3, r7
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019a2:	4b37      	ldr	r3, [pc, #220]	; (8001a80 <MX_TIM4_Init+0x110>)
 80019a4:	4a37      	ldr	r2, [pc, #220]	; (8001a84 <MX_TIM4_Init+0x114>)
 80019a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 488-1; // 488-1
 80019a8:	4b35      	ldr	r3, [pc, #212]	; (8001a80 <MX_TIM4_Init+0x110>)
 80019aa:	f240 12e7 	movw	r2, #487	; 0x1e7
 80019ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b0:	4b33      	ldr	r3, [pc, #204]	; (8001a80 <MX_TIM4_Init+0x110>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535-1;
 80019b6:	4b32      	ldr	r3, [pc, #200]	; (8001a80 <MX_TIM4_Init+0x110>)
 80019b8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80019bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019be:	4b30      	ldr	r3, [pc, #192]	; (8001a80 <MX_TIM4_Init+0x110>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c4:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <MX_TIM4_Init+0x110>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019ca:	482d      	ldr	r0, [pc, #180]	; (8001a80 <MX_TIM4_Init+0x110>)
 80019cc:	f006 fe06 	bl	80085dc <HAL_TIM_Base_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80019d6:	f7ff fd3f 	bl	8001458 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019e4:	4619      	mov	r1, r3
 80019e6:	4826      	ldr	r0, [pc, #152]	; (8001a80 <MX_TIM4_Init+0x110>)
 80019e8:	f007 fab0 	bl	8008f4c <HAL_TIM_ConfigClockSource>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80019f2:	f7ff fd31 	bl	8001458 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80019f6:	4822      	ldr	r0, [pc, #136]	; (8001a80 <MX_TIM4_Init+0x110>)
 80019f8:	f006 ff62 	bl	80088c0 <HAL_TIM_OC_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001a02:	f7ff fd29 	bl	8001458 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	481a      	ldr	r0, [pc, #104]	; (8001a80 <MX_TIM4_Init+0x110>)
 8001a16:	f007 ffb1 	bl	800997c <HAL_TIMEx_MasterConfigSynchronization>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001a20:	f7ff fd1a 	bl	8001458 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001a24:	2300      	movs	r3, #0
 8001a26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a34:	463b      	mov	r3, r7
 8001a36:	2200      	movs	r2, #0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4811      	ldr	r0, [pc, #68]	; (8001a80 <MX_TIM4_Init+0x110>)
 8001a3c:	f007 fa0c 	bl	8008e58 <HAL_TIM_OC_ConfigChannel>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001a46:	f7ff fd07 	bl	8001458 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480b      	ldr	r0, [pc, #44]	; (8001a80 <MX_TIM4_Init+0x110>)
 8001a52:	f007 fa01 	bl	8008e58 <HAL_TIM_OC_ConfigChannel>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8001a5c:	f7ff fcfc 	bl	8001458 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a60:	463b      	mov	r3, r7
 8001a62:	2208      	movs	r2, #8
 8001a64:	4619      	mov	r1, r3
 8001a66:	4806      	ldr	r0, [pc, #24]	; (8001a80 <MX_TIM4_Init+0x110>)
 8001a68:	f007 f9f6 	bl	8008e58 <HAL_TIM_OC_ConfigChannel>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM4_Init+0x106>
  {
    Error_Handler();
 8001a72:	f7ff fcf1 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	3738      	adds	r7, #56	; 0x38
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	2000035c 	.word	0x2000035c
 8001a84:	40000800 	.word	0x40000800

08001a88 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a22      	ldr	r2, [pc, #136]	; (8001b20 <HAL_TIM_Base_MspInit+0x98>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d113      	bne.n	8001ac2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a9a:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <HAL_TIM_Base_MspInit+0x9c>)
 8001a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9e:	4a21      	ldr	r2, [pc, #132]	; (8001b24 <HAL_TIM_Base_MspInit+0x9c>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa6:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <HAL_TIM_Base_MspInit+0x9c>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697b      	ldr	r3, [r7, #20]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2105      	movs	r1, #5
 8001ab6:	201e      	movs	r0, #30
 8001ab8:	f003 fb1b 	bl	80050f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001abc:	201e      	movs	r0, #30
 8001abe:	f003 fb34 	bl	800512a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  if(tim_baseHandle->Instance==TIM15)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <HAL_TIM_Base_MspInit+0xa0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d10b      	bne.n	8001ae4 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
	  __HAL_RCC_TIM15_CLK_ENABLE();
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_TIM_Base_MspInit+0x9c>)
 8001ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ad0:	4a14      	ldr	r2, [pc, #80]	; (8001b24 <HAL_TIM_Base_MspInit+0x9c>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad6:	6613      	str	r3, [r2, #96]	; 0x60
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_TIM_Base_MspInit+0x9c>)
 8001ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]
    //HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  if(tim_baseHandle->Instance==TIM6)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a10      	ldr	r2, [pc, #64]	; (8001b2c <HAL_TIM_Base_MspInit+0xa4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d113      	bne.n	8001b16 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_TIM_Base_MspInit+0x9c>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	4a0c      	ldr	r2, [pc, #48]	; (8001b24 <HAL_TIM_Base_MspInit+0x9c>)
 8001af4:	f043 0310 	orr.w	r3, r3, #16
 8001af8:	6593      	str	r3, [r2, #88]	; 0x58
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_TIM_Base_MspInit+0x9c>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2105      	movs	r1, #5
 8001b0a:	2036      	movs	r0, #54	; 0x36
 8001b0c:	f003 faf1 	bl	80050f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b10:	2036      	movs	r0, #54	; 0x36
 8001b12:	f003 fb0a 	bl	800512a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b16:	bf00      	nop
 8001b18:	3718      	adds	r7, #24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40000800 	.word	0x40000800
 8001b24:	40021000 	.word	0x40021000
 8001b28:	40014000 	.word	0x40014000
 8001b2c:	40001000 	.word	0x40001000

08001b30 <HAL_TIM_Base_MspDeInit>:
  /* USER CODE END TIM15_MspInit 1 */
  }
}

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <HAL_TIM_Base_MspDeInit+0x48>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d108      	bne.n	8001b54 <HAL_TIM_Base_MspDeInit+0x24>
  {
  /* USER CODE BEGIN TIM4_MspDeInit 0 */

  /* USER CODE END TIM4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM4_CLK_DISABLE();
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_TIM_Base_MspDeInit+0x4c>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <HAL_TIM_Base_MspDeInit+0x4c>)
 8001b48:	f023 0304 	bic.w	r3, r3, #4
 8001b4c:	6593      	str	r3, [r2, #88]	; 0x58

    /* TIM4 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8001b4e:	201e      	movs	r0, #30
 8001b50:	f003 faf9 	bl	8005146 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM4_MspDeInit 1 */

  /* USER CODE END TIM4_MspDeInit 1 */
  }
  if(tim_baseHandle->Instance==TIM6)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <HAL_TIM_Base_MspDeInit+0x50>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d108      	bne.n	8001b70 <HAL_TIM_Base_MspDeInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspDeInit 0 */

  /* USER CODE END TIM6_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM6_CLK_DISABLE();
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <HAL_TIM_Base_MspDeInit+0x4c>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	4a06      	ldr	r2, [pc, #24]	; (8001b7c <HAL_TIM_Base_MspDeInit+0x4c>)
 8001b64:	f023 0310 	bic.w	r3, r3, #16
 8001b68:	6593      	str	r3, [r2, #88]	; 0x58

    /* TIM6 interrupt Deinit */
    HAL_NVIC_DisableIRQ(TIM6_DAC_IRQn);
 8001b6a:	2036      	movs	r0, #54	; 0x36
 8001b6c:	f003 faeb 	bl	8005146 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM6_MspDeInit 1 */

  /* USER CODE END TIM6_MspDeInit 1 */
  }
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40000800 	.word	0x40000800
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40001000 	.word	0x40001000

08001b84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <MX_USART1_UART_Init+0x58>)
 8001b8a:	4a15      	ldr	r2, [pc, #84]	; (8001be0 <MX_USART1_UART_Init+0x5c>)
 8001b8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <MX_USART1_UART_Init+0x58>)
 8001b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <MX_USART1_UART_Init+0x58>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <MX_USART1_UART_Init+0x58>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <MX_USART1_UART_Init+0x58>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <MX_USART1_UART_Init+0x58>)
 8001baa:	220c      	movs	r2, #12
 8001bac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <MX_USART1_UART_Init+0x58>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <MX_USART1_UART_Init+0x58>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <MX_USART1_UART_Init+0x58>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <MX_USART1_UART_Init+0x58>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MX_USART1_UART_Init+0x58>)
 8001bc8:	f007 ff7e 	bl	8009ac8 <HAL_UART_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001bd2:	f7ff fc41 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000440 	.word	0x20000440
 8001be0:	40013800 	.word	0x40013800

08001be4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001be8:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <MX_USART3_UART_Init+0x58>)
 8001bea:	4a15      	ldr	r2, [pc, #84]	; (8001c40 <MX_USART3_UART_Init+0x5c>)
 8001bec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <MX_USART3_UART_Init+0x58>)
 8001bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf6:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <MX_USART3_UART_Init+0x58>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bfc:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <MX_USART3_UART_Init+0x58>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <MX_USART3_UART_Init+0x58>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <MX_USART3_UART_Init+0x58>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <MX_USART3_UART_Init+0x58>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <MX_USART3_UART_Init+0x58>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c1a:	4b08      	ldr	r3, [pc, #32]	; (8001c3c <MX_USART3_UART_Init+0x58>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <MX_USART3_UART_Init+0x58>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c26:	4805      	ldr	r0, [pc, #20]	; (8001c3c <MX_USART3_UART_Init+0x58>)
 8001c28:	f007 ff4e 	bl	8009ac8 <HAL_UART_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001c32:	f7ff fc11 	bl	8001458 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200004c4 	.word	0x200004c4
 8001c40:	40004800 	.word	0x40004800

08001c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b0ae      	sub	sp, #184	; 0xb8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c5c:	f107 031c 	add.w	r3, r7, #28
 8001c60:	2288      	movs	r2, #136	; 0x88
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f009 f88b 	bl	800ad80 <memset>
  if(uartHandle->Instance==USART1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a46      	ldr	r2, [pc, #280]	; (8001d88 <HAL_UART_MspInit+0x144>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d145      	bne.n	8001d00 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c74:	2301      	movs	r3, #1
 8001c76:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c7c:	f107 031c 	add.w	r3, r7, #28
 8001c80:	4618      	mov	r0, r3
 8001c82:	f005 f815 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c8c:	f7ff fbe4 	bl	8001458 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c90:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <HAL_UART_MspInit+0x148>)
 8001c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c94:	4a3d      	ldr	r2, [pc, #244]	; (8001d8c <HAL_UART_MspInit+0x148>)
 8001c96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c9a:	6613      	str	r3, [r2, #96]	; 0x60
 8001c9c:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <HAL_UART_MspInit+0x148>)
 8001c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca8:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <HAL_UART_MspInit+0x148>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	4a37      	ldr	r2, [pc, #220]	; (8001d8c <HAL_UART_MspInit+0x148>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb4:	4b35      	ldr	r3, [pc, #212]	; (8001d8c <HAL_UART_MspInit+0x148>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cc0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cda:	2307      	movs	r3, #7
 8001cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cea:	f003 fe0d 	bl	8005908 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2105      	movs	r1, #5
 8001cf2:	2025      	movs	r0, #37	; 0x25
 8001cf4:	f003 f9fd 	bl	80050f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001cf8:	2025      	movs	r0, #37	; 0x25
 8001cfa:	f003 fa16 	bl	800512a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001cfe:	e03f      	b.n	8001d80 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART3)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <HAL_UART_MspInit+0x14c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d13a      	bne.n	8001d80 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 ffca 	bl	8006cb0 <HAL_RCCEx_PeriphCLKConfig>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8001d22:	f7ff fb99 	bl	8001458 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d26:	4b19      	ldr	r3, [pc, #100]	; (8001d8c <HAL_UART_MspInit+0x148>)
 8001d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2a:	4a18      	ldr	r2, [pc, #96]	; (8001d8c <HAL_UART_MspInit+0x148>)
 8001d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d30:	6593      	str	r3, [r2, #88]	; 0x58
 8001d32:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <HAL_UART_MspInit+0x148>)
 8001d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_UART_MspInit+0x148>)
 8001d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d42:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <HAL_UART_MspInit+0x148>)
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_UART_MspInit+0x148>)
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d56:	2330      	movs	r3, #48	; 0x30
 8001d58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d6e:	2307      	movs	r3, #7
 8001d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4806      	ldr	r0, [pc, #24]	; (8001d94 <HAL_UART_MspInit+0x150>)
 8001d7c:	f003 fdc4 	bl	8005908 <HAL_GPIO_Init>
}
 8001d80:	bf00      	nop
 8001d82:	37b8      	adds	r7, #184	; 0xb8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40013800 	.word	0x40013800
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40004800 	.word	0x40004800
 8001d94:	48000800 	.word	0x48000800

08001d98 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <HAL_UART_MspDeInit+0x58>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d10f      	bne.n	8001dca <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_UART_MspDeInit+0x5c>)
 8001dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dae:	4a11      	ldr	r2, [pc, #68]	; (8001df4 <HAL_UART_MspDeInit+0x5c>)
 8001db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001db4:	6613      	str	r3, [r2, #96]	; 0x60

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001db6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dbe:	f003 ff4d 	bl	8005c5c <HAL_GPIO_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8001dc2:	2025      	movs	r0, #37	; 0x25
 8001dc4:	f003 f9bf 	bl	8005146 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
}
 8001dc8:	e00e      	b.n	8001de8 <HAL_UART_MspDeInit+0x50>
  else if(uartHandle->Instance==USART3)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a0a      	ldr	r2, [pc, #40]	; (8001df8 <HAL_UART_MspDeInit+0x60>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d109      	bne.n	8001de8 <HAL_UART_MspDeInit+0x50>
    __HAL_RCC_USART3_CLK_DISABLE();
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <HAL_UART_MspDeInit+0x5c>)
 8001dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd8:	4a06      	ldr	r2, [pc, #24]	; (8001df4 <HAL_UART_MspDeInit+0x5c>)
 8001dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dde:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_4|GPIO_PIN_5);
 8001de0:	2130      	movs	r1, #48	; 0x30
 8001de2:	4806      	ldr	r0, [pc, #24]	; (8001dfc <HAL_UART_MspDeInit+0x64>)
 8001de4:	f003 ff3a 	bl	8005c5c <HAL_GPIO_DeInit>
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40013800 	.word	0x40013800
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40004800 	.word	0x40004800
 8001dfc:	48000800 	.word	0x48000800

08001e00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e38 <LoopForever+0x2>


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e04:	f7ff fda2 	bl	800194c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e08:	480c      	ldr	r0, [pc, #48]	; (8001e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e0a:	490d      	ldr	r1, [pc, #52]	; (8001e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <LoopForever+0xe>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e10:	e002      	b.n	8001e18 <LoopCopyDataInit>

08001e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e16:	3304      	adds	r3, #4

08001e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e1c:	d3f9      	bcc.n	8001e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e20:	4c0a      	ldr	r4, [pc, #40]	; (8001e4c <LoopForever+0x16>)
  movs r3, #0
 8001e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e24:	e001      	b.n	8001e2a <LoopFillZerobss>

08001e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e28:	3204      	adds	r2, #4

08001e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e2c:	d3fb      	bcc.n	8001e26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f008 ff83 	bl	800ad38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e32:	f7ff f9ed 	bl	8001210 <main>

08001e36 <LoopForever>:

LoopForever:
    b LoopForever
 8001e36:	e7fe      	b.n	8001e36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e40:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8001e44:	0800fee8 	.word	0x0800fee8
  ldr r2, =_sbss
 8001e48:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001e4c:	200006a4 	.word	0x200006a4

08001e50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC1_2_IRQHandler>
	...

08001e54 <HAL_TIM_PeriodElapsedCallback>:

/*
타이머 콜백 
*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)  
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM6)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d114      	bne.n	8001e90 <HAL_TIM_PeriodElapsedCallback+0x3c>
  {
	  if ( adc_Count++ >=  nuber_of_sample )
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	b291      	uxth	r1, r2
 8001e6e:	4a0b      	ldr	r2, [pc, #44]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e70:	8011      	strh	r1, [r2, #0]
 8001e72:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001e76:	d30b      	bcc.n	8001e90 <HAL_TIM_PeriodElapsedCallback+0x3c>
	  {
		HAL_ADC_Stop_DMA(&hadc2);
 8001e78:	4809      	ldr	r0, [pc, #36]	; (8001ea0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e7a:	f002 fea7 	bl	8004bcc <HAL_ADC_Stop_DMA>
		HAL_TIM_Base_Stop_IT(&htim6);
 8001e7e:	4809      	ldr	r0, [pc, #36]	; (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001e80:	f006 fcef 	bl	8008862 <HAL_TIM_Base_Stop_IT>
		adc_complete = 1;
 8001e84:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
		adc_Count = 0;
 8001e8a:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	801a      	strh	r2, [r3, #0]
	  }
  }
}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40001000 	.word	0x40001000
 8001e9c:	20000548 	.word	0x20000548
 8001ea0:	20000220 	.word	0x20000220
 8001ea4:	200003f4 	.word	0x200003f4
 8001ea8:	2000054a 	.word	0x2000054a

08001eac <Read_ST_Flash>:

//////////////////////////////////////////////////////////////////////////////////


void Read_ST_Flash(uint32_t addr, uint32_t*ptr, uint16_t nword)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	80fb      	strh	r3, [r7, #6]
	for ( uint16_t i=0; i<nword; i++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	82fb      	strh	r3, [r7, #22]
 8001ebe:	e00c      	b.n	8001eda <Read_ST_Flash+0x2e>
	{
		ptr[i] = *(__IO uint32_t *)addr;
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	8afb      	ldrh	r3, [r7, #22]
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	68b9      	ldr	r1, [r7, #8]
 8001ec8:	440b      	add	r3, r1
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	601a      	str	r2, [r3, #0]
		addr = addr + 4;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	60fb      	str	r3, [r7, #12]
	for ( uint16_t i=0; i<nword; i++)
 8001ed4:	8afb      	ldrh	r3, [r7, #22]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	82fb      	strh	r3, [r7, #22]
 8001eda:	8afa      	ldrh	r2, [r7, #22]
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d3ee      	bcc.n	8001ec0 <Read_ST_Flash+0x14>
	}
}
 8001ee2:	bf00      	nop
 8001ee4:	bf00      	nop
 8001ee6:	371c      	adds	r7, #28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <Write_ST_Flash>:


uint8_t Write_ST_Flash(uint32_t addr, uint64_t*ptr , uint16_t ndword)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08a      	sub	sp, #40	; 0x28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	4613      	mov	r3, r2
 8001efc:	80fb      	strh	r3, [r7, #6]
	uint8_t page;
	uint32_t PAGEError = 0 ;
 8001efe:	2300      	movs	r3, #0
 8001f00:	623b      	str	r3, [r7, #32]
	FLASH_EraseInitTypeDef EraseInitStruct;

	if ( ndword > 512 )
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f08:	d901      	bls.n	8001f0e <Write_ST_Flash+0x1e>
	{
		return 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e047      	b.n	8001f9e <Write_ST_Flash+0xae>
	}

	HAL_FLASH_Unlock();
 8001f0e:	f003 fad3 	bl	80054b8 <HAL_FLASH_Unlock>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001f12:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <Write_ST_Flash+0xb8>)
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	4a24      	ldr	r2, [pc, #144]	; (8001fa8 <Write_ST_Flash+0xb8>)
 8001f18:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001f1c:	6193      	str	r3, [r2, #24]
 8001f1e:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <Write_ST_Flash+0xb8>)
 8001f20:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001f24:	611a      	str	r2, [r3, #16]

	page = ( addr - FLASH_BASE ) / FLASH_PAGE_SIZE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001f2c:	0adb      	lsrs	r3, r3, #11
 8001f2e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
	EraseInitStruct.Banks = FLASH_BANK_1;
 8001f36:	2301      	movs	r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
	EraseInitStruct.Page = page;
 8001f3a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f3e:	61bb      	str	r3, [r7, #24]
	EraseInitStruct.NbPages = 1;
 8001f40:	2301      	movs	r3, #1
 8001f42:	61fb      	str	r3, [r7, #28]

	if ( HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError)!= HAL_OK)
 8001f44:	f107 0220 	add.w	r2, r7, #32
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f003 fb96 	bl	8005680 <HAL_FLASHEx_Erase>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <Write_ST_Flash+0x6e>
	{
		// error
		return 1;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e01f      	b.n	8001f9e <Write_ST_Flash+0xae>
	}
	for ( uint16_t i = 0 ; i < ndword; i++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f62:	e015      	b.n	8001f90 <Write_ST_Flash+0xa0>
	{
		if ( HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr, ptr[i]) == HAL_OK )
 8001f64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f70:	68f9      	ldr	r1, [r7, #12]
 8001f72:	2000      	movs	r0, #0
 8001f74:	f003 fa34 	bl	80053e0 <HAL_FLASH_Program>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d103      	bne.n	8001f86 <Write_ST_Flash+0x96>
		{
			addr = addr + 8;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	3308      	adds	r3, #8
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	e001      	b.n	8001f8a <Write_ST_Flash+0x9a>
		}
		else
		{
			//error
			return 1;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e009      	b.n	8001f9e <Write_ST_Flash+0xae>
	for ( uint16_t i = 0 ; i < ndword; i++)
 8001f8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f90:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d3e5      	bcc.n	8001f64 <Write_ST_Flash+0x74>
		}
	}
	HAL_FLASH_Lock();
 8001f98:	f003 fab0 	bl	80054fc <HAL_FLASH_Lock>
	return 0;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3728      	adds	r7, #40	; 0x28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40022000 	.word	0x40022000

08001fac <cc1120_gdo0_register_callback>:
uint16_t (*gdo2_cb)(void);

uint8_t txPowerTeb;

void cc1120_gdo0_register_callback(uint16_t (*cb)(void))
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  gdo0_cb = cb;
 8001fb4:	4a04      	ldr	r2, [pc, #16]	; (8001fc8 <cc1120_gdo0_register_callback+0x1c>)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6013      	str	r3, [r2, #0]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000558 	.word	0x20000558

08001fcc <cc1120_gdo2_register_callback>:

void cc1120_gdo2_register_callback(uint16_t (*cb)(void))
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  gdo2_cb = cb;
 8001fd4:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <cc1120_gdo2_register_callback+0x1c>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6013      	str	r3, [r2, #0]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	2000055c 	.word	0x2000055c

08001fec <cc112x_hw_rst>:


void cc112x_hw_rst(void) {
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(CC1120_RST_PORT, CC1120_RST_PIN, GPIO_PIN_RESET);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ff6:	4808      	ldr	r0, [pc, #32]	; (8002018 <cc112x_hw_rst+0x2c>)
 8001ff8:	f003 ff3c 	bl	8005e74 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8001ffc:	2014      	movs	r0, #20
 8001ffe:	f002 fd19 	bl	8004a34 <HAL_Delay>
  HAL_GPIO_WritePin(CC1120_RST_PORT, CC1120_RST_PIN, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002008:	4803      	ldr	r0, [pc, #12]	; (8002018 <cc112x_hw_rst+0x2c>)
 800200a:	f003 ff33 	bl	8005e74 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800200e:	2005      	movs	r0, #5
 8002010:	f002 fd10 	bl	8004a34 <HAL_Delay>
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	48000800 	.word	0x48000800

0800201c <CC1120_SpiRead>:



uint8_t CC1120_SpiRead(uint8_t c)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af02      	add	r7, sp, #8
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
	uint8_t rc;
	HAL_StatusTypeDef status = HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_TransmitReceive(&hspi1, &c, &rc, 1, 20);
 800202a:	f107 020e 	add.w	r2, r7, #14
 800202e:	1df9      	adds	r1, r7, #7
 8002030:	2314      	movs	r3, #20
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2301      	movs	r3, #1
 8002036:	4807      	ldr	r0, [pc, #28]	; (8002054 <CC1120_SpiRead+0x38>)
 8002038:	f005 ff59 	bl	8007eee <HAL_SPI_TransmitReceive>
 800203c:	4603      	mov	r3, r0
 800203e:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <CC1120_SpiRead+0x2e>
	{
		return 0xff;
 8002046:	23ff      	movs	r3, #255	; 0xff
 8002048:	e000      	b.n	800204c <CC1120_SpiRead+0x30>
	}
	return (rc);
 800204a:	7bbb      	ldrb	r3, [r7, #14]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	200002f4 	.word	0x200002f4

08002058 <CC1120_SpiWrite>:

uint8_t CC1120_SpiWrite(uint8_t c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
	status = HAL_SPI_Transmit(&hspi1, &c, 1, 20);
 8002066:	1df9      	adds	r1, r7, #7
 8002068:	2314      	movs	r3, #20
 800206a:	2201      	movs	r2, #1
 800206c:	4807      	ldr	r0, [pc, #28]	; (800208c <CC1120_SpiWrite+0x34>)
 800206e:	f005 fdd0 	bl	8007c12 <HAL_SPI_Transmit>
 8002072:	4603      	mov	r3, r0
 8002074:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <CC1120_SpiWrite+0x28>
	{
		return 0xff;
 800207c:	23ff      	movs	r3, #255	; 0xff
 800207e:	e000      	b.n	8002082 <CC1120_SpiWrite+0x2a>
	}
	return c;
 8002080:	79fb      	ldrb	r3, [r7, #7]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200002f4 	.word	0x200002f4

08002090 <CC1120_SpiCmdStrobe>:

uint8_t CC1120_SpiCmdStrobe(uint8_t cmd)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af02      	add	r7, sp, #8
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 800209a:	2300      	movs	r3, #0
 800209c:	73fb      	strb	r3, [r7, #15]

	uint8_t rc;
	SPI1_NSS_LOW();
 800209e:	2200      	movs	r2, #0
 80020a0:	2110      	movs	r1, #16
 80020a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a6:	f003 fee5 	bl	8005e74 <HAL_GPIO_WritePin>
	}
	#endif
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
	
	// status = HAL_SPI_TransmitReceive(&hspi1, &cmd, &rc, 1, 20);  // 원래 
	status = HAL_SPI_TransmitReceive(&hspi1, &cmd, &rc, 1, 20);    // 테스트
 80020aa:	f107 020e 	add.w	r2, r7, #14
 80020ae:	1df9      	adds	r1, r7, #7
 80020b0:	2314      	movs	r3, #20
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2301      	movs	r3, #1
 80020b6:	480d      	ldr	r0, [pc, #52]	; (80020ec <CC1120_SpiCmdStrobe+0x5c>)
 80020b8:	f005 ff19 	bl	8007eee <HAL_SPI_TransmitReceive>
 80020bc:	4603      	mov	r3, r0
 80020be:	73fb      	strb	r3, [r7, #15]

	if (status != HAL_OK)
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <CC1120_SpiCmdStrobe+0x3a>
	{
		return 0xFF;           
 80020c6:	23ff      	movs	r3, #255	; 0xff
 80020c8:	e00c      	b.n	80020e4 <CC1120_SpiCmdStrobe+0x54>
	}
	
	SPI1_NSS_HIGH();
 80020ca:	2201      	movs	r2, #1
 80020cc:	2110      	movs	r1, #16
 80020ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020d2:	f003 fecf 	bl	8005e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80020d6:	2201      	movs	r2, #1
 80020d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020dc:	4804      	ldr	r0, [pc, #16]	; (80020f0 <CC1120_SpiCmdStrobe+0x60>)
 80020de:	f003 fec9 	bl	8005e74 <HAL_GPIO_WritePin>
	return (rc);
 80020e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	200002f4 	.word	0x200002f4
 80020f0:	48000800 	.word	0x48000800

080020f4 <CC1120_ReadWriteBurstSingle>:
// ---------------------------------------

void CC1120_ReadWriteBurstSingle(uint16_t addr, uint8_t *pData, uint8_t len)
{
 80020f4:	b590      	push	{r4, r7, lr}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	6039      	str	r1, [r7, #0]
 80020fe:	80fb      	strh	r3, [r7, #6]
 8002100:	4613      	mov	r3, r2
 8002102:	717b      	strb	r3, [r7, #5]
	unsigned i;
	/* Communicate len number of bytes: if RX - the procedure sends 0x00 to push bytes from slave*/
	if (addr & RADIO_READ_ACCESS)
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210a:	2b00      	cmp	r3, #0
 800210c:	d01f      	beq.n	800214e <CC1120_ReadWriteBurstSingle+0x5a>
	{
		if (addr & RADIO_BURST_ACCESS)
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	d012      	beq.n	800213e <CC1120_ReadWriteBurstSingle+0x4a>
		{
			for (i = 0; i < len; i++)
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e00a      	b.n	8002134 <CC1120_ReadWriteBurstSingle+0x40>
			{
				*pData++ = CC1120_SpiRead(0); /* Possible to combining read and write as one access type */
 800211e:	683c      	ldr	r4, [r7, #0]
 8002120:	1c63      	adds	r3, r4, #1
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	2000      	movs	r0, #0
 8002126:	f7ff ff79 	bl	800201c <CC1120_SpiRead>
 800212a:	4603      	mov	r3, r0
 800212c:	7023      	strb	r3, [r4, #0]
			for (i = 0; i < len; i++)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	3301      	adds	r3, #1
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	797b      	ldrb	r3, [r7, #5]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d3f0      	bcc.n	800211e <CC1120_ReadWriteBurstSingle+0x2a>
		else
		{
			CC1120_SpiWrite(*pData);
		}
	}
	return;
 800213c:	e024      	b.n	8002188 <CC1120_ReadWriteBurstSingle+0x94>
			*pData = CC1120_SpiRead(0);
 800213e:	2000      	movs	r0, #0
 8002140:	f7ff ff6c 	bl	800201c <CC1120_SpiRead>
 8002144:	4603      	mov	r3, r0
 8002146:	461a      	mov	r2, r3
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	701a      	strb	r2, [r3, #0]
	return;
 800214c:	e01c      	b.n	8002188 <CC1120_ReadWriteBurstSingle+0x94>
		if (addr & RADIO_BURST_ACCESS)
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002154:	2b00      	cmp	r3, #0
 8002156:	d011      	beq.n	800217c <CC1120_ReadWriteBurstSingle+0x88>
			for (i = 0; i < len; i++)
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	e009      	b.n	8002172 <CC1120_ReadWriteBurstSingle+0x7e>
				CC1120_SpiWrite(*pData++);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	603a      	str	r2, [r7, #0]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff76 	bl	8002058 <CC1120_SpiWrite>
			for (i = 0; i < len; i++)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3301      	adds	r3, #1
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	797b      	ldrb	r3, [r7, #5]
 8002174:	68fa      	ldr	r2, [r7, #12]
 8002176:	429a      	cmp	r2, r3
 8002178:	d3f1      	bcc.n	800215e <CC1120_ReadWriteBurstSingle+0x6a>
	return;
 800217a:	e005      	b.n	8002188 <CC1120_ReadWriteBurstSingle+0x94>
			CC1120_SpiWrite(*pData);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff ff69 	bl	8002058 <CC1120_SpiWrite>
	return;
 8002186:	bf00      	nop
}
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}

0800218e <CC1120_8BitRegAccess>:

uint8_t CC1120_8BitRegAccess(uint8_t accessType, uint8_t addrByte, uint8_t *pData, uint8_t len)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	603a      	str	r2, [r7, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	4603      	mov	r3, r0
 800219a:	71fb      	strb	r3, [r7, #7]
 800219c:	460b      	mov	r3, r1
 800219e:	71bb      	strb	r3, [r7, #6]
 80021a0:	4613      	mov	r3, r2
 80021a2:	717b      	strb	r3, [r7, #5]
	char readValue;

	/* Pull CS_N low and wait for SO to go low before communication starts */
	SPI1_NSS_LOW();
 80021a4:	2200      	movs	r2, #0
 80021a6:	2110      	movs	r1, #16
 80021a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ac:	f003 fe62 	bl	8005e74 <HAL_GPIO_WritePin>
	/* send register address byte */
	readValue = CC1120_SpiRead(accessType | addrByte);
 80021b0:	79fa      	ldrb	r2, [r7, #7]
 80021b2:	79bb      	ldrb	r3, [r7, #6]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff2f 	bl	800201c <CC1120_SpiRead>
 80021be:	4603      	mov	r3, r0
 80021c0:	73fb      	strb	r3, [r7, #15]
	CC1120_ReadWriteBurstSingle(accessType | addrByte, pData, len);
 80021c2:	79fa      	ldrb	r2, [r7, #7]
 80021c4:	79bb      	ldrb	r3, [r7, #6]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	797a      	ldrb	r2, [r7, #5]
 80021ce:	6839      	ldr	r1, [r7, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff8f 	bl	80020f4 <CC1120_ReadWriteBurstSingle>
	SPI1_NSS_HIGH();
 80021d6:	2201      	movs	r2, #1
 80021d8:	2110      	movs	r1, #16
 80021da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021de:	f003 fe49 	bl	8005e74 <HAL_GPIO_WritePin>
	/* return the status byte value */
	return (readValue);
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <CC1120_16BitRegAccess>:

uint8_t CC1120_16BitRegAccess(uint8_t accessType, uint8_t extAddr, uint8_t regAddr, uint8_t *pData, uint8_t len)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	4603      	mov	r3, r0
 80021f6:	71fb      	strb	r3, [r7, #7]
 80021f8:	460b      	mov	r3, r1
 80021fa:	71bb      	strb	r3, [r7, #6]
 80021fc:	4613      	mov	r3, r2
 80021fe:	717b      	strb	r3, [r7, #5]
	uint8_t readValue;

	SPI1_NSS_LOW();
 8002200:	2200      	movs	r2, #0
 8002202:	2110      	movs	r1, #16
 8002204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002208:	f003 fe34 	bl	8005e74 <HAL_GPIO_WritePin>
	/* send extended address byte with access type bits set */
	readValue = CC1120_SpiRead(accessType | extAddr);
 800220c:	79fa      	ldrb	r2, [r7, #7]
 800220e:	79bb      	ldrb	r3, [r7, #6]
 8002210:	4313      	orrs	r3, r2
 8002212:	b2db      	uxtb	r3, r3
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff01 	bl	800201c <CC1120_SpiRead>
 800221a:	4603      	mov	r3, r0
 800221c:	73fb      	strb	r3, [r7, #15]
	CC1120_SpiWrite(regAddr);
 800221e:	797b      	ldrb	r3, [r7, #5]
 8002220:	4618      	mov	r0, r3
 8002222:	f7ff ff19 	bl	8002058 <CC1120_SpiWrite>
	/* Communicate len number of bytes */
	CC1120_ReadWriteBurstSingle(accessType | extAddr, pData, len);
 8002226:	79fa      	ldrb	r2, [r7, #7]
 8002228:	79bb      	ldrb	r3, [r7, #6]
 800222a:	4313      	orrs	r3, r2
 800222c:	b2db      	uxtb	r3, r3
 800222e:	b29b      	uxth	r3, r3
 8002230:	7e3a      	ldrb	r2, [r7, #24]
 8002232:	6839      	ldr	r1, [r7, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff ff5d 	bl	80020f4 <CC1120_ReadWriteBurstSingle>
	SPI1_NSS_HIGH();
 800223a:	2201      	movs	r2, #1
 800223c:	2110      	movs	r1, #16
 800223e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002242:	f003 fe17 	bl	8005e74 <HAL_GPIO_WritePin>
	/* return the status byte value */
	return (readValue);
 8002246:	7bfb      	ldrb	r3, [r7, #15]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <CC1120_SpiWriteReg>:

uint8_t CC1120_SpiWriteReg(uint16_t addr, uint8_t *pData, uint8_t len)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af02      	add	r7, sp, #8
 8002256:	4603      	mov	r3, r0
 8002258:	6039      	str	r1, [r7, #0]
 800225a:	80fb      	strh	r3, [r7, #6]
 800225c:	4613      	mov	r3, r2
 800225e:	717b      	strb	r3, [r7, #5]
	uint8_t tempExt = (uint8_t) (addr >> 8);
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	0a1b      	lsrs	r3, r3, #8
 8002264:	b29b      	uxth	r3, r3
 8002266:	73bb      	strb	r3, [r7, #14]
	uint8_t tempAddr = (uint8_t) (addr & 0x00FF);
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	737b      	strb	r3, [r7, #13]
	uint8_t rc;

	/* Checking if this is a FIFO access - returns chip not ready */
	if ((CC112X_SINGLE_TXFIFO <= tempAddr) && (tempExt == 0))
 800226c:	7b7b      	ldrb	r3, [r7, #13]
 800226e:	2b3e      	cmp	r3, #62	; 0x3e
 8002270:	d904      	bls.n	800227c <CC1120_SpiWriteReg+0x2c>
 8002272:	7bbb      	ldrb	r3, [r7, #14]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <CC1120_SpiWriteReg+0x2c>
		return STATUS_CHIP_RDYn_BM;
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	e019      	b.n	80022b0 <CC1120_SpiWriteReg+0x60>

	/* Decide what register space is accessed */
	if (!tempExt)
 800227c:	7bbb      	ldrb	r3, [r7, #14]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d108      	bne.n	8002294 <CC1120_SpiWriteReg+0x44>
	{
		rc = CC1120_8BitRegAccess((RADIO_BURST_ACCESS | RADIO_WRITE_ACCESS), tempAddr, pData, len);
 8002282:	797b      	ldrb	r3, [r7, #5]
 8002284:	7b79      	ldrb	r1, [r7, #13]
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	2040      	movs	r0, #64	; 0x40
 800228a:	f7ff ff80 	bl	800218e <CC1120_8BitRegAccess>
 800228e:	4603      	mov	r3, r0
 8002290:	73fb      	strb	r3, [r7, #15]
 8002292:	e00c      	b.n	80022ae <CC1120_SpiWriteReg+0x5e>
	}
	else if (tempExt == 0x2F)
 8002294:	7bbb      	ldrb	r3, [r7, #14]
 8002296:	2b2f      	cmp	r3, #47	; 0x2f
 8002298:	d109      	bne.n	80022ae <CC1120_SpiWriteReg+0x5e>
	{
		rc = CC1120_16BitRegAccess((RADIO_BURST_ACCESS | RADIO_WRITE_ACCESS), tempExt, tempAddr, pData, len);
 800229a:	7b7a      	ldrb	r2, [r7, #13]
 800229c:	7bb9      	ldrb	r1, [r7, #14]
 800229e:	797b      	ldrb	r3, [r7, #5]
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	2040      	movs	r0, #64	; 0x40
 80022a6:	f7ff ffa1 	bl	80021ec <CC1120_16BitRegAccess>
 80022aa:	4603      	mov	r3, r0
 80022ac:	73fb      	strb	r3, [r7, #15]
	}
	return (rc);
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <CC1120_SpiReadReg>:

uint8_t CC1120_SpiReadReg(uint16_t addr, uint8_t *pData, uint8_t len)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af02      	add	r7, sp, #8
 80022be:	4603      	mov	r3, r0
 80022c0:	6039      	str	r1, [r7, #0]
 80022c2:	80fb      	strh	r3, [r7, #6]
 80022c4:	4613      	mov	r3, r2
 80022c6:	717b      	strb	r3, [r7, #5]
	uint8_t tempExt = (uint8_t) (addr >> 8);
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	73bb      	strb	r3, [r7, #14]
	uint8_t tempAddr = (uint8_t) (addr & 0x00FF);
 80022d0:	88fb      	ldrh	r3, [r7, #6]
 80022d2:	737b      	strb	r3, [r7, #13]
	uint8_t rc;

	/* Checking if this is a FIFO access -> returns chip not ready  */
	if ((CC112X_SINGLE_TXFIFO <= tempAddr) && (tempExt == 0))
 80022d4:	7b7b      	ldrb	r3, [r7, #13]
 80022d6:	2b3e      	cmp	r3, #62	; 0x3e
 80022d8:	d904      	bls.n	80022e4 <CC1120_SpiReadReg+0x2c>
 80022da:	7bbb      	ldrb	r3, [r7, #14]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d101      	bne.n	80022e4 <CC1120_SpiReadReg+0x2c>
		return STATUS_CHIP_RDYn_BM;
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	e019      	b.n	8002318 <CC1120_SpiReadReg+0x60>

	/* Decide what register space is accessed */
	if (!tempExt)
 80022e4:	7bbb      	ldrb	r3, [r7, #14]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d108      	bne.n	80022fc <CC1120_SpiReadReg+0x44>
	{
		rc = CC1120_8BitRegAccess((RADIO_BURST_ACCESS | RADIO_READ_ACCESS), tempAddr, pData, len);
 80022ea:	797b      	ldrb	r3, [r7, #5]
 80022ec:	7b79      	ldrb	r1, [r7, #13]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	20c0      	movs	r0, #192	; 0xc0
 80022f2:	f7ff ff4c 	bl	800218e <CC1120_8BitRegAccess>
 80022f6:	4603      	mov	r3, r0
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	e00c      	b.n	8002316 <CC1120_SpiReadReg+0x5e>
	}
	else if (tempExt == 0x2F)
 80022fc:	7bbb      	ldrb	r3, [r7, #14]
 80022fe:	2b2f      	cmp	r3, #47	; 0x2f
 8002300:	d109      	bne.n	8002316 <CC1120_SpiReadReg+0x5e>
	{
		rc = CC1120_16BitRegAccess((RADIO_BURST_ACCESS | RADIO_READ_ACCESS), tempExt, tempAddr, pData, len);
 8002302:	7b7a      	ldrb	r2, [r7, #13]
 8002304:	7bb9      	ldrb	r1, [r7, #14]
 8002306:	797b      	ldrb	r3, [r7, #5]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	20c0      	movs	r0, #192	; 0xc0
 800230e:	f7ff ff6d 	bl	80021ec <CC1120_16BitRegAccess>
 8002312:	4603      	mov	r3, r0
 8002314:	73fb      	strb	r3, [r7, #15]
	}
	return (rc);
 8002316:	7bfb      	ldrb	r3, [r7, #15]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3710      	adds	r7, #16
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <CC1120_SpiWriteTxFifo>:

uint8_t CC1120_SpiWriteTxFifo(uint8_t *pData, uint8_t len)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	70fb      	strb	r3, [r7, #3]
	uint8_t rc;
	rc = CC1120_8BitRegAccess(0x00, CC112X_BURST_TXFIFO, pData, len);
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	217f      	movs	r1, #127	; 0x7f
 8002332:	2000      	movs	r0, #0
 8002334:	f7ff ff2b 	bl	800218e <CC1120_8BitRegAccess>
 8002338:	4603      	mov	r3, r0
 800233a:	73fb      	strb	r3, [r7, #15]
	return (rc);
 800233c:	7bfb      	ldrb	r3, [r7, #15]
}
 800233e:	4618      	mov	r0, r3
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}

08002346 <CC1120_SpiReadRxFifo>:

uint8_t CC1120_SpiReadRxFifo(uint8_t * pData, uint8_t len)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	460b      	mov	r3, r1
 8002350:	70fb      	strb	r3, [r7, #3]
	uint8_t rc;
	rc = CC1120_8BitRegAccess(0x00, CC112X_BURST_RXFIFO, pData, len);
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	21ff      	movs	r1, #255	; 0xff
 8002358:	2000      	movs	r0, #0
 800235a:	f7ff ff18 	bl	800218e <CC1120_8BitRegAccess>
 800235e:	4603      	mov	r3, r0
 8002360:	73fb      	strb	r3, [r7, #15]
	return (rc);
 8002362:	7bfb      	ldrb	r3, [r7, #15]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <GetPartAndVersion>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GetPartAndVersion()
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0
	uint8_t readData;
	uint8_t buffertt[32] = {0x00,};
 8002372:	2300      	movs	r3, #0
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	f107 0308 	add.w	r3, r7, #8
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	60da      	str	r2, [r3, #12]
 8002384:	611a      	str	r2, [r3, #16]
 8002386:	615a      	str	r2, [r3, #20]
 8002388:	619a      	str	r2, [r3, #24]

	CC1120_SpiReadReg(CC112X_PARTNUMBER, &readData, 1);
 800238a:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800238e:	2201      	movs	r2, #1
 8002390:	4619      	mov	r1, r3
 8002392:	f642 708f 	movw	r0, #12175	; 0x2f8f
 8002396:	f7ff ff8f 	bl	80022b8 <CC1120_SpiReadReg>
	sprintf(buffertt, "PARTNUMBER %02x\r\n", readData);
 800239a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800239e:	461a      	mov	r2, r3
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	4917      	ldr	r1, [pc, #92]	; (8002400 <GetPartAndVersion+0x94>)
 80023a4:	4618      	mov	r0, r3
 80023a6:	f009 fc27 	bl	800bbf8 <siprintf>
	HAL_UART_Transmit(&huart1, buffertt, strlen(buffertt), 100);
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fd ff0f 	bl	80001d0 <strlen>
 80023b2:	4603      	mov	r3, r0
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	1d39      	adds	r1, r7, #4
 80023b8:	2364      	movs	r3, #100	; 0x64
 80023ba:	4812      	ldr	r0, [pc, #72]	; (8002404 <GetPartAndVersion+0x98>)
 80023bc:	f007 fc0b 	bl	8009bd6 <HAL_UART_Transmit>

	CC1120_SpiReadReg(CC112X_PARTVERSION, &readData, 1);
 80023c0:	f107 0327 	add.w	r3, r7, #39	; 0x27
 80023c4:	2201      	movs	r2, #1
 80023c6:	4619      	mov	r1, r3
 80023c8:	f642 7090 	movw	r0, #12176	; 0x2f90
 80023cc:	f7ff ff74 	bl	80022b8 <CC1120_SpiReadReg>
	sprintf(buffertt, "partversion %02x\r\n", readData);
 80023d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023d4:	461a      	mov	r2, r3
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	490b      	ldr	r1, [pc, #44]	; (8002408 <GetPartAndVersion+0x9c>)
 80023da:	4618      	mov	r0, r3
 80023dc:	f009 fc0c 	bl	800bbf8 <siprintf>
	HAL_UART_Transmit(&huart1, buffertt, strlen(buffertt), 100);
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fd fef4 	bl	80001d0 <strlen>
 80023e8:	4603      	mov	r3, r0
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	1d39      	adds	r1, r7, #4
 80023ee:	2364      	movs	r3, #100	; 0x64
 80023f0:	4804      	ldr	r0, [pc, #16]	; (8002404 <GetPartAndVersion+0x98>)
 80023f2:	f007 fbf0 	bl	8009bd6 <HAL_UART_Transmit>
	//printf("CC1120 part ver: 0x%02X\n", readData);
}
 80023f6:	bf00      	nop
 80023f8:	3728      	adds	r7, #40	; 0x28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	0800f7f0 	.word	0x0800f7f0
 8002404:	20000440 	.word	0x20000440
 8002408:	0800f804 	.word	0x0800f804

0800240c <registerConfig>:
* @return      none
*/
uint8_t readByte[50];
char temdata[100];
void registerConfig(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
    uint8_t writeByte;
	
	uint8_t temp_data;
//    uint8_t data[4] = {0x00,};
    // Reset radio
    CC1120_SpiCmdStrobe(CC112X_SRES);
 8002412:	2030      	movs	r0, #48	; 0x30
 8002414:	f7ff fe3c 	bl	8002090 <CC1120_SpiCmdStrobe>

    // Write registers to radio
    for(uint16_t i = 0; i < (sizeof  preferredSettings/sizeof(registerSetting_t)); i++) {
 8002418:	2300      	movs	r3, #0
 800241a:	80fb      	strh	r3, [r7, #6]
 800241c:	e014      	b.n	8002448 <registerConfig+0x3c>
      writeByte =  preferredSettings[i].data;
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <registerConfig+0xa8>)
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	789b      	ldrb	r3, [r3, #2]
 8002428:	70fb      	strb	r3, [r7, #3]
      CC1120_SpiWriteReg( preferredSettings[i].addr, &writeByte, 1);
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	4a21      	ldr	r2, [pc, #132]	; (80024b4 <registerConfig+0xa8>)
 800242e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8002432:	1cf9      	adds	r1, r7, #3
 8002434:	2201      	movs	r2, #1
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff0a 	bl	8002250 <CC1120_SpiWriteReg>
      // 2022 04 01
      HAL_Delay(1);
 800243c:	2001      	movs	r0, #1
 800243e:	f002 faf9 	bl	8004a34 <HAL_Delay>
    for(uint16_t i = 0; i < (sizeof  preferredSettings/sizeof(registerSetting_t)); i++) {
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	3301      	adds	r3, #1
 8002446:	80fb      	strh	r3, [r7, #6]
 8002448:	88fb      	ldrh	r3, [r7, #6]
 800244a:	2b2d      	cmp	r3, #45	; 0x2d
 800244c:	d9e7      	bls.n	800241e <registerConfig+0x12>
    }


	for(uint16_t i = 0; i < (sizeof  preferredSettings/sizeof(registerSetting_t)); i++) {
 800244e:	2300      	movs	r3, #0
 8002450:	80bb      	strh	r3, [r7, #4]
 8002452:	e010      	b.n	8002476 <registerConfig+0x6a>
      
	  CC1120_SpiReadReg( preferredSettings[i].addr,&readByte[i] ,1 );
 8002454:	88bb      	ldrh	r3, [r7, #4]
 8002456:	4a17      	ldr	r2, [pc, #92]	; (80024b4 <registerConfig+0xa8>)
 8002458:	f832 0023 	ldrh.w	r0, [r2, r3, lsl #2]
 800245c:	88bb      	ldrh	r3, [r7, #4]
 800245e:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <registerConfig+0xac>)
 8002460:	4413      	add	r3, r2
 8002462:	2201      	movs	r2, #1
 8002464:	4619      	mov	r1, r3
 8002466:	f7ff ff27 	bl	80022b8 <CC1120_SpiReadReg>
      HAL_Delay(1);
 800246a:	2001      	movs	r0, #1
 800246c:	f002 fae2 	bl	8004a34 <HAL_Delay>
	for(uint16_t i = 0; i < (sizeof  preferredSettings/sizeof(registerSetting_t)); i++) {
 8002470:	88bb      	ldrh	r3, [r7, #4]
 8002472:	3301      	adds	r3, #1
 8002474:	80bb      	strh	r3, [r7, #4]
 8002476:	88bb      	ldrh	r3, [r7, #4]
 8002478:	2b2d      	cmp	r3, #45	; 0x2d
 800247a:	d9eb      	bls.n	8002454 <registerConfig+0x48>
    }




	HAL_UART_Transmit(&huart1, (uint8_t*)"data\r\n", 6, 10);	
 800247c:	230a      	movs	r3, #10
 800247e:	2206      	movs	r2, #6
 8002480:	490e      	ldr	r1, [pc, #56]	; (80024bc <registerConfig+0xb0>)
 8002482:	480f      	ldr	r0, [pc, #60]	; (80024c0 <registerConfig+0xb4>)
 8002484:	f007 fba7 	bl	8009bd6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)readByte, 47, 10);
 8002488:	230a      	movs	r3, #10
 800248a:	222f      	movs	r2, #47	; 0x2f
 800248c:	490a      	ldr	r1, [pc, #40]	; (80024b8 <registerConfig+0xac>)
 800248e:	480c      	ldr	r0, [pc, #48]	; (80024c0 <registerConfig+0xb4>)
 8002490:	f007 fba1 	bl	8009bd6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 10);
 8002494:	230a      	movs	r3, #10
 8002496:	2202      	movs	r2, #2
 8002498:	490a      	ldr	r1, [pc, #40]	; (80024c4 <registerConfig+0xb8>)
 800249a:	4809      	ldr	r0, [pc, #36]	; (80024c0 <registerConfig+0xb4>)
 800249c:	f007 fb9b 	bl	8009bd6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"end\r\n", 5, 10);
 80024a0:	230a      	movs	r3, #10
 80024a2:	2205      	movs	r2, #5
 80024a4:	4908      	ldr	r1, [pc, #32]	; (80024c8 <registerConfig+0xbc>)
 80024a6:	4806      	ldr	r0, [pc, #24]	; (80024c0 <registerConfig+0xb4>)
 80024a8:	f007 fb95 	bl	8009bd6 <HAL_UART_Transmit>

	
   

// 여기 경운이
}
 80024ac:	bf00      	nop
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	0800f8c0 	.word	0x0800f8c0
 80024b8:	20000564 	.word	0x20000564
 80024bc:	0800f818 	.word	0x0800f818
 80024c0:	20000440 	.word	0x20000440
 80024c4:	0800f820 	.word	0x0800f820
 80024c8:	0800f824 	.word	0x0800f824
 80024cc:	00000000 	.word	0x00000000

080024d0 <CC1120_setFrequency>:



uint8_t CC1120_setFrequency(float centre) {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	ed87 0a01 	vstr	s0, [r7, #4]
  // From section 9.12 (lo_divider in Table 30):
  //   fcarrier = fxosc / lo_divider * 2^16 * FREQ

  uint32_t FREQ;
  uint8_t bandselect, lo_divider;
  float fxosc = 32.0;
 80024da:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
 80024de:	613b      	str	r3, [r7, #16]

  if (centre >= 820.0 && centre <= 960.0) {
 80024e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80024e4:	ed9f 7a76 	vldr	s14, [pc, #472]	; 80026c0 <CC1120_setFrequency+0x1f0>
 80024e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f0:	db0c      	blt.n	800250c <CC1120_setFrequency+0x3c>
 80024f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80024f6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80026c4 <CC1120_setFrequency+0x1f4>
 80024fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002502:	d803      	bhi.n	800250c <CC1120_setFrequency+0x3c>
    lo_divider = 4;
 8002504:	2304      	movs	r3, #4
 8002506:	75bb      	strb	r3, [r7, #22]
    bandselect = 0x02;//0b0010;
 8002508:	2302      	movs	r3, #2
 800250a:	75fb      	strb	r3, [r7, #23]
  }

  if (centre >= 410.0 && centre <= 480.0) {
 800250c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002510:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80026c8 <CC1120_setFrequency+0x1f8>
 8002514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800251c:	db0c      	blt.n	8002538 <CC1120_setFrequency+0x68>
 800251e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002522:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80026cc <CC1120_setFrequency+0x1fc>
 8002526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800252a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252e:	d803      	bhi.n	8002538 <CC1120_setFrequency+0x68>
    lo_divider = 8;
 8002530:	2308      	movs	r3, #8
 8002532:	75bb      	strb	r3, [r7, #22]
    bandselect = 0x04;//0b0100;
 8002534:	2304      	movs	r3, #4
 8002536:	75fb      	strb	r3, [r7, #23]
  }

  if (centre >= 273.3 && centre <= 320.0) {
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7fe f805 	bl	8000548 <__aeabi_f2d>
 800253e:	a35c      	add	r3, pc, #368	; (adr r3, 80026b0 <CC1120_setFrequency+0x1e0>)
 8002540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002544:	f7fe fade 	bl	8000b04 <__aeabi_dcmpge>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00c      	beq.n	8002568 <CC1120_setFrequency+0x98>
 800254e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002552:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80026d0 <CC1120_setFrequency+0x200>
 8002556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800255a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255e:	d803      	bhi.n	8002568 <CC1120_setFrequency+0x98>
    lo_divider = 12;
 8002560:	230c      	movs	r3, #12
 8002562:	75bb      	strb	r3, [r7, #22]
    bandselect = 0x06;//0b0110;
 8002564:	2306      	movs	r3, #6
 8002566:	75fb      	strb	r3, [r7, #23]
  }

  if (centre >= 205.0 && centre <= 240.0) {
 8002568:	edd7 7a01 	vldr	s15, [r7, #4]
 800256c:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80026d4 <CC1120_setFrequency+0x204>
 8002570:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002578:	db0c      	blt.n	8002594 <CC1120_setFrequency+0xc4>
 800257a:	edd7 7a01 	vldr	s15, [r7, #4]
 800257e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80026d8 <CC1120_setFrequency+0x208>
 8002582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258a:	d803      	bhi.n	8002594 <CC1120_setFrequency+0xc4>
    lo_divider = 16;
 800258c:	2310      	movs	r3, #16
 800258e:	75bb      	strb	r3, [r7, #22]
    bandselect = 0x08;//0b1000;
 8002590:	2308      	movs	r3, #8
 8002592:	75fb      	strb	r3, [r7, #23]
  }

  if (centre >= 164.0 && centre <= 192.0) {
 8002594:	edd7 7a01 	vldr	s15, [r7, #4]
 8002598:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80026dc <CC1120_setFrequency+0x20c>
 800259c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a4:	db0c      	blt.n	80025c0 <CC1120_setFrequency+0xf0>
 80025a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025aa:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80026e0 <CC1120_setFrequency+0x210>
 80025ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b6:	d803      	bhi.n	80025c0 <CC1120_setFrequency+0xf0>
    lo_divider = 20;
 80025b8:	2314      	movs	r3, #20
 80025ba:	75bb      	strb	r3, [r7, #22]
    bandselect = 0x0a;//0b1010;
 80025bc:	230a      	movs	r3, #10
 80025be:	75fb      	strb	r3, [r7, #23]
  }

  if (centre >= 136.7 && centre <= 160.0) {
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7fd ffc1 	bl	8000548 <__aeabi_f2d>
 80025c6:	a33c      	add	r3, pc, #240	; (adr r3, 80026b8 <CC1120_setFrequency+0x1e8>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f7fe fa9a 	bl	8000b04 <__aeabi_dcmpge>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00c      	beq.n	80025f0 <CC1120_setFrequency+0x120>
 80025d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80025da:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80026e4 <CC1120_setFrequency+0x214>
 80025de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e6:	d803      	bhi.n	80025f0 <CC1120_setFrequency+0x120>
    lo_divider = 24;
 80025e8:	2318      	movs	r3, #24
 80025ea:	75bb      	strb	r3, [r7, #22]
    bandselect = 0x0b;//0b1011;
 80025ec:	230b      	movs	r3, #11
 80025ee:	75fb      	strb	r3, [r7, #23]
  }

  FREQ = (uint32_t)(centre * 65536 * lo_divider / fxosc);
 80025f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80025f4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80026e8 <CC1120_setFrequency+0x218>
 80025f8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025fc:	7dbb      	ldrb	r3, [r7, #22]
 80025fe:	ee07 3a90 	vmov	s15, r3
 8002602:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002606:	ee67 6a27 	vmul.f32	s13, s14, s15
 800260a:	ed97 7a04 	vldr	s14, [r7, #16]
 800260e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002616:	ee17 3a90 	vmov	r3, s15
 800261a:	60fb      	str	r3, [r7, #12]

  // Some trivial checks
  if (FREQ & 0xff000000)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <CC1120_setFrequency+0x15a>
    return 0;
 8002626:	2300      	movs	r3, #0
 8002628:	e03c      	b.n	80026a4 <CC1120_setFrequency+0x1d4>

  uint8_t freq2, freq1,freq0;

  freq2 = (FREQ >> 16) & 0xff;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	0c1b      	lsrs	r3, r3, #16
 800262e:	b2db      	uxtb	r3, r3
 8002630:	72fb      	strb	r3, [r7, #11]
  freq1 = (FREQ >> 8) & 0xff;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	0a1b      	lsrs	r3, r3, #8
 8002636:	b2db      	uxtb	r3, r3
 8002638:	72bb      	strb	r3, [r7, #10]
  freq0 = FREQ & 0xff;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	727b      	strb	r3, [r7, #9]
  CC1120_SpiWriteReg(CC112X_FREQ2, &freq2, 1);
 8002640:	f107 030b 	add.w	r3, r7, #11
 8002644:	2201      	movs	r2, #1
 8002646:	4619      	mov	r1, r3
 8002648:	f642 700c 	movw	r0, #12044	; 0x2f0c
 800264c:	f7ff fe00 	bl	8002250 <CC1120_SpiWriteReg>
  CC1120_SpiWriteReg(CC112X_FREQ1, &freq1, 1);
 8002650:	f107 030a 	add.w	r3, r7, #10
 8002654:	2201      	movs	r2, #1
 8002656:	4619      	mov	r1, r3
 8002658:	f642 700d 	movw	r0, #12045	; 0x2f0d
 800265c:	f7ff fdf8 	bl	8002250 <CC1120_SpiWriteReg>
  CC1120_SpiWriteReg(CC112X_FREQ0, &freq0, 1);
 8002660:	f107 0309 	add.w	r3, r7, #9
 8002664:	2201      	movs	r2, #1
 8002666:	4619      	mov	r1, r3
 8002668:	f642 700e 	movw	r0, #12046	; 0x2f0e
 800266c:	f7ff fdf0 	bl	8002250 <CC1120_SpiWriteReg>

//  spiWriteRegister(RH_CC1120_REG_2F0C_FREQ2, (FREQ >> 16) & 0xff);
//  spiWriteRegister(RH_CC1120_REG_2F0D_FREQ1, (FREQ >> 8) & 0xff);
//  spiWriteRegister(RH_CC1120_REG_2F0E_FREQ0, FREQ & 0xff);
  uint8_t fs_cfg;
  CC1120_SpiReadReg(CC112X_FS_CFG, &fs_cfg, 1);
 8002670:	f107 0308 	add.w	r3, r7, #8
 8002674:	2201      	movs	r2, #1
 8002676:	4619      	mov	r1, r3
 8002678:	2021      	movs	r0, #33	; 0x21
 800267a:	f7ff fe1d 	bl	80022b8 <CC1120_SpiReadReg>
  fs_cfg = (fs_cfg & ~0x0F/*~0b1111*/) | bandselect;
 800267e:	7a3b      	ldrb	r3, [r7, #8]
 8002680:	b25b      	sxtb	r3, r3
 8002682:	f023 030f 	bic.w	r3, r3, #15
 8002686:	b25a      	sxtb	r2, r3
 8002688:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800268c:	4313      	orrs	r3, r2
 800268e:	b25b      	sxtb	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	723b      	strb	r3, [r7, #8]
  CC1120_SpiWriteReg(CC112X_FS_CFG, &fs_cfg, 1);
 8002694:	f107 0308 	add.w	r3, r7, #8
 8002698:	2201      	movs	r2, #1
 800269a:	4619      	mov	r1, r3
 800269c:	2021      	movs	r0, #33	; 0x21
 800269e:	f7ff fdd7 	bl	8002250 <CC1120_SpiWriteReg>
//  fs_cfg = (fs_cfg & ~0x0F/*~0b1111*/) | bandselect;
//  CC1120_SpiWriteReg(CC112X_FS_CFG, fs_cfg);

  // Radio is configured to calibrate automatically whenever it enters RX or
  // TX mode so no need to check for PLL lock here
  return 1;
 80026a2:	2301      	movs	r3, #1
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	f3af 8000 	nop.w
 80026b0:	cccccccd 	.word	0xcccccccd
 80026b4:	407114cc 	.word	0x407114cc
 80026b8:	66666666 	.word	0x66666666
 80026bc:	40611666 	.word	0x40611666
 80026c0:	444d0000 	.word	0x444d0000
 80026c4:	44700000 	.word	0x44700000
 80026c8:	43cd0000 	.word	0x43cd0000
 80026cc:	43f00000 	.word	0x43f00000
 80026d0:	43a00000 	.word	0x43a00000
 80026d4:	434d0000 	.word	0x434d0000
 80026d8:	43700000 	.word	0x43700000
 80026dc:	43240000 	.word	0x43240000
 80026e0:	43400000 	.word	0x43400000
 80026e4:	43200000 	.word	0x43200000
 80026e8:	47800000 	.word	0x47800000

080026ec <manualCalibration>:
#define FS_VCO2_INDEX 0
#define FS_VCO4_INDEX 1
#define FS_CHP_INDEX 2

void manualCalibration()
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
	uint8_t calResults_for_vcdac_start_mid[3];
	uint8_t marcstate;
	uint8_t writeByte;

	// 1) Set VCO cap-array to 0 (FS_VCO2 = 0x00)
	writeByte = 0x00;
 80026f2:	2300      	movs	r3, #0
 80026f4:	71bb      	strb	r3, [r7, #6]
	CC1120_SpiWriteReg(CC112X_FS_VCO2, &writeByte, 1);
 80026f6:	1dbb      	adds	r3, r7, #6
 80026f8:	2201      	movs	r2, #1
 80026fa:	4619      	mov	r1, r3
 80026fc:	f642 7025 	movw	r0, #12069	; 0x2f25
 8002700:	f7ff fda6 	bl	8002250 <CC1120_SpiWriteReg>

	// 2) Start with high VCDAC (original VCDAC_START + 2):
	CC1120_SpiReadReg(CC112X_FS_CAL2, &original_fs_cal2, 1);
 8002704:	f107 030f 	add.w	r3, r7, #15
 8002708:	2201      	movs	r2, #1
 800270a:	4619      	mov	r1, r3
 800270c:	f642 7015 	movw	r0, #12053	; 0x2f15
 8002710:	f7ff fdd2 	bl	80022b8 <CC1120_SpiReadReg>
	writeByte = original_fs_cal2 + VCDAC_START_OFFSET;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	3302      	adds	r3, #2
 8002718:	b2db      	uxtb	r3, r3
 800271a:	71bb      	strb	r3, [r7, #6]
	CC1120_SpiWriteReg(CC112X_FS_CAL2, &writeByte, 1);
 800271c:	1dbb      	adds	r3, r7, #6
 800271e:	2201      	movs	r2, #1
 8002720:	4619      	mov	r1, r3
 8002722:	f642 7015 	movw	r0, #12053	; 0x2f15
 8002726:	f7ff fd93 	bl	8002250 <CC1120_SpiWriteReg>

	// 3) Calibrate and wait for calibration to be done
	//   (radio back in IDLE state)
	CC1120_SpiCmdStrobe(CC112X_SCAL);
 800272a:	2033      	movs	r0, #51	; 0x33
 800272c:	f7ff fcb0 	bl	8002090 <CC1120_SpiCmdStrobe>

	do
	{
		CC1120_SpiReadReg(CC112X_MARCSTATE, &marcstate, 1);
 8002730:	1dfb      	adds	r3, r7, #7
 8002732:	2201      	movs	r2, #1
 8002734:	4619      	mov	r1, r3
 8002736:	f642 7073 	movw	r0, #12147	; 0x2f73
 800273a:	f7ff fdbd 	bl	80022b8 <CC1120_SpiReadReg>
	} while (marcstate != 0x41);
 800273e:	79fb      	ldrb	r3, [r7, #7]
 8002740:	2b41      	cmp	r3, #65	; 0x41
 8002742:	d1f5      	bne.n	8002730 <manualCalibration+0x44>

	// 4) Read FS_VCO2, FS_VCO4 and FS_CHP register obtained with
	//    high VCDAC_START value
	CC1120_SpiReadReg(CC112X_FS_VCO2, &calResults_for_vcdac_start_high[FS_VCO2_INDEX], 1);
 8002744:	f107 030c 	add.w	r3, r7, #12
 8002748:	2201      	movs	r2, #1
 800274a:	4619      	mov	r1, r3
 800274c:	f642 7025 	movw	r0, #12069	; 0x2f25
 8002750:	f7ff fdb2 	bl	80022b8 <CC1120_SpiReadReg>
	CC1120_SpiReadReg(CC112X_FS_VCO4, &calResults_for_vcdac_start_high[FS_VCO4_INDEX], 1);
 8002754:	f107 030c 	add.w	r3, r7, #12
 8002758:	3301      	adds	r3, #1
 800275a:	2201      	movs	r2, #1
 800275c:	4619      	mov	r1, r3
 800275e:	f642 7023 	movw	r0, #12067	; 0x2f23
 8002762:	f7ff fda9 	bl	80022b8 <CC1120_SpiReadReg>
	CC1120_SpiReadReg(CC112X_FS_CHP, &calResults_for_vcdac_start_high[FS_CHP_INDEX], 1);
 8002766:	f107 030c 	add.w	r3, r7, #12
 800276a:	3302      	adds	r3, #2
 800276c:	2201      	movs	r2, #1
 800276e:	4619      	mov	r1, r3
 8002770:	f642 7018 	movw	r0, #12056	; 0x2f18
 8002774:	f7ff fda0 	bl	80022b8 <CC1120_SpiReadReg>

	// 5) Set VCO cap-array to 0 (FS_VCO2 = 0x00)
	writeByte = 0x00;
 8002778:	2300      	movs	r3, #0
 800277a:	71bb      	strb	r3, [r7, #6]
	CC1120_SpiWriteReg(CC112X_FS_VCO2, &writeByte, 1);
 800277c:	1dbb      	adds	r3, r7, #6
 800277e:	2201      	movs	r2, #1
 8002780:	4619      	mov	r1, r3
 8002782:	f642 7025 	movw	r0, #12069	; 0x2f25
 8002786:	f7ff fd63 	bl	8002250 <CC1120_SpiWriteReg>

	// 6) Continue with mid VCDAC (original VCDAC_START):
	writeByte = original_fs_cal2;
 800278a:	7bfb      	ldrb	r3, [r7, #15]
 800278c:	71bb      	strb	r3, [r7, #6]
	CC1120_SpiWriteReg(CC112X_FS_CAL2, &writeByte, 1);
 800278e:	1dbb      	adds	r3, r7, #6
 8002790:	2201      	movs	r2, #1
 8002792:	4619      	mov	r1, r3
 8002794:	f642 7015 	movw	r0, #12053	; 0x2f15
 8002798:	f7ff fd5a 	bl	8002250 <CC1120_SpiWriteReg>

	// 7) Calibrate and wait for calibration to be done
	//   (radio back in IDLE state)
	CC1120_SpiCmdStrobe(CC112X_SCAL);
 800279c:	2033      	movs	r0, #51	; 0x33
 800279e:	f7ff fc77 	bl	8002090 <CC1120_SpiCmdStrobe>

	do
	{
		CC1120_SpiReadReg(CC112X_MARCSTATE, &marcstate, 1);
 80027a2:	1dfb      	adds	r3, r7, #7
 80027a4:	2201      	movs	r2, #1
 80027a6:	4619      	mov	r1, r3
 80027a8:	f642 7073 	movw	r0, #12147	; 0x2f73
 80027ac:	f7ff fd84 	bl	80022b8 <CC1120_SpiReadReg>
	} while (marcstate != 0x41);
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	2b41      	cmp	r3, #65	; 0x41
 80027b4:	d1f5      	bne.n	80027a2 <manualCalibration+0xb6>

	// 8) Read FS_VCO2, FS_VCO4 and FS_CHP register obtained
	//    with mid VCDAC_START value
	CC1120_SpiReadReg(CC112X_FS_VCO2, &calResults_for_vcdac_start_mid[FS_VCO2_INDEX], 1);
 80027b6:	f107 0308 	add.w	r3, r7, #8
 80027ba:	2201      	movs	r2, #1
 80027bc:	4619      	mov	r1, r3
 80027be:	f642 7025 	movw	r0, #12069	; 0x2f25
 80027c2:	f7ff fd79 	bl	80022b8 <CC1120_SpiReadReg>
	CC1120_SpiReadReg(CC112X_FS_VCO4, &calResults_for_vcdac_start_mid[FS_VCO4_INDEX], 1);
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	3301      	adds	r3, #1
 80027cc:	2201      	movs	r2, #1
 80027ce:	4619      	mov	r1, r3
 80027d0:	f642 7023 	movw	r0, #12067	; 0x2f23
 80027d4:	f7ff fd70 	bl	80022b8 <CC1120_SpiReadReg>
	CC1120_SpiReadReg(CC112X_FS_CHP, &calResults_for_vcdac_start_mid[FS_CHP_INDEX], 1);
 80027d8:	f107 0308 	add.w	r3, r7, #8
 80027dc:	3302      	adds	r3, #2
 80027de:	2201      	movs	r2, #1
 80027e0:	4619      	mov	r1, r3
 80027e2:	f642 7018 	movw	r0, #12056	; 0x2f18
 80027e6:	f7ff fd67 	bl	80022b8 <CC1120_SpiReadReg>

	// 9) Write back highest FS_VCO2 and corresponding FS_VCO
	//    and FS_CHP result
	if (calResults_for_vcdac_start_high[FS_VCO2_INDEX] > calResults_for_vcdac_start_mid[FS_VCO2_INDEX])
 80027ea:	7b3a      	ldrb	r2, [r7, #12]
 80027ec:	7a3b      	ldrb	r3, [r7, #8]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d91b      	bls.n	800282a <manualCalibration+0x13e>
	{
		writeByte = calResults_for_vcdac_start_high[FS_VCO2_INDEX];
 80027f2:	7b3b      	ldrb	r3, [r7, #12]
 80027f4:	71bb      	strb	r3, [r7, #6]
		CC1120_SpiWriteReg(CC112X_FS_VCO2, &writeByte, 1);
 80027f6:	1dbb      	adds	r3, r7, #6
 80027f8:	2201      	movs	r2, #1
 80027fa:	4619      	mov	r1, r3
 80027fc:	f642 7025 	movw	r0, #12069	; 0x2f25
 8002800:	f7ff fd26 	bl	8002250 <CC1120_SpiWriteReg>
		writeByte = calResults_for_vcdac_start_high[FS_VCO4_INDEX];
 8002804:	7b7b      	ldrb	r3, [r7, #13]
 8002806:	71bb      	strb	r3, [r7, #6]
		CC1120_SpiWriteReg(CC112X_FS_VCO4, &writeByte, 1);
 8002808:	1dbb      	adds	r3, r7, #6
 800280a:	2201      	movs	r2, #1
 800280c:	4619      	mov	r1, r3
 800280e:	f642 7023 	movw	r0, #12067	; 0x2f23
 8002812:	f7ff fd1d 	bl	8002250 <CC1120_SpiWriteReg>
		writeByte = calResults_for_vcdac_start_high[FS_CHP_INDEX];
 8002816:	7bbb      	ldrb	r3, [r7, #14]
 8002818:	71bb      	strb	r3, [r7, #6]
		CC1120_SpiWriteReg(CC112X_FS_CHP, &writeByte, 1);
 800281a:	1dbb      	adds	r3, r7, #6
 800281c:	2201      	movs	r2, #1
 800281e:	4619      	mov	r1, r3
 8002820:	f642 7018 	movw	r0, #12056	; 0x2f18
 8002824:	f7ff fd14 	bl	8002250 <CC1120_SpiWriteReg>
		writeByte = calResults_for_vcdac_start_mid[FS_VCO4_INDEX];
		CC1120_SpiWriteReg(CC112X_FS_VCO4, &writeByte, 1);
		writeByte = calResults_for_vcdac_start_mid[FS_CHP_INDEX];
		CC1120_SpiWriteReg(CC112X_FS_CHP, &writeByte, 1);
	}
}
 8002828:	e01a      	b.n	8002860 <manualCalibration+0x174>
		writeByte = calResults_for_vcdac_start_mid[FS_VCO2_INDEX];
 800282a:	7a3b      	ldrb	r3, [r7, #8]
 800282c:	71bb      	strb	r3, [r7, #6]
		CC1120_SpiWriteReg(CC112X_FS_VCO2, &writeByte, 1);
 800282e:	1dbb      	adds	r3, r7, #6
 8002830:	2201      	movs	r2, #1
 8002832:	4619      	mov	r1, r3
 8002834:	f642 7025 	movw	r0, #12069	; 0x2f25
 8002838:	f7ff fd0a 	bl	8002250 <CC1120_SpiWriteReg>
		writeByte = calResults_for_vcdac_start_mid[FS_VCO4_INDEX];
 800283c:	7a7b      	ldrb	r3, [r7, #9]
 800283e:	71bb      	strb	r3, [r7, #6]
		CC1120_SpiWriteReg(CC112X_FS_VCO4, &writeByte, 1);
 8002840:	1dbb      	adds	r3, r7, #6
 8002842:	2201      	movs	r2, #1
 8002844:	4619      	mov	r1, r3
 8002846:	f642 7023 	movw	r0, #12067	; 0x2f23
 800284a:	f7ff fd01 	bl	8002250 <CC1120_SpiWriteReg>
		writeByte = calResults_for_vcdac_start_mid[FS_CHP_INDEX];
 800284e:	7abb      	ldrb	r3, [r7, #10]
 8002850:	71bb      	strb	r3, [r7, #6]
		CC1120_SpiWriteReg(CC112X_FS_CHP, &writeByte, 1);
 8002852:	1dbb      	adds	r3, r7, #6
 8002854:	2201      	movs	r2, #1
 8002856:	4619      	mov	r1, r3
 8002858:	f642 7018 	movw	r0, #12056	; 0x2f18
 800285c:	f7ff fcf8 	bl	8002250 <CC1120_SpiWriteReg>
}
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <perCC112xSetOutputPower>:
* output parameters
*
* @return      void
*/
void perCC112xSetOutputPower(uint8_t index)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	71fb      	strb	r3, [r7, #7]
  /* Oring in the PA power ramp value */
  level |= paPowerRamp[index];
  /* Updating PA_CFG2 register with its' new value */
  CC1120_SpiWriteReg(CC112X_PA_CFG2,&level,1);
#endif
  level = paPowerRamp[index];
 8002872:	79fb      	ldrb	r3, [r7, #7]
 8002874:	4a06      	ldr	r2, [pc, #24]	; (8002890 <perCC112xSetOutputPower+0x28>)
 8002876:	5cd3      	ldrb	r3, [r2, r3]
 8002878:	73fb      	strb	r3, [r7, #15]
  CC1120_SpiWriteReg(CC112X_PA_CFG2,&level,1);
 800287a:	f107 030f 	add.w	r3, r7, #15
 800287e:	2201      	movs	r2, #1
 8002880:	4619      	mov	r1, r3
 8002882:	202b      	movs	r0, #43	; 0x2b
 8002884:	f7ff fce4 	bl	8002250 <CC1120_SpiWriteReg>

  return;
 8002888:	bf00      	nop
}
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	0800f978 	.word	0x0800f978

08002894 <cc1120_cmd_idle>:


void cc1120_cmd_idle(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
  uint8_t state,sate2;
  uint8_t retryCnt;
  //sate2 = CC1120_SpiCmdStrobe(CC112X_SNOP);
  //printf("sts =%02x\r\n",sate2);
  //state = sate2 & CC112X_STATUS_MASK;
  state = CC1120_SpiCmdStrobe(CC112X_SNOP) & CC112X_STATUS_MASK;
 800289a:	203d      	movs	r0, #61	; 0x3d
 800289c:	f7ff fbf8 	bl	8002090 <CC1120_SpiCmdStrobe>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028a6:	71fb      	strb	r3, [r7, #7]

  switch (state)
 80028a8:	79fb      	ldrb	r3, [r7, #7]
 80028aa:	2b60      	cmp	r3, #96	; 0x60
 80028ac:	d002      	beq.n	80028b4 <cc1120_cmd_idle+0x20>
 80028ae:	2b70      	cmp	r3, #112	; 0x70
 80028b0:	d004      	beq.n	80028bc <cc1120_cmd_idle+0x28>
 80028b2:	e007      	b.n	80028c4 <cc1120_cmd_idle+0x30>
  {
    case CC112X_STATE_RXFIFO_ERROR:
    	cc1120_cmd_flush_rx();
 80028b4:	203a      	movs	r0, #58	; 0x3a
 80028b6:	f7ff fbeb 	bl	8002090 <CC1120_SpiCmdStrobe>
      break;
 80028ba:	e006      	b.n	80028ca <cc1120_cmd_idle+0x36>
    case CC112X_STATE_TXFIFO_ERROR:
    	cc1120_cmd_flush_tx();
 80028bc:	203b      	movs	r0, #59	; 0x3b
 80028be:	f7ff fbe7 	bl	8002090 <CC1120_SpiCmdStrobe>
      break;
 80028c2:	e002      	b.n	80028ca <cc1120_cmd_idle+0x36>
    default:
    	CC1120_SpiCmdStrobe(CC112X_SIDLE);
 80028c4:	2036      	movs	r0, #54	; 0x36
 80028c6:	f7ff fbe3 	bl	8002090 <CC1120_SpiCmdStrobe>
  }

  while ((CC1120_SpiCmdStrobe(CC112X_SNOP) & CC112X_STATUS_MASK) != CC112X_STATE_IDLE) {
 80028ca:	e002      	b.n	80028d2 <cc1120_cmd_idle+0x3e>
	  CC1120_SpiCmdStrobe(CC112X_SIDLE);
 80028cc:	2036      	movs	r0, #54	; 0x36
 80028ce:	f7ff fbdf 	bl	8002090 <CC1120_SpiCmdStrobe>
  while ((CC1120_SpiCmdStrobe(CC112X_SNOP) & CC112X_STATUS_MASK) != CC112X_STATE_IDLE) {
 80028d2:	203d      	movs	r0, #61	; 0x3d
 80028d4:	f7ff fbdc 	bl	8002090 <CC1120_SpiCmdStrobe>
 80028d8:	4603      	mov	r3, r0
 80028da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f4      	bne.n	80028cc <cc1120_cmd_idle+0x38>
  }
}
 80028e2:	bf00      	nop
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <cc1120_cmd_calibrate>:
#define WAIT_STATUS(status) \
		__NOP();__NOP();		\
    while ( (cc1120_cmd_nop() & CC112X_STATUS_MASK) != status) ;

void cc1120_cmd_calibrate(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
	cc1120_cmd_idle();
 80028f0:	f7ff ffd0 	bl	8002894 <cc1120_cmd_idle>
	CC1120_SpiCmdStrobe(CC112X_SCAL);
 80028f4:	2033      	movs	r0, #51	; 0x33
 80028f6:	f7ff fbcb 	bl	8002090 <CC1120_SpiCmdStrobe>
//	{
//		old_temp = new_temp;
//		HAL_UART_Transmit(&huart1, (uint8_t*)"t7\r\n", 5, 10);
//	}
	
  	WAIT_STATUS(CC112X_STATE_IDLE);
 80028fa:	bf00      	nop
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	203d      	movs	r0, #61	; 0x3d
 8002902:	f7ff fbc5 	bl	8002090 <CC1120_SpiCmdStrobe>
 8002906:	4603      	mov	r3, r0
 8002908:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f7      	bne.n	8002900 <cc1120_cmd_calibrate+0x14>
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_GPIO_EXTI_Callback>:

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	80fb      	strh	r3, [r7, #6]
	if ( GPIO_Pin == GPIO0_PIN)
 8002922:	88fb      	ldrh	r3, [r7, #6]
 8002924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002928:	d106      	bne.n	8002938 <HAL_GPIO_EXTI_Callback+0x20>
	{
		if (gdo0_cb != 0x0)
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <HAL_GPIO_EXTI_Callback+0x70>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <HAL_GPIO_EXTI_Callback+0x20>
		{
			gdo0_cb();
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_GPIO_EXTI_Callback+0x70>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4798      	blx	r3
		}

	}
	if ( GPIO_Pin == GPIO2_PIN)
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800293e:	d106      	bne.n	800294e <HAL_GPIO_EXTI_Callback+0x36>
	{
		if (gdo2_cb != 0x0)
 8002940:	4b12      	ldr	r3, [pc, #72]	; (800298c <HAL_GPIO_EXTI_Callback+0x74>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <HAL_GPIO_EXTI_Callback+0x36>
		{
			gdo2_cb();
 8002948:	4b10      	ldr	r3, [pc, #64]	; (800298c <HAL_GPIO_EXTI_Callback+0x74>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4798      	blx	r3
		}
	}
	if( GPIO_Pin == GPIO_PIN_14)
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002954:	d114      	bne.n	8002980 <HAL_GPIO_EXTI_Callback+0x68>
	{
		if ( ultra_busy )
 8002956:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <HAL_GPIO_EXTI_Callback+0x78>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d010      	beq.n	8002980 <HAL_GPIO_EXTI_Callback+0x68>
    	{
			if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_14) )
 800295e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002962:	480c      	ldr	r0, [pc, #48]	; (8002994 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002964:	f003 fa6e 	bl	8005e44 <HAL_GPIO_ReadPin>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d103      	bne.n	8002976 <HAL_GPIO_EXTI_Callback+0x5e>
			{
				HAL_TIM_Base_Start(&htim15);
 800296e:	480a      	ldr	r0, [pc, #40]	; (8002998 <HAL_GPIO_EXTI_Callback+0x80>)
 8002970:	f005 fee8 	bl	8008744 <HAL_TIM_Base_Start>
			}
	
    	}
		 
	}
}
 8002974:	e004      	b.n	8002980 <HAL_GPIO_EXTI_Callback+0x68>
				ultraTimerStop();
 8002976:	f001 ff53 	bl	8004820 <ultraTimerStop>
				ultra_busy = 0;
 800297a:	4b05      	ldr	r3, [pc, #20]	; (8002990 <HAL_GPIO_EXTI_Callback+0x78>)
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000558 	.word	0x20000558
 800298c:	2000055c 	.word	0x2000055c
 8002990:	2000068a 	.word	0x2000068a
 8002994:	48000400 	.word	0x48000400
 8002998:	200003a8 	.word	0x200003a8

0800299c <cc1120_freq_set>:

extern config_data configs;

void cc1120_freq_set(uint8_t sensor_id)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
	switch (sensor_id)
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <cc1120_freq_set+0x16>
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d004      	beq.n	80029ba <cc1120_freq_set+0x1e>
 80029b0:	e007      	b.n	80029c2 <cc1120_freq_set+0x26>
	{
		case 0:
		{
			g_freq = 868;
 80029b2:	4b09      	ldr	r3, [pc, #36]	; (80029d8 <cc1120_freq_set+0x3c>)
 80029b4:	4a09      	ldr	r2, [pc, #36]	; (80029dc <cc1120_freq_set+0x40>)
 80029b6:	601a      	str	r2, [r3, #0]
		}
		break;
 80029b8:	e007      	b.n	80029ca <cc1120_freq_set+0x2e>
		case 1:
		{
			g_freq = 940;
 80029ba:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <cc1120_freq_set+0x3c>)
 80029bc:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <cc1120_freq_set+0x44>)
 80029be:	601a      	str	r2, [r3, #0]
		}
		break;
 80029c0:	e003      	b.n	80029ca <cc1120_freq_set+0x2e>
		default:
		{
			g_freq = 940;
 80029c2:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <cc1120_freq_set+0x3c>)
 80029c4:	4a06      	ldr	r2, [pc, #24]	; (80029e0 <cc1120_freq_set+0x44>)
 80029c6:	601a      	str	r2, [r3, #0]
		}
		break;
 80029c8:	bf00      	nop
	}
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	20000554 	.word	0x20000554
 80029dc:	44590000 	.word	0x44590000
 80029e0:	446b0000 	.word	0x446b0000

080029e4 <cc1120_init>:
#if PC_TEST_MODE
void cc1120_init(uint8_t channel)
#else
void cc1120_init()
#endif
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
	gdo0_cb = 0x0;
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <cc1120_init+0x40>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
	gdo2_cb = 0x0;
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <cc1120_init+0x44>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

	cc112x_hw_rst();
 80029f4:	f7ff fafa 	bl	8001fec <cc112x_hw_rst>

	GetPartAndVersion();
 80029f8:	f7ff fcb8 	bl	800236c <GetPartAndVersion>

	registerConfig();
 80029fc:	f7ff fd06 	bl	800240c <registerConfig>
	#if PC_TEST_MODE
	
	
	#else
	//CC1120_setFrequency(g_freq + ( (g_channel-1) * 0.5) );
	CC1120_setFrequency(940.000);
 8002a00:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002a2c <cc1120_init+0x48>
 8002a04:	f7ff fd64 	bl	80024d0 <CC1120_setFrequency>
	perCC112xSetOutputPower(18);
 8002a08:	2012      	movs	r0, #18
 8002a0a:	f7ff ff2d 	bl	8002868 <perCC112xSetOutputPower>
	//perCC112xSetOutputPower(txPowerTeb);
	#endif
	//cc112xConfigChek(23);
	manualCalibration();
 8002a0e:	f7ff fe6d 	bl	80026ec <manualCalibration>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8002a12:	2201      	movs	r2, #1
 8002a14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002a18:	4805      	ldr	r0, [pc, #20]	; (8002a30 <cc1120_init+0x4c>)
 8002a1a:	f003 fa2b 	bl	8005e74 <HAL_GPIO_WritePin>
    //     old_temp = new_temp;
    //     HAL_UART_Transmit(&huart1, (uint8_t*)"t2\r\n", 5, 10);
    // } 
    
	
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000558 	.word	0x20000558
 8002a28:	2000055c 	.word	0x2000055c
 8002a2c:	446b0000 	.word	0x446b0000
 8002a30:	48000800 	.word	0x48000800

08002a34 <power_init>:

*/


void power_init()
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);  // 5v volt enable
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a3e:	4807      	ldr	r0, [pc, #28]	; (8002a5c <power_init+0x28>)
 8002a40:	f003 fa18 	bl	8005e74 <HAL_GPIO_WritePin>
	__NOP();__NOP();__NOP();
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	bf00      	nop
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);  // 3v volt enable
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a50:	4803      	ldr	r0, [pc, #12]	; (8002a60 <power_init+0x2c>)
 8002a52:	f003 fa0f 	bl	8005e74 <HAL_GPIO_WritePin>
}
 8002a56:	bf00      	nop
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	48000800 	.word	0x48000800
 8002a60:	48000400 	.word	0x48000400

08002a64 <read_sen_id>:

#define SENSOR_ID_MASK  0x000F
void read_sen_id()
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
	uint16_t sensorChercker = GPIOB->IDR & SENSOR_ID_MASK;
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <read_sen_id+0x2c>)
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	80fb      	strh	r3, [r7, #6]
	sen_id = (uint8_t)sensorChercker; 
 8002a76:	88fb      	ldrh	r3, [r7, #6]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <read_sen_id+0x30>)
 8002a7c:	701a      	strb	r2, [r3, #0]
	sen_id =1;
 8002a7e:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <read_sen_id+0x30>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	48000400 	.word	0x48000400
 8002a94:	20000596 	.word	0x20000596

08002a98 <ch2hex>:
};

const char chtable[] = {
	'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};
long ch2hex(char *hex, uint8_t size) {
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	70fb      	strb	r3, [r7, #3]
   long ret = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60fb      	str	r3, [r7, #12]

   while(size > 0)
 8002aa8:	e019      	b.n	8002ade <ch2hex+0x46>
   {
	   if(*hex < 48 || *hex > 102)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b2f      	cmp	r3, #47	; 0x2f
 8002ab0:	d903      	bls.n	8002aba <ch2hex+0x22>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b66      	cmp	r3, #102	; 0x66
 8002ab8:	d902      	bls.n	8002ac0 <ch2hex+0x28>
		   return -0x100;
 8002aba:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 8002abe:	e012      	b.n	8002ae6 <ch2hex+0x4e>

	   if(hextable[*hex - 48] == -1)
		   return -0x100;

	   ret = (ret << 4) | hextable[*hex - 48];
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	7812      	ldrb	r2, [r2, #0]
 8002ac8:	3a30      	subs	r2, #48	; 0x30
 8002aca:	490a      	ldr	r1, [pc, #40]	; (8002af4 <ch2hex+0x5c>)
 8002acc:	5c8a      	ldrb	r2, [r1, r2]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]

	   size--;
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	70fb      	strb	r3, [r7, #3]
	   hex++;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3301      	adds	r3, #1
 8002adc:	607b      	str	r3, [r7, #4]
   while(size > 0)
 8002ade:	78fb      	ldrb	r3, [r7, #3]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1e2      	bne.n	8002aaa <ch2hex+0x12>
   }
   return ret;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	0800f98c 	.word	0x0800f98c

08002af8 <hex2ch>:

void hex2ch(uint8_t hex, char *chBuff)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	6039      	str	r1, [r7, #0]
 8002b02:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < 2; i++)
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	e011      	b.n	8002b2e <hex2ch+0x36>
	{
		chBuff[i] = chtable[(hex >> (4 - i*4)) & 0x0F];
 8002b0a:	79fa      	ldrb	r2, [r7, #7]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f1c3 0301 	rsb	r3, r3, #1
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	fa42 f303 	asr.w	r3, r2, r3
 8002b18:	f003 020f 	and.w	r2, r3, #15
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6839      	ldr	r1, [r7, #0]
 8002b20:	440b      	add	r3, r1
 8002b22:	4907      	ldr	r1, [pc, #28]	; (8002b40 <hex2ch+0x48>)
 8002b24:	5c8a      	ldrb	r2, [r1, r2]
 8002b26:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 2; i++)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	ddea      	ble.n	8002b0a <hex2ch+0x12>
	}
	return;
 8002b34:	bf00      	nop
}
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	0800f9c4 	.word	0x0800f9c4

08002b44 <uartRingBuff_init>:
		{16, 8}
		
};

void uartRingBuff_init()
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
	ringbuf_init(&rxrb, rxdata, RX_BUFFERSIZE);
 8002b48:	2220      	movs	r2, #32
 8002b4a:	4903      	ldr	r1, [pc, #12]	; (8002b58 <uartRingBuff_init+0x14>)
 8002b4c:	4803      	ldr	r0, [pc, #12]	; (8002b5c <uartRingBuff_init+0x18>)
 8002b4e:	f000 fedd 	bl	800390c <ringbuf_init>
}
 8002b52:	bf00      	nop
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	200005ac 	.word	0x200005ac
 8002b5c:	2000059c 	.word	0x2000059c

08002b60 <recvUartPkt>:


int recvUartPkt()
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
	uint8_t c, i = 0, l = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	71fb      	strb	r3, [r7, #7]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	71bb      	strb	r3, [r7, #6]
	//uint32_t used;

	for(i = 0; i < RX_BUFFERSIZE; i++)
 8002b6e:	2300      	movs	r3, #0
 8002b70:	71fb      	strb	r3, [r7, #7]
 8002b72:	e006      	b.n	8002b82 <recvUartPkt+0x22>
		cmdBuffer[i] = 0;
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	4a1c      	ldr	r2, [pc, #112]	; (8002be8 <recvUartPkt+0x88>)
 8002b78:	2100      	movs	r1, #0
 8002b7a:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < RX_BUFFERSIZE; i++)
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	71fb      	strb	r3, [r7, #7]
 8002b82:	79fb      	ldrb	r3, [r7, #7]
 8002b84:	2b1f      	cmp	r3, #31
 8002b86:	d9f5      	bls.n	8002b74 <recvUartPkt+0x14>

	used = ringbuf_used(&rxrb);
 8002b88:	4818      	ldr	r0, [pc, #96]	; (8002bec <recvUartPkt+0x8c>)
 8002b8a:	f000 fe58 	bl	800383e <ringbuf_used>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <recvUartPkt+0x90>)
 8002b92:	6013      	str	r3, [r2, #0]

	for (i = 0; i < used; i++)
 8002b94:	2300      	movs	r3, #0
 8002b96:	71fb      	strb	r3, [r7, #7]
 8002b98:	e018      	b.n	8002bcc <recvUartPkt+0x6c>
	{
		c = ringbuf_readone(&rxrb);
 8002b9a:	4814      	ldr	r0, [pc, #80]	; (8002bec <recvUartPkt+0x8c>)
 8002b9c:	f000 fe7d 	bl	800389a <ringbuf_readone>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	717b      	strb	r3, [r7, #5]
		if(c == '\r' || c == '\n')
 8002ba4:	797b      	ldrb	r3, [r7, #5]
 8002ba6:	2b0d      	cmp	r3, #13
 8002ba8:	d002      	beq.n	8002bb0 <recvUartPkt+0x50>
 8002baa:	797b      	ldrb	r3, [r7, #5]
 8002bac:	2b0a      	cmp	r3, #10
 8002bae:	d106      	bne.n	8002bbe <recvUartPkt+0x5e>
		{
		  pktLen = i;
 8002bb0:	79fb      	ldrb	r3, [r7, #7]
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <recvUartPkt+0x94>)
 8002bb6:	801a      	strh	r2, [r3, #0]
		  return pktLen;
 8002bb8:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <recvUartPkt+0x94>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	e010      	b.n	8002be0 <recvUartPkt+0x80>
		}
		else
		  cmdBuffer[i] = c;
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	4909      	ldr	r1, [pc, #36]	; (8002be8 <recvUartPkt+0x88>)
 8002bc2:	797a      	ldrb	r2, [r7, #5]
 8002bc4:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < used; i++)
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	71fb      	strb	r3, [r7, #7]
 8002bcc:	79fa      	ldrb	r2, [r7, #7]
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <recvUartPkt+0x90>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d3e1      	bcc.n	8002b9a <recvUartPkt+0x3a>
	}
	pktLen = 0;
 8002bd6:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <recvUartPkt+0x94>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	801a      	strh	r2, [r3, #0]
	return -1;
 8002bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3708      	adds	r7, #8
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	200005cc 	.word	0x200005cc
 8002bec:	2000059c 	.word	0x2000059c
 8002bf0:	20000598 	.word	0x20000598
 8002bf4:	200005ec 	.word	0x200005ec

08002bf8 <ReadFlash2Buff>:


#define WORD_BYTE		4

uint8_t* ReadFlash2Buff(uint16_t idx ,uint8_t* data , uint8_t size, uint8_t Base_addr)
{
 8002bf8:	b590      	push	{r4, r7, lr}
 8002bfa:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	4604      	mov	r4, r0
 8002c02:	f607 0018 	addw	r0, r7, #2072	; 0x818
 8002c06:	f6a0 0018 	subw	r0, r0, #2072	; 0x818
 8002c0a:	6001      	str	r1, [r0, #0]
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002c14:	f6a3 0312 	subw	r3, r3, #2066	; 0x812
 8002c18:	4622      	mov	r2, r4
 8002c1a:	801a      	strh	r2, [r3, #0]
 8002c1c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002c20:	f6a3 0313 	subw	r3, r3, #2067	; 0x813
 8002c24:	4602      	mov	r2, r0
 8002c26:	701a      	strb	r2, [r3, #0]
 8002c28:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002c2c:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8002c30:	460a      	mov	r2, r1
 8002c32:	701a      	strb	r2, [r3, #0]
	uint32_t FlashReadData[512] = {0x0,};
 8002c34:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002c38:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c42:	461a      	mov	r2, r3
 8002c44:	2100      	movs	r1, #0
 8002c46:	f008 f89b 	bl	800ad80 <memset>
	if ( Base_addr == 0 )
 8002c4a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002c4e:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d108      	bne.n	8002c6a <ReadFlash2Buff+0x72>
	{
		Read_ST_Flash(DATA_EEPROM_BASE_ADDR , FlashReadData , 512);
 8002c58:	f107 0308 	add.w	r3, r7, #8
 8002c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c60:	4619      	mov	r1, r3
 8002c62:	4836      	ldr	r0, [pc, #216]	; (8002d3c <ReadFlash2Buff+0x144>)
 8002c64:	f7ff f922 	bl	8001eac <Read_ST_Flash>
 8002c68:	e00e      	b.n	8002c88 <ReadFlash2Buff+0x90>
	}
	else if( Base_addr == 1)
 8002c6a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002c6e:	f6a3 0314 	subw	r3, r3, #2068	; 0x814
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d107      	bne.n	8002c88 <ReadFlash2Buff+0x90>
	{
		Read_ST_Flash(DATA_EEPROM_BASE_ADDR2 , FlashReadData , 512);
 8002c78:	f107 0308 	add.w	r3, r7, #8
 8002c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c80:	4619      	mov	r1, r3
 8002c82:	482f      	ldr	r0, [pc, #188]	; (8002d40 <ReadFlash2Buff+0x148>)
 8002c84:	f7ff f912 	bl	8001eac <Read_ST_Flash>
	}
	uint16_t array_idx = idx >> 2;
 8002c88:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002c8c:	f6a3 0312 	subw	r3, r3, #2066	; 0x812
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	089b      	lsrs	r3, r3, #2
 8002c94:	f8a7 3816 	strh.w	r3, [r7, #2070]	; 0x816
	int array_pos = 3- (idx % WORD_BYTE);
 8002c98:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002c9c:	f6a3 0312 	subw	r3, r3, #2066	; 0x812
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810

	uint8_t *p_FlashReadData = &FlashReadData[array_idx];
 8002cac:	f8b7 3816 	ldrh.w	r3, [r7, #2070]	; 0x816
 8002cb0:	f107 0208 	add.w	r2, r7, #8
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c

	for ( int i = 0 ; i<size; i++)
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8002cc2:	e02b      	b.n	8002d1c <ReadFlash2Buff+0x124>
	{
		data[i] = p_FlashReadData[array_pos--];
 8002cc4:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8002cc8:	1e5a      	subs	r2, r3, #1
 8002cca:	f8c7 2810 	str.w	r2, [r7, #2064]	; 0x810
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002cd4:	441a      	add	r2, r3
 8002cd6:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002cda:	f607 0118 	addw	r1, r7, #2072	; 0x818
 8002cde:	f6a1 0118 	subw	r1, r1, #2072	; 0x818
 8002ce2:	6809      	ldr	r1, [r1, #0]
 8002ce4:	440b      	add	r3, r1
 8002ce6:	7812      	ldrb	r2, [r2, #0]
 8002ce8:	701a      	strb	r2, [r3, #0]
		if ( array_pos < 0)
 8002cea:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	da0f      	bge.n	8002d12 <ReadFlash2Buff+0x11a>
		{
			array_idx++;
 8002cf2:	f8b7 3816 	ldrh.w	r3, [r7, #2070]	; 0x816
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	f8a7 3816 	strh.w	r3, [r7, #2070]	; 0x816
			p_FlashReadData = &FlashReadData[array_idx];
 8002cfc:	f8b7 3816 	ldrh.w	r3, [r7, #2070]	; 0x816
 8002d00:	f107 0208 	add.w	r2, r7, #8
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
			array_pos = 3;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
	for ( int i = 0 ; i<size; i++)
 8002d12:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002d16:	3301      	adds	r3, #1
 8002d18:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8002d1c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002d20:	f6a3 0313 	subw	r3, r3, #2067	; 0x813
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	dbca      	blt.n	8002cc4 <ReadFlash2Buff+0xcc>
		}

	}

}
 8002d2e:	bf00      	nop
 8002d30:	4618      	mov	r0, r3
 8002d32:	f607 071c 	addw	r7, r7, #2076	; 0x81c
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd90      	pop	{r4, r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	08030000 	.word	0x08030000
 8002d40:	08030010 	.word	0x08030010

08002d44 <CopyBuff2FlashWrite>:



void CopyBuff2FlashWrite(uint16_t idx , uint8_t* data, uint8_t size)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	f6ad 0d18 	subw	sp, sp, #2072	; 0x818
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002d50:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8002d54:	6019      	str	r1, [r3, #0]
 8002d56:	4611      	mov	r1, r2
 8002d58:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002d5c:	f6a3 0312 	subw	r3, r3, #2066	; 0x812
 8002d60:	4602      	mov	r2, r0
 8002d62:	801a      	strh	r2, [r3, #0]
 8002d64:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002d68:	f6a3 0313 	subw	r3, r3, #2067	; 0x813
 8002d6c:	460a      	mov	r2, r1
 8002d6e:	701a      	strb	r2, [r3, #0]

	uint32_t FlashReadData[512] = {0x0,};
 8002d70:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002d74:	f5a3 6301 	sub.w	r3, r3, #2064	; 0x810
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d7e:	461a      	mov	r2, r3
 8002d80:	2100      	movs	r1, #0
 8002d82:	f007 fffd 	bl	800ad80 <memset>
	Read_ST_Flash(DATA_EEPROM_BASE_ADDR , FlashReadData , 512);
 8002d86:	f107 0308 	add.w	r3, r7, #8
 8002d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4831      	ldr	r0, [pc, #196]	; (8002e58 <CopyBuff2FlashWrite+0x114>)
 8002d92:	f7ff f88b 	bl	8001eac <Read_ST_Flash>

	//uint16_t array_idx = idx / WORD_BYTE ;
	uint16_t array_idx = idx >> 2;
 8002d96:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002d9a:	f6a3 0312 	subw	r3, r3, #2066	; 0x812
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	f8a7 3816 	strh.w	r3, [r7, #2070]	; 0x816
	int array_pos = 3- (idx % WORD_BYTE);
 8002da6:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002daa:	f6a3 0312 	subw	r3, r3, #2066	; 0x812
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810

	uint8_t *p_FlashReadData = &FlashReadData[array_idx];
 8002dba:	f8b7 3816 	ldrh.w	r3, [r7, #2070]	; 0x816
 8002dbe:	f107 0208 	add.w	r2, r7, #8
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c

	for ( int i = 0 ; i<size; i++)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8002dd0:	e02b      	b.n	8002e2a <CopyBuff2FlashWrite+0xe6>
	{
		p_FlashReadData[array_pos--] = data[i];
 8002dd2:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002dd6:	f607 0218 	addw	r2, r7, #2072	; 0x818
 8002dda:	f6a2 0218 	subw	r2, r2, #2072	; 0x818
 8002dde:	6812      	ldr	r2, [r2, #0]
 8002de0:	441a      	add	r2, r3
 8002de2:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8002de6:	1e59      	subs	r1, r3, #1
 8002de8:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810
 8002dec:	4619      	mov	r1, r3
 8002dee:	f8d7 380c 	ldr.w	r3, [r7, #2060]	; 0x80c
 8002df2:	440b      	add	r3, r1
 8002df4:	7812      	ldrb	r2, [r2, #0]
 8002df6:	701a      	strb	r2, [r3, #0]
		if ( array_pos < 0)
 8002df8:	f8d7 3810 	ldr.w	r3, [r7, #2064]	; 0x810
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	da0f      	bge.n	8002e20 <CopyBuff2FlashWrite+0xdc>
		{
			array_idx++;
 8002e00:	f8b7 3816 	ldrh.w	r3, [r7, #2070]	; 0x816
 8002e04:	3301      	adds	r3, #1
 8002e06:	f8a7 3816 	strh.w	r3, [r7, #2070]	; 0x816
			p_FlashReadData = &FlashReadData[array_idx];
 8002e0a:	f8b7 3816 	ldrh.w	r3, [r7, #2070]	; 0x816
 8002e0e:	f107 0208 	add.w	r2, r7, #8
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
			array_pos = 3;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	f8c7 3810 	str.w	r3, [r7, #2064]	; 0x810
	for ( int i = 0 ; i<size; i++)
 8002e20:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 8002e24:	3301      	adds	r3, #1
 8002e26:	f8c7 3808 	str.w	r3, [r7, #2056]	; 0x808
 8002e2a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8002e2e:	f6a3 0313 	subw	r3, r3, #2067	; 0x813
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	f8d7 2808 	ldr.w	r2, [r7, #2056]	; 0x808
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	dbca      	blt.n	8002dd2 <CopyBuff2FlashWrite+0x8e>
		}

	}
	Write_ST_Flash(DATA_EEPROM_BASE_ADDR, &FlashReadData , 256);
 8002e3c:	f107 0308 	add.w	r3, r7, #8
 8002e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e44:	4619      	mov	r1, r3
 8002e46:	4804      	ldr	r0, [pc, #16]	; (8002e58 <CopyBuff2FlashWrite+0x114>)
 8002e48:	f7ff f852 	bl	8001ef0 <Write_ST_Flash>
}
 8002e4c:	bf00      	nop
 8002e4e:	f607 0718 	addw	r7, r7, #2072	; 0x818
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	08030000 	.word	0x08030000

08002e5c <read_configuration_data>:



int read_configuration_data(config_data *c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	uint32_t d0 = *(uint32_t *) (DATA_EEPROM_BASE_ADDR);
 8002e64:	4b53      	ldr	r3, [pc, #332]	; (8002fb4 <read_configuration_data+0x158>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60fb      	str	r3, [r7, #12]
	if ( d0 != 0xFFFFFFFF) // �����Ͱ� �ֵ�
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d040      	beq.n	8002ef4 <read_configuration_data+0x98>
	{
		ReadFlash2Buff( FlashDataPosTab[GROUP].pos, &configs.sensorID, FlashDataPosTab[GROUP].size,0 );
 8002e72:	2300      	movs	r3, #0
 8002e74:	b298      	uxth	r0, r3
 8002e76:	2201      	movs	r2, #1
 8002e78:	2300      	movs	r3, #0
 8002e7a:	494f      	ldr	r1, [pc, #316]	; (8002fb8 <read_configuration_data+0x15c>)
 8002e7c:	f7ff febc 	bl	8002bf8 <ReadFlash2Buff>
		ReadFlash2Buff( FlashDataPosTab[NODE].pos, &configs.NID, FlashDataPosTab[NODE].size,0 );
 8002e80:	2301      	movs	r3, #1
 8002e82:	b298      	uxth	r0, r3
 8002e84:	2201      	movs	r2, #1
 8002e86:	2300      	movs	r3, #0
 8002e88:	494c      	ldr	r1, [pc, #304]	; (8002fbc <read_configuration_data+0x160>)
 8002e8a:	f7ff feb5 	bl	8002bf8 <ReadFlash2Buff>
		ReadFlash2Buff( FlashDataPosTab[CHANNEL].pos, &configs.ch, FlashDataPosTab[CHANNEL].size,0 );
 8002e8e:	2302      	movs	r3, #2
 8002e90:	b298      	uxth	r0, r3
 8002e92:	2201      	movs	r2, #1
 8002e94:	2300      	movs	r3, #0
 8002e96:	494a      	ldr	r1, [pc, #296]	; (8002fc0 <read_configuration_data+0x164>)
 8002e98:	f7ff feae 	bl	8002bf8 <ReadFlash2Buff>
		ReadFlash2Buff( FlashDataPosTab[TX_POWER].pos, &configs.pw, FlashDataPosTab[TX_POWER].size,0 );
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	b298      	uxth	r0, r3
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	4947      	ldr	r1, [pc, #284]	; (8002fc4 <read_configuration_data+0x168>)
 8002ea6:	f7ff fea7 	bl	8002bf8 <ReadFlash2Buff>
		ReadFlash2Buff( FlashDataPosTab[TX_TIME].pos, &configs.txP, FlashDataPosTab[TX_TIME].size,0 );
 8002eaa:	2304      	movs	r3, #4
 8002eac:	b298      	uxth	r0, r3
 8002eae:	2201      	movs	r2, #1
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	4945      	ldr	r1, [pc, #276]	; (8002fc8 <read_configuration_data+0x16c>)
 8002eb4:	f7ff fea0 	bl	8002bf8 <ReadFlash2Buff>
		ReadFlash2Buff( FlashDataPosTab[RF_CALIBRATION].pos, &configs.fCal, FlashDataPosTab[RF_CALIBRATION].size,0 );
 8002eb8:	2305      	movs	r3, #5
 8002eba:	b298      	uxth	r0, r3
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	4942      	ldr	r1, [pc, #264]	; (8002fcc <read_configuration_data+0x170>)
 8002ec2:	f7ff fe99 	bl	8002bf8 <ReadFlash2Buff>
		ReadFlash2Buff( FlashDataPosTab[SLEEP_ON].pos, &configs.sleepOn, FlashDataPosTab[SLEEP_ON].size,0 );
 8002ec6:	2307      	movs	r3, #7
 8002ec8:	b298      	uxth	r0, r3
 8002eca:	2201      	movs	r2, #1
 8002ecc:	2300      	movs	r3, #0
 8002ece:	4940      	ldr	r1, [pc, #256]	; (8002fd0 <read_configuration_data+0x174>)
 8002ed0:	f7ff fe92 	bl	8002bf8 <ReadFlash2Buff>
		ReadFlash2Buff( FlashDataPosTab[DBG].pos, &configs.DBG_led, FlashDataPosTab[DBG].size,0 );
 8002ed4:	2308      	movs	r3, #8
 8002ed6:	b298      	uxth	r0, r3
 8002ed8:	2201      	movs	r2, #1
 8002eda:	2300      	movs	r3, #0
 8002edc:	493d      	ldr	r1, [pc, #244]	; (8002fd4 <read_configuration_data+0x178>)
 8002ede:	f7ff fe8b 	bl	8002bf8 <ReadFlash2Buff>
		ReadFlash2Buff( FlashDataPosTab[SERIAL_NUMBER].pos, &configs.serialNumber, FlashDataPosTab[SERIAL_NUMBER].size,1);
 8002ee2:	2310      	movs	r3, #16
 8002ee4:	b298      	uxth	r0, r3
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	2301      	movs	r3, #1
 8002eea:	493b      	ldr	r1, [pc, #236]	; (8002fd8 <read_configuration_data+0x17c>)
 8002eec:	f7ff fe84 	bl	8002bf8 <ReadFlash2Buff>
		return 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e05b      	b.n	8002fac <read_configuration_data+0x150>
	}
	else // ������ �ʱⰪ
	{
		configs.sensorID = 0x01;
 8002ef4:	4b30      	ldr	r3, [pc, #192]	; (8002fb8 <read_configuration_data+0x15c>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	701a      	strb	r2, [r3, #0]
		configs.NID = 0x01;
 8002efa:	4b2f      	ldr	r3, [pc, #188]	; (8002fb8 <read_configuration_data+0x15c>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	705a      	strb	r2, [r3, #1]
		configs.ch = 0;
 8002f00:	4b2d      	ldr	r3, [pc, #180]	; (8002fb8 <read_configuration_data+0x15c>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	709a      	strb	r2, [r3, #2]
		configs.pw = 18;
 8002f06:	4b2c      	ldr	r3, [pc, #176]	; (8002fb8 <read_configuration_data+0x15c>)
 8002f08:	2212      	movs	r2, #18
 8002f0a:	70da      	strb	r2, [r3, #3]
		configs.txP = 3;
 8002f0c:	4b2a      	ldr	r3, [pc, #168]	; (8002fb8 <read_configuration_data+0x15c>)
 8002f0e:	2203      	movs	r2, #3
 8002f10:	711a      	strb	r2, [r3, #4]
		configs.fCal = 0x0006;
 8002f12:	4b29      	ldr	r3, [pc, #164]	; (8002fb8 <read_configuration_data+0x15c>)
 8002f14:	2206      	movs	r2, #6
 8002f16:	80da      	strh	r2, [r3, #6]
		configs.sleepOn = 0;
 8002f18:	4b27      	ldr	r3, [pc, #156]	; (8002fb8 <read_configuration_data+0x15c>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	721a      	strb	r2, [r3, #8]
		configs.DBG_led = 1;
 8002f1e:	4b26      	ldr	r3, [pc, #152]	; (8002fb8 <read_configuration_data+0x15c>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	745a      	strb	r2, [r3, #17]
		configs.sensorID = 1;
 8002f24:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <read_configuration_data+0x15c>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	701a      	strb	r2, [r3, #0]

//		configs.serialNumber = 0x0123456789ABCDEF;


		CopyBuff2FlashWrite( FlashDataPosTab[GROUP].pos, &configs.sensorID, FlashDataPosTab[GROUP].size);
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2201      	movs	r2, #1
 8002f30:	4921      	ldr	r1, [pc, #132]	; (8002fb8 <read_configuration_data+0x15c>)
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff ff06 	bl	8002d44 <CopyBuff2FlashWrite>
		CopyBuff2FlashWrite( FlashDataPosTab[NODE].pos, &configs.NID, FlashDataPosTab[NODE].size);
 8002f38:	2301      	movs	r3, #1
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	491f      	ldr	r1, [pc, #124]	; (8002fbc <read_configuration_data+0x160>)
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff feff 	bl	8002d44 <CopyBuff2FlashWrite>
		CopyBuff2FlashWrite( FlashDataPosTab[CHANNEL].pos, &configs.ch, FlashDataPosTab[CHANNEL].size);
 8002f46:	2302      	movs	r3, #2
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	491c      	ldr	r1, [pc, #112]	; (8002fc0 <read_configuration_data+0x164>)
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fef8 	bl	8002d44 <CopyBuff2FlashWrite>
		CopyBuff2FlashWrite( FlashDataPosTab[TX_POWER].pos, &configs.pw, FlashDataPosTab[TX_POWER].size);
 8002f54:	2303      	movs	r3, #3
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2201      	movs	r2, #1
 8002f5a:	491a      	ldr	r1, [pc, #104]	; (8002fc4 <read_configuration_data+0x168>)
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff fef1 	bl	8002d44 <CopyBuff2FlashWrite>
		CopyBuff2FlashWrite( FlashDataPosTab[TX_TIME].pos, &configs.txP, FlashDataPosTab[TX_TIME].size);
 8002f62:	2304      	movs	r3, #4
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	2201      	movs	r2, #1
 8002f68:	4917      	ldr	r1, [pc, #92]	; (8002fc8 <read_configuration_data+0x16c>)
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff feea 	bl	8002d44 <CopyBuff2FlashWrite>
		CopyBuff2FlashWrite( FlashDataPosTab[RF_CALIBRATION].pos, &configs.fCal, FlashDataPosTab[RF_CALIBRATION].size);
 8002f70:	2305      	movs	r3, #5
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2202      	movs	r2, #2
 8002f76:	4915      	ldr	r1, [pc, #84]	; (8002fcc <read_configuration_data+0x170>)
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fee3 	bl	8002d44 <CopyBuff2FlashWrite>
		CopyBuff2FlashWrite( FlashDataPosTab[SLEEP_ON].pos, &configs.sleepOn, FlashDataPosTab[SLEEP_ON].size);
 8002f7e:	2307      	movs	r3, #7
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2201      	movs	r2, #1
 8002f84:	4912      	ldr	r1, [pc, #72]	; (8002fd0 <read_configuration_data+0x174>)
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fedc 	bl	8002d44 <CopyBuff2FlashWrite>
		CopyBuff2FlashWrite( FlashDataPosTab[DBG].pos, &configs.sleepOn, FlashDataPosTab[DBG].size);
 8002f8c:	2308      	movs	r3, #8
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	2201      	movs	r2, #1
 8002f92:	490f      	ldr	r1, [pc, #60]	; (8002fd0 <read_configuration_data+0x174>)
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff fed5 	bl	8002d44 <CopyBuff2FlashWrite>
		CopyBuff2FlashWrite( FlashDataPosTab[SERIAL_NUMBER].pos, &configs.serialNumber, FlashDataPosTab[SERIAL_NUMBER].size);
 8002f9a:	2310      	movs	r3, #16
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	2208      	movs	r2, #8
 8002fa0:	490d      	ldr	r1, [pc, #52]	; (8002fd8 <read_configuration_data+0x17c>)
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fece 	bl	8002d44 <CopyBuff2FlashWrite>
		return -1;
 8002fa8:	f04f 33ff 	mov.w	r3, #4294967295
	}

	
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	08030000 	.word	0x08030000
 8002fb8:	200005f0 	.word	0x200005f0
 8002fbc:	200005f1 	.word	0x200005f1
 8002fc0:	200005f2 	.word	0x200005f2
 8002fc4:	200005f3 	.word	0x200005f3
 8002fc8:	200005f4 	.word	0x200005f4
 8002fcc:	200005f6 	.word	0x200005f6
 8002fd0:	200005f8 	.word	0x200005f8
 8002fd4:	20000601 	.word	0x20000601
 8002fd8:	200005f9 	.word	0x200005f9

08002fdc <handleSetFunc>:
*/
uint8_t sNumber[16];


int handleSetFunc()
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
	short rShort,test1,test2;
	uint8_t rU8;
	//char rC8;


	uint32_t TempMemoryStrobe[2] = {0x0,0x0};
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
	uint32_t TempStrobe;
	uint32_t BuffFlashStrobe[4] = {0,};
 8002fea:	463b      	mov	r3, r7
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
	int ret = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61fb      	str	r3, [r7, #28]

	switch(cmdBuffer[1])
 8002ffa:	4bb2      	ldr	r3, [pc, #712]	; (80032c4 <handleSetFunc+0x2e8>)
 8002ffc:	785b      	ldrb	r3, [r3, #1]
 8002ffe:	3b43      	subs	r3, #67	; 0x43
 8003000:	2b11      	cmp	r3, #17
 8003002:	f200 8174 	bhi.w	80032ee <handleSetFunc+0x312>
 8003006:	a201      	add	r2, pc, #4	; (adr r2, 800300c <handleSetFunc+0x30>)
 8003008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300c:	080030f7 	.word	0x080030f7
 8003010:	08003287 	.word	0x08003287
 8003014:	080032ef 	.word	0x080032ef
 8003018:	080032ef 	.word	0x080032ef
 800301c:	08003055 	.word	0x08003055
 8003020:	080032ef 	.word	0x080032ef
 8003024:	080032ef 	.word	0x080032ef
 8003028:	080031f5 	.word	0x080031f5
 800302c:	080032ef 	.word	0x080032ef
 8003030:	0800308b 	.word	0x0800308b
 8003034:	080032ef 	.word	0x080032ef
 8003038:	080030c1 	.word	0x080030c1
 800303c:	080032ef 	.word	0x080032ef
 8003040:	0800312d 	.word	0x0800312d
 8003044:	080032ef 	.word	0x080032ef
 8003048:	08003199 	.word	0x08003199
 800304c:	0800322b 	.word	0x0800322b
 8003050:	08003163 	.word	0x08003163
	{
		case 'G':  // Group
			rShort = (short)ch2hex((char*)&cmdBuffer[2], 2);
 8003054:	2102      	movs	r1, #2
 8003056:	489c      	ldr	r0, [pc, #624]	; (80032c8 <handleSetFunc+0x2ec>)
 8003058:	f7ff fd1e 	bl	8002a98 <ch2hex>
 800305c:	4603      	mov	r3, r0
 800305e:	837b      	strh	r3, [r7, #26]
			if(rShort != -0x100)
 8003060:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003064:	f513 7f80 	cmn.w	r3, #256	; 0x100
 8003068:	d00b      	beq.n	8003082 <handleSetFunc+0xa6>
			{
				rU8 = (uint8_t) rShort;
 800306a:	8b7b      	ldrh	r3, [r7, #26]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	767b      	strb	r3, [r7, #25]
				CopyBuff2FlashWrite( FlashDataPosTab[GROUP].pos, &rU8, FlashDataPosTab[GROUP].size);
 8003070:	2300      	movs	r3, #0
 8003072:	b29b      	uxth	r3, r3
 8003074:	2201      	movs	r2, #1
 8003076:	f107 0119 	add.w	r1, r7, #25
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff fe62 	bl	8002d44 <CopyBuff2FlashWrite>
			}
			else
				ret = -1;
			break;
 8003080:	e135      	b.n	80032ee <handleSetFunc+0x312>
				ret = -1;
 8003082:	f04f 33ff 	mov.w	r3, #4294967295
 8003086:	61fb      	str	r3, [r7, #28]
			break;
 8003088:	e131      	b.n	80032ee <handleSetFunc+0x312>

		case 'L':  // DBG LED
			rShort = (short)ch2hex((char*)&cmdBuffer[2], 2);
 800308a:	2102      	movs	r1, #2
 800308c:	488e      	ldr	r0, [pc, #568]	; (80032c8 <handleSetFunc+0x2ec>)
 800308e:	f7ff fd03 	bl	8002a98 <ch2hex>
 8003092:	4603      	mov	r3, r0
 8003094:	837b      	strh	r3, [r7, #26]
			if(rShort != -0x100)
 8003096:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800309a:	f513 7f80 	cmn.w	r3, #256	; 0x100
 800309e:	d00b      	beq.n	80030b8 <handleSetFunc+0xdc>
			{
				rU8 = (uint8_t) rShort;
 80030a0:	8b7b      	ldrh	r3, [r7, #26]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	767b      	strb	r3, [r7, #25]
				CopyBuff2FlashWrite( FlashDataPosTab[DBG].pos, &rU8, FlashDataPosTab[DBG].size);
 80030a6:	2308      	movs	r3, #8
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2201      	movs	r2, #1
 80030ac:	f107 0119 	add.w	r1, r7, #25
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fe47 	bl	8002d44 <CopyBuff2FlashWrite>
			}
			else
				ret = -1;
			break;
 80030b6:	e11a      	b.n	80032ee <handleSetFunc+0x312>
				ret = -1;
 80030b8:	f04f 33ff 	mov.w	r3, #4294967295
 80030bc:	61fb      	str	r3, [r7, #28]
			break;
 80030be:	e116      	b.n	80032ee <handleSetFunc+0x312>

		case 'N':  // Node  
			rShort = (short)ch2hex((char*)&cmdBuffer[2], 2);
 80030c0:	2102      	movs	r1, #2
 80030c2:	4881      	ldr	r0, [pc, #516]	; (80032c8 <handleSetFunc+0x2ec>)
 80030c4:	f7ff fce8 	bl	8002a98 <ch2hex>
 80030c8:	4603      	mov	r3, r0
 80030ca:	837b      	strh	r3, [r7, #26]
			if(rShort != -100)
 80030cc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80030d0:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80030d4:	d00b      	beq.n	80030ee <handleSetFunc+0x112>
			{
				rU8 = (uint8_t) rShort;
 80030d6:	8b7b      	ldrh	r3, [r7, #26]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	767b      	strb	r3, [r7, #25]
				CopyBuff2FlashWrite( FlashDataPosTab[NODE].pos, &rU8, FlashDataPosTab[NODE].size);
 80030dc:	2301      	movs	r3, #1
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2201      	movs	r2, #1
 80030e2:	f107 0119 	add.w	r1, r7, #25
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff fe2c 	bl	8002d44 <CopyBuff2FlashWrite>
			}
			else
				ret = -1;
			break;
 80030ec:	e0ff      	b.n	80032ee <handleSetFunc+0x312>
				ret = -1;
 80030ee:	f04f 33ff 	mov.w	r3, #4294967295
 80030f2:	61fb      	str	r3, [r7, #28]
			break;
 80030f4:	e0fb      	b.n	80032ee <handleSetFunc+0x312>

		case 'C':	// Channel
			rShort = (short)ch2hex((char*)&cmdBuffer[2], 2);
 80030f6:	2102      	movs	r1, #2
 80030f8:	4873      	ldr	r0, [pc, #460]	; (80032c8 <handleSetFunc+0x2ec>)
 80030fa:	f7ff fccd 	bl	8002a98 <ch2hex>
 80030fe:	4603      	mov	r3, r0
 8003100:	837b      	strh	r3, [r7, #26]
			if(rShort != -100)
 8003102:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003106:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800310a:	d00b      	beq.n	8003124 <handleSetFunc+0x148>
			{
				rU8 = (uint8_t) rShort;
 800310c:	8b7b      	ldrh	r3, [r7, #26]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	767b      	strb	r3, [r7, #25]
				CopyBuff2FlashWrite( FlashDataPosTab[CHANNEL].pos, &rU8, FlashDataPosTab[CHANNEL].size);
 8003112:	2302      	movs	r3, #2
 8003114:	b29b      	uxth	r3, r3
 8003116:	2201      	movs	r2, #1
 8003118:	f107 0119 	add.w	r1, r7, #25
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fe11 	bl	8002d44 <CopyBuff2FlashWrite>
			}
			else
				ret = -1;
			break;
 8003122:	e0e4      	b.n	80032ee <handleSetFunc+0x312>
				ret = -1;
 8003124:	f04f 33ff 	mov.w	r3, #4294967295
 8003128:	61fb      	str	r3, [r7, #28]
			break;
 800312a:	e0e0      	b.n	80032ee <handleSetFunc+0x312>

		case 'P':	// Txpower
			rShort = (short)ch2hex((char*)&cmdBuffer[2], 2);
 800312c:	2102      	movs	r1, #2
 800312e:	4866      	ldr	r0, [pc, #408]	; (80032c8 <handleSetFunc+0x2ec>)
 8003130:	f7ff fcb2 	bl	8002a98 <ch2hex>
 8003134:	4603      	mov	r3, r0
 8003136:	837b      	strh	r3, [r7, #26]
			if(rShort != -100)
 8003138:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800313c:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003140:	d00b      	beq.n	800315a <handleSetFunc+0x17e>
			{
				rU8 = (uint8_t) rShort;
 8003142:	8b7b      	ldrh	r3, [r7, #26]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	767b      	strb	r3, [r7, #25]
				CopyBuff2FlashWrite( FlashDataPosTab[TX_POWER].pos, &rU8, FlashDataPosTab[TX_POWER].size);
 8003148:	2303      	movs	r3, #3
 800314a:	b29b      	uxth	r3, r3
 800314c:	2201      	movs	r2, #1
 800314e:	f107 0119 	add.w	r1, r7, #25
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fdf6 	bl	8002d44 <CopyBuff2FlashWrite>
			}
			else
				ret = -1;
			break;
 8003158:	e0c9      	b.n	80032ee <handleSetFunc+0x312>
				ret = -1;
 800315a:	f04f 33ff 	mov.w	r3, #4294967295
 800315e:	61fb      	str	r3, [r7, #28]
			break;
 8003160:	e0c5      	b.n	80032ee <handleSetFunc+0x312>

		case 'T':
			rShort = (short)ch2hex((char*)&cmdBuffer[2], 2);
 8003162:	2102      	movs	r1, #2
 8003164:	4858      	ldr	r0, [pc, #352]	; (80032c8 <handleSetFunc+0x2ec>)
 8003166:	f7ff fc97 	bl	8002a98 <ch2hex>
 800316a:	4603      	mov	r3, r0
 800316c:	837b      	strh	r3, [r7, #26]
			if(rShort != -100)
 800316e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003172:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003176:	d00b      	beq.n	8003190 <handleSetFunc+0x1b4>
			{
				rU8 = (uint8_t) rShort;
 8003178:	8b7b      	ldrh	r3, [r7, #26]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	767b      	strb	r3, [r7, #25]
				CopyBuff2FlashWrite( FlashDataPosTab[TX_TIME].pos, &rU8, FlashDataPosTab[TX_TIME].size);
 800317e:	2304      	movs	r3, #4
 8003180:	b29b      	uxth	r3, r3
 8003182:	2201      	movs	r2, #1
 8003184:	f107 0119 	add.w	r1, r7, #25
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fddb 	bl	8002d44 <CopyBuff2FlashWrite>
			}
			else
				ret = -1;
			break;
 800318e:	e0ae      	b.n	80032ee <handleSetFunc+0x312>
				ret = -1;
 8003190:	f04f 33ff 	mov.w	r3, #4294967295
 8003194:	61fb      	str	r3, [r7, #28]
			break;
 8003196:	e0aa      	b.n	80032ee <handleSetFunc+0x312>

		case 'R':
			for(rU8 = 0; rU8 < 4; rU8 += 2)
 8003198:	2300      	movs	r3, #0
 800319a:	767b      	strb	r3, [r7, #25]
 800319c:	e01f      	b.n	80031de <handleSetFunc+0x202>
			{
				rShort = (short)ch2hex((char*)&cmdBuffer[2 + rU8], 2);
 800319e:	7e7b      	ldrb	r3, [r7, #25]
 80031a0:	3302      	adds	r3, #2
 80031a2:	4a48      	ldr	r2, [pc, #288]	; (80032c4 <handleSetFunc+0x2e8>)
 80031a4:	4413      	add	r3, r2
 80031a6:	2102      	movs	r1, #2
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fc75 	bl	8002a98 <ch2hex>
 80031ae:	4603      	mov	r3, r0
 80031b0:	837b      	strh	r3, [r7, #26]
				
				if(rShort != -100)
 80031b2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80031b6:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80031ba:	d008      	beq.n	80031ce <handleSetFunc+0x1f2>
					sNumber[rU8 / 2] = (uint8_t)rShort;
 80031bc:	7e7b      	ldrb	r3, [r7, #25]
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	8b7b      	ldrh	r3, [r7, #26]
 80031c6:	b2d9      	uxtb	r1, r3
 80031c8:	4b40      	ldr	r3, [pc, #256]	; (80032cc <handleSetFunc+0x2f0>)
 80031ca:	5499      	strb	r1, [r3, r2]
 80031cc:	e003      	b.n	80031d6 <handleSetFunc+0x1fa>
				else
				{
					ret = -1;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295
 80031d2:	61fb      	str	r3, [r7, #28]
					break;
 80031d4:	e006      	b.n	80031e4 <handleSetFunc+0x208>
			for(rU8 = 0; rU8 < 4; rU8 += 2)
 80031d6:	7e7b      	ldrb	r3, [r7, #25]
 80031d8:	3302      	adds	r3, #2
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	767b      	strb	r3, [r7, #25]
 80031de:	7e7b      	ldrb	r3, [r7, #25]
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d9dc      	bls.n	800319e <handleSetFunc+0x1c2>
				}
			}
			CopyBuff2FlashWrite( FlashDataPosTab[RF_CALIBRATION].pos, &sNumber, FlashDataPosTab[RF_CALIBRATION].size);
 80031e4:	2305      	movs	r3, #5
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2202      	movs	r2, #2
 80031ea:	4938      	ldr	r1, [pc, #224]	; (80032cc <handleSetFunc+0x2f0>)
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fda9 	bl	8002d44 <CopyBuff2FlashWrite>
			break;
 80031f2:	e07c      	b.n	80032ee <handleSetFunc+0x312>

		case 'J':  // SJ sleep on off 
			rShort = (short)ch2hex((char*)&cmdBuffer[2], 2);
 80031f4:	2102      	movs	r1, #2
 80031f6:	4834      	ldr	r0, [pc, #208]	; (80032c8 <handleSetFunc+0x2ec>)
 80031f8:	f7ff fc4e 	bl	8002a98 <ch2hex>
 80031fc:	4603      	mov	r3, r0
 80031fe:	837b      	strh	r3, [r7, #26]
			if(rShort != -100)
 8003200:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003204:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8003208:	d00b      	beq.n	8003222 <handleSetFunc+0x246>
			{
				rU8 = (uint8_t) rShort;
 800320a:	8b7b      	ldrh	r3, [r7, #26]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	767b      	strb	r3, [r7, #25]
				CopyBuff2FlashWrite( FlashDataPosTab[SLEEP_ON].pos, &rU8, FlashDataPosTab[SLEEP_ON].size);
 8003210:	2307      	movs	r3, #7
 8003212:	b29b      	uxth	r3, r3
 8003214:	2201      	movs	r2, #1
 8003216:	f107 0119 	add.w	r1, r7, #25
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff fd92 	bl	8002d44 <CopyBuff2FlashWrite>
			}
			else
				ret = -1;
			break;
 8003220:	e065      	b.n	80032ee <handleSetFunc+0x312>
				ret = -1;
 8003222:	f04f 33ff 	mov.w	r3, #4294967295
 8003226:	61fb      	str	r3, [r7, #28]
			break;
 8003228:	e061      	b.n	80032ee <handleSetFunc+0x312>

		case 'S': // SERIAL NUMBER
			for(rU8 = 0; rU8 < 16; rU8 += 2)
 800322a:	2300      	movs	r3, #0
 800322c:	767b      	strb	r3, [r7, #25]
 800322e:	e01f      	b.n	8003270 <handleSetFunc+0x294>
			{
				rShort = (short)ch2hex((char*)&cmdBuffer[2 + rU8], 2);
 8003230:	7e7b      	ldrb	r3, [r7, #25]
 8003232:	3302      	adds	r3, #2
 8003234:	4a23      	ldr	r2, [pc, #140]	; (80032c4 <handleSetFunc+0x2e8>)
 8003236:	4413      	add	r3, r2
 8003238:	2102      	movs	r1, #2
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fc2c 	bl	8002a98 <ch2hex>
 8003240:	4603      	mov	r3, r0
 8003242:	837b      	strh	r3, [r7, #26]
				if(rShort != -100)
 8003244:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003248:	f113 0f64 	cmn.w	r3, #100	; 0x64
 800324c:	d008      	beq.n	8003260 <handleSetFunc+0x284>
					sNumber[rU8 / 2] = (uint8_t)rShort;
 800324e:	7e7b      	ldrb	r3, [r7, #25]
 8003250:	085b      	lsrs	r3, r3, #1
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	8b7b      	ldrh	r3, [r7, #26]
 8003258:	b2d9      	uxtb	r1, r3
 800325a:	4b1c      	ldr	r3, [pc, #112]	; (80032cc <handleSetFunc+0x2f0>)
 800325c:	5499      	strb	r1, [r3, r2]
 800325e:	e003      	b.n	8003268 <handleSetFunc+0x28c>
				else
				{
					ret = -1;
 8003260:	f04f 33ff 	mov.w	r3, #4294967295
 8003264:	61fb      	str	r3, [r7, #28]
					break;
 8003266:	e006      	b.n	8003276 <handleSetFunc+0x29a>
			for(rU8 = 0; rU8 < 16; rU8 += 2)
 8003268:	7e7b      	ldrb	r3, [r7, #25]
 800326a:	3302      	adds	r3, #2
 800326c:	b2db      	uxtb	r3, r3
 800326e:	767b      	strb	r3, [r7, #25]
 8003270:	7e7b      	ldrb	r3, [r7, #25]
 8003272:	2b0f      	cmp	r3, #15
 8003274:	d9dc      	bls.n	8003230 <handleSetFunc+0x254>
				}
			}
			CopyBuff2FlashWrite( FlashDataPosTab[SERIAL_NUMBER].pos, &sNumber, FlashDataPosTab[SERIAL_NUMBER].size);
 8003276:	2310      	movs	r3, #16
 8003278:	b29b      	uxth	r3, r3
 800327a:	2208      	movs	r2, #8
 800327c:	4913      	ldr	r1, [pc, #76]	; (80032cc <handleSetFunc+0x2f0>)
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fd60 	bl	8002d44 <CopyBuff2FlashWrite>
			break;
 8003284:	e033      	b.n	80032ee <handleSetFunc+0x312>

		case 'D':
			for(rU8 = 0; rU8 < 8; rU8 += 2)
 8003286:	2300      	movs	r3, #0
 8003288:	767b      	strb	r3, [r7, #25]
 800328a:	e025      	b.n	80032d8 <handleSetFunc+0x2fc>
			{
				rShort = (short)ch2hex((char*)&cmdBuffer[2 + rU8], 2);
 800328c:	7e7b      	ldrb	r3, [r7, #25]
 800328e:	3302      	adds	r3, #2
 8003290:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <handleSetFunc+0x2e8>)
 8003292:	4413      	add	r3, r2
 8003294:	2102      	movs	r1, #2
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fbfe 	bl	8002a98 <ch2hex>
 800329c:	4603      	mov	r3, r0
 800329e:	837b      	strh	r3, [r7, #26]
				if(rShort != -100)
 80032a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80032a4:	f113 0f64 	cmn.w	r3, #100	; 0x64
 80032a8:	d008      	beq.n	80032bc <handleSetFunc+0x2e0>
					sNumber[rU8 / 2] = (uint8_t)rShort;
 80032aa:	7e7b      	ldrb	r3, [r7, #25]
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
 80032b2:	8b7b      	ldrh	r3, [r7, #26]
 80032b4:	b2d9      	uxtb	r1, r3
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <handleSetFunc+0x2f0>)
 80032b8:	5499      	strb	r1, [r3, r2]
 80032ba:	e009      	b.n	80032d0 <handleSetFunc+0x2f4>
				else
				{
					ret = -1;
 80032bc:	f04f 33ff 	mov.w	r3, #4294967295
 80032c0:	61fb      	str	r3, [r7, #28]
					break;
 80032c2:	e00c      	b.n	80032de <handleSetFunc+0x302>
 80032c4:	200005cc 	.word	0x200005cc
 80032c8:	200005ce 	.word	0x200005ce
 80032cc:	20000604 	.word	0x20000604
			for(rU8 = 0; rU8 < 8; rU8 += 2)
 80032d0:	7e7b      	ldrb	r3, [r7, #25]
 80032d2:	3302      	adds	r3, #2
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	767b      	strb	r3, [r7, #25]
 80032d8:	7e7b      	ldrb	r3, [r7, #25]
 80032da:	2b07      	cmp	r3, #7
 80032dc:	d9d6      	bls.n	800328c <handleSetFunc+0x2b0>
				}
				
			}
			CopyBuff2FlashWrite( FlashDataPosTab[SERIAL_NUMBER].pos, &sNumber, FlashDataPosTab[SERIAL_NUMBER].size);
 80032de:	2310      	movs	r3, #16
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	2208      	movs	r2, #8
 80032e4:	4911      	ldr	r1, [pc, #68]	; (800332c <handleSetFunc+0x350>)
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fd2c 	bl	8002d44 <CopyBuff2FlashWrite>
			break;
 80032ec:	bf00      	nop

	}

	read_configuration_data(&configs);
 80032ee:	4810      	ldr	r0, [pc, #64]	; (8003330 <handleSetFunc+0x354>)
 80032f0:	f7ff fdb4 	bl	8002e5c <read_configuration_data>

	if(ret == -1)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fa:	d106      	bne.n	800330a <handleSetFunc+0x32e>
		HAL_UART_Transmit(&huart1, (uint8_t*)"ERR\r\n", 5, 100);
 80032fc:	2364      	movs	r3, #100	; 0x64
 80032fe:	2205      	movs	r2, #5
 8003300:	490c      	ldr	r1, [pc, #48]	; (8003334 <handleSetFunc+0x358>)
 8003302:	480d      	ldr	r0, [pc, #52]	; (8003338 <handleSetFunc+0x35c>)
 8003304:	f006 fc67 	bl	8009bd6 <HAL_UART_Transmit>
 8003308:	e00b      	b.n	8003322 <handleSetFunc+0x346>
	else if(ret == 0)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d108      	bne.n	8003322 <handleSetFunc+0x346>
	{
		conf_flag = 1;
 8003310:	4b0a      	ldr	r3, [pc, #40]	; (800333c <handleSetFunc+0x360>)
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*)"OK\r\n", 4, 100);
 8003316:	2364      	movs	r3, #100	; 0x64
 8003318:	2204      	movs	r2, #4
 800331a:	4909      	ldr	r1, [pc, #36]	; (8003340 <handleSetFunc+0x364>)
 800331c:	4806      	ldr	r0, [pc, #24]	; (8003338 <handleSetFunc+0x35c>)
 800331e:	f006 fc5a 	bl	8009bd6 <HAL_UART_Transmit>
	}
	return ret;
 8003322:	69fb      	ldr	r3, [r7, #28]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	20000604 	.word	0x20000604
 8003330:	200005f0 	.word	0x200005f0
 8003334:	0800f82c 	.word	0x0800f82c
 8003338:	20000440 	.word	0x20000440
 800333c:	20000004 	.word	0x20000004
 8003340:	0800f834 	.word	0x0800f834

08003344 <handleGetFunc>:


int handleGetFunc()
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
	uint8_t rU8;
	char rC8, buff[16];
	uint32_t rU32;
	switch(cmdBuffer[1])
 800334a:	4ba2      	ldr	r3, [pc, #648]	; (80035d4 <handleGetFunc+0x290>)
 800334c:	785b      	ldrb	r3, [r3, #1]
 800334e:	3b43      	subs	r3, #67	; 0x43
 8003350:	2b11      	cmp	r3, #17
 8003352:	f200 81b9 	bhi.w	80036c8 <handleGetFunc+0x384>
 8003356:	a201      	add	r2, pc, #4	; (adr r2, 800335c <handleGetFunc+0x18>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	08003429 	.word	0x08003429
 8003360:	080036c9 	.word	0x080036c9
 8003364:	080036c9 	.word	0x080036c9
 8003368:	080036c9 	.word	0x080036c9
 800336c:	080033a5 	.word	0x080033a5
 8003370:	080036c9 	.word	0x080036c9
 8003374:	080036c9 	.word	0x080036c9
 8003378:	08003593 	.word	0x08003593
 800337c:	080036c9 	.word	0x080036c9
 8003380:	0800346b 	.word	0x0800346b
 8003384:	080036c9 	.word	0x080036c9
 8003388:	080033e7 	.word	0x080033e7
 800338c:	080036c9 	.word	0x080036c9
 8003390:	080034ad 	.word	0x080034ad
 8003394:	080036c9 	.word	0x080036c9
 8003398:	08003531 	.word	0x08003531
 800339c:	08003601 	.word	0x08003601
 80033a0:	080034ef 	.word	0x080034ef
	{
		case 'G':
			ReadFlash2Buff( FlashDataPosTab[GROUP].pos, &rU8, FlashDataPosTab[GROUP].size,0);
 80033a4:	2300      	movs	r3, #0
 80033a6:	b298      	uxth	r0, r3
 80033a8:	2201      	movs	r2, #1
 80033aa:	f107 0117 	add.w	r1, r7, #23
 80033ae:	2300      	movs	r3, #0
 80033b0:	f7ff fc22 	bl	8002bf8 <ReadFlash2Buff>
			hex2ch(rU8, buff);
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
 80033b6:	1d3a      	adds	r2, r7, #4
 80033b8:	4611      	mov	r1, r2
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fb9c 	bl	8002af8 <hex2ch>
			HAL_UART_Transmit(&huart1, (uint8_t*)"GG", 2, 100);
 80033c0:	2364      	movs	r3, #100	; 0x64
 80033c2:	2202      	movs	r2, #2
 80033c4:	4984      	ldr	r1, [pc, #528]	; (80035d8 <handleGetFunc+0x294>)
 80033c6:	4885      	ldr	r0, [pc, #532]	; (80035dc <handleGetFunc+0x298>)
 80033c8:	f006 fc05 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)buff, 2, 100);
 80033cc:	1d39      	adds	r1, r7, #4
 80033ce:	2364      	movs	r3, #100	; 0x64
 80033d0:	2202      	movs	r2, #2
 80033d2:	4882      	ldr	r0, [pc, #520]	; (80035dc <handleGetFunc+0x298>)
 80033d4:	f006 fbff 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 80033d8:	2364      	movs	r3, #100	; 0x64
 80033da:	2202      	movs	r2, #2
 80033dc:	4980      	ldr	r1, [pc, #512]	; (80035e0 <handleGetFunc+0x29c>)
 80033de:	487f      	ldr	r0, [pc, #508]	; (80035dc <handleGetFunc+0x298>)
 80033e0:	f006 fbf9 	bl	8009bd6 <HAL_UART_Transmit>
			break;
 80033e4:	e170      	b.n	80036c8 <handleGetFunc+0x384>

		case 'N':
			ReadFlash2Buff( FlashDataPosTab[NODE].pos, &rU8, FlashDataPosTab[NODE].size,0);
 80033e6:	2301      	movs	r3, #1
 80033e8:	b298      	uxth	r0, r3
 80033ea:	2201      	movs	r2, #1
 80033ec:	f107 0117 	add.w	r1, r7, #23
 80033f0:	2300      	movs	r3, #0
 80033f2:	f7ff fc01 	bl	8002bf8 <ReadFlash2Buff>
			hex2ch(rU8, buff);
 80033f6:	7dfb      	ldrb	r3, [r7, #23]
 80033f8:	1d3a      	adds	r2, r7, #4
 80033fa:	4611      	mov	r1, r2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fb7b 	bl	8002af8 <hex2ch>
			HAL_UART_Transmit(&huart1, (uint8_t*)"GN", 2, 100);
 8003402:	2364      	movs	r3, #100	; 0x64
 8003404:	2202      	movs	r2, #2
 8003406:	4977      	ldr	r1, [pc, #476]	; (80035e4 <handleGetFunc+0x2a0>)
 8003408:	4874      	ldr	r0, [pc, #464]	; (80035dc <handleGetFunc+0x298>)
 800340a:	f006 fbe4 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)buff, 2, 100);
 800340e:	1d39      	adds	r1, r7, #4
 8003410:	2364      	movs	r3, #100	; 0x64
 8003412:	2202      	movs	r2, #2
 8003414:	4871      	ldr	r0, [pc, #452]	; (80035dc <handleGetFunc+0x298>)
 8003416:	f006 fbde 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 800341a:	2364      	movs	r3, #100	; 0x64
 800341c:	2202      	movs	r2, #2
 800341e:	4970      	ldr	r1, [pc, #448]	; (80035e0 <handleGetFunc+0x29c>)
 8003420:	486e      	ldr	r0, [pc, #440]	; (80035dc <handleGetFunc+0x298>)
 8003422:	f006 fbd8 	bl	8009bd6 <HAL_UART_Transmit>
			break;
 8003426:	e14f      	b.n	80036c8 <handleGetFunc+0x384>

		case 'C':
			ReadFlash2Buff( FlashDataPosTab[CHANNEL].pos, &rU8, FlashDataPosTab[CHANNEL].size,0);
 8003428:	2302      	movs	r3, #2
 800342a:	b298      	uxth	r0, r3
 800342c:	2201      	movs	r2, #1
 800342e:	f107 0117 	add.w	r1, r7, #23
 8003432:	2300      	movs	r3, #0
 8003434:	f7ff fbe0 	bl	8002bf8 <ReadFlash2Buff>
			hex2ch(rU8, buff);
 8003438:	7dfb      	ldrb	r3, [r7, #23]
 800343a:	1d3a      	adds	r2, r7, #4
 800343c:	4611      	mov	r1, r2
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fb5a 	bl	8002af8 <hex2ch>
			HAL_UART_Transmit(&huart1, (uint8_t*)"GC", 2, 100);
 8003444:	2364      	movs	r3, #100	; 0x64
 8003446:	2202      	movs	r2, #2
 8003448:	4967      	ldr	r1, [pc, #412]	; (80035e8 <handleGetFunc+0x2a4>)
 800344a:	4864      	ldr	r0, [pc, #400]	; (80035dc <handleGetFunc+0x298>)
 800344c:	f006 fbc3 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)buff, 2, 100);
 8003450:	1d39      	adds	r1, r7, #4
 8003452:	2364      	movs	r3, #100	; 0x64
 8003454:	2202      	movs	r2, #2
 8003456:	4861      	ldr	r0, [pc, #388]	; (80035dc <handleGetFunc+0x298>)
 8003458:	f006 fbbd 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 800345c:	2364      	movs	r3, #100	; 0x64
 800345e:	2202      	movs	r2, #2
 8003460:	495f      	ldr	r1, [pc, #380]	; (80035e0 <handleGetFunc+0x29c>)
 8003462:	485e      	ldr	r0, [pc, #376]	; (80035dc <handleGetFunc+0x298>)
 8003464:	f006 fbb7 	bl	8009bd6 <HAL_UART_Transmit>
			break;
 8003468:	e12e      	b.n	80036c8 <handleGetFunc+0x384>

		case 'L':
			ReadFlash2Buff( FlashDataPosTab[DBG].pos, &rU8, FlashDataPosTab[DBG].size,0);
 800346a:	2308      	movs	r3, #8
 800346c:	b298      	uxth	r0, r3
 800346e:	2201      	movs	r2, #1
 8003470:	f107 0117 	add.w	r1, r7, #23
 8003474:	2300      	movs	r3, #0
 8003476:	f7ff fbbf 	bl	8002bf8 <ReadFlash2Buff>
			hex2ch(rU8, buff);
 800347a:	7dfb      	ldrb	r3, [r7, #23]
 800347c:	1d3a      	adds	r2, r7, #4
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fb39 	bl	8002af8 <hex2ch>
			HAL_UART_Transmit(&huart1, (uint8_t*)"GL", 2, 100);
 8003486:	2364      	movs	r3, #100	; 0x64
 8003488:	2202      	movs	r2, #2
 800348a:	4958      	ldr	r1, [pc, #352]	; (80035ec <handleGetFunc+0x2a8>)
 800348c:	4853      	ldr	r0, [pc, #332]	; (80035dc <handleGetFunc+0x298>)
 800348e:	f006 fba2 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)buff, 2, 100);
 8003492:	1d39      	adds	r1, r7, #4
 8003494:	2364      	movs	r3, #100	; 0x64
 8003496:	2202      	movs	r2, #2
 8003498:	4850      	ldr	r0, [pc, #320]	; (80035dc <handleGetFunc+0x298>)
 800349a:	f006 fb9c 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 800349e:	2364      	movs	r3, #100	; 0x64
 80034a0:	2202      	movs	r2, #2
 80034a2:	494f      	ldr	r1, [pc, #316]	; (80035e0 <handleGetFunc+0x29c>)
 80034a4:	484d      	ldr	r0, [pc, #308]	; (80035dc <handleGetFunc+0x298>)
 80034a6:	f006 fb96 	bl	8009bd6 <HAL_UART_Transmit>
			break;
 80034aa:	e10d      	b.n	80036c8 <handleGetFunc+0x384>

		case 'P':
			ReadFlash2Buff( FlashDataPosTab[TX_POWER].pos, &rU8, FlashDataPosTab[TX_POWER].size,0);
 80034ac:	2303      	movs	r3, #3
 80034ae:	b298      	uxth	r0, r3
 80034b0:	2201      	movs	r2, #1
 80034b2:	f107 0117 	add.w	r1, r7, #23
 80034b6:	2300      	movs	r3, #0
 80034b8:	f7ff fb9e 	bl	8002bf8 <ReadFlash2Buff>
			hex2ch(rU8, buff);
 80034bc:	7dfb      	ldrb	r3, [r7, #23]
 80034be:	1d3a      	adds	r2, r7, #4
 80034c0:	4611      	mov	r1, r2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fb18 	bl	8002af8 <hex2ch>
			HAL_UART_Transmit(&huart1, (uint8_t*)"GP", 2, 100);
 80034c8:	2364      	movs	r3, #100	; 0x64
 80034ca:	2202      	movs	r2, #2
 80034cc:	4948      	ldr	r1, [pc, #288]	; (80035f0 <handleGetFunc+0x2ac>)
 80034ce:	4843      	ldr	r0, [pc, #268]	; (80035dc <handleGetFunc+0x298>)
 80034d0:	f006 fb81 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)buff, 2, 100);
 80034d4:	1d39      	adds	r1, r7, #4
 80034d6:	2364      	movs	r3, #100	; 0x64
 80034d8:	2202      	movs	r2, #2
 80034da:	4840      	ldr	r0, [pc, #256]	; (80035dc <handleGetFunc+0x298>)
 80034dc:	f006 fb7b 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 80034e0:	2364      	movs	r3, #100	; 0x64
 80034e2:	2202      	movs	r2, #2
 80034e4:	493e      	ldr	r1, [pc, #248]	; (80035e0 <handleGetFunc+0x29c>)
 80034e6:	483d      	ldr	r0, [pc, #244]	; (80035dc <handleGetFunc+0x298>)
 80034e8:	f006 fb75 	bl	8009bd6 <HAL_UART_Transmit>
			break;
 80034ec:	e0ec      	b.n	80036c8 <handleGetFunc+0x384>

		case 'T':
			ReadFlash2Buff( FlashDataPosTab[TX_TIME].pos, &rU8, FlashDataPosTab[TX_TIME].size,0);
 80034ee:	2304      	movs	r3, #4
 80034f0:	b298      	uxth	r0, r3
 80034f2:	2201      	movs	r2, #1
 80034f4:	f107 0117 	add.w	r1, r7, #23
 80034f8:	2300      	movs	r3, #0
 80034fa:	f7ff fb7d 	bl	8002bf8 <ReadFlash2Buff>
			hex2ch(rU8, buff);
 80034fe:	7dfb      	ldrb	r3, [r7, #23]
 8003500:	1d3a      	adds	r2, r7, #4
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff faf7 	bl	8002af8 <hex2ch>
			HAL_UART_Transmit(&huart1, (uint8_t*)"GT", 2, 100);
 800350a:	2364      	movs	r3, #100	; 0x64
 800350c:	2202      	movs	r2, #2
 800350e:	4939      	ldr	r1, [pc, #228]	; (80035f4 <handleGetFunc+0x2b0>)
 8003510:	4832      	ldr	r0, [pc, #200]	; (80035dc <handleGetFunc+0x298>)
 8003512:	f006 fb60 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)buff, 2, 100);
 8003516:	1d39      	adds	r1, r7, #4
 8003518:	2364      	movs	r3, #100	; 0x64
 800351a:	2202      	movs	r2, #2
 800351c:	482f      	ldr	r0, [pc, #188]	; (80035dc <handleGetFunc+0x298>)
 800351e:	f006 fb5a 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 8003522:	2364      	movs	r3, #100	; 0x64
 8003524:	2202      	movs	r2, #2
 8003526:	492e      	ldr	r1, [pc, #184]	; (80035e0 <handleGetFunc+0x29c>)
 8003528:	482c      	ldr	r0, [pc, #176]	; (80035dc <handleGetFunc+0x298>)
 800352a:	f006 fb54 	bl	8009bd6 <HAL_UART_Transmit>
			break;
 800352e:	e0cb      	b.n	80036c8 <handleGetFunc+0x384>

		case 'R':
			ReadFlash2Buff( FlashDataPosTab[RF_CALIBRATION].pos, &rU8, FlashDataPosTab[RF_CALIBRATION].size,0);
 8003530:	2305      	movs	r3, #5
 8003532:	b298      	uxth	r0, r3
 8003534:	2202      	movs	r2, #2
 8003536:	f107 0117 	add.w	r1, r7, #23
 800353a:	2300      	movs	r3, #0
 800353c:	f7ff fb5c 	bl	8002bf8 <ReadFlash2Buff>
			ReadFlash2Buff( 5, (uint8_t*)&rU32, 2,0);
 8003540:	4639      	mov	r1, r7
 8003542:	2300      	movs	r3, #0
 8003544:	2202      	movs	r2, #2
 8003546:	2005      	movs	r0, #5
 8003548:	f7ff fb56 	bl	8002bf8 <ReadFlash2Buff>
			hex2ch((rU32 >> 0) & 0xFF, buff);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	1d3a      	adds	r2, r7, #4
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff facf 	bl	8002af8 <hex2ch>
			hex2ch((rU32 >> 8) & 0xFF, &buff[2]);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	0a1b      	lsrs	r3, r3, #8
 800355e:	b2da      	uxtb	r2, r3
 8003560:	1d3b      	adds	r3, r7, #4
 8003562:	3302      	adds	r3, #2
 8003564:	4619      	mov	r1, r3
 8003566:	4610      	mov	r0, r2
 8003568:	f7ff fac6 	bl	8002af8 <hex2ch>
			HAL_UART_Transmit(&huart1, (uint8_t*)"GR", 2, 100);
 800356c:	2364      	movs	r3, #100	; 0x64
 800356e:	2202      	movs	r2, #2
 8003570:	4921      	ldr	r1, [pc, #132]	; (80035f8 <handleGetFunc+0x2b4>)
 8003572:	481a      	ldr	r0, [pc, #104]	; (80035dc <handleGetFunc+0x298>)
 8003574:	f006 fb2f 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)buff, 4, 100);
 8003578:	1d39      	adds	r1, r7, #4
 800357a:	2364      	movs	r3, #100	; 0x64
 800357c:	2204      	movs	r2, #4
 800357e:	4817      	ldr	r0, [pc, #92]	; (80035dc <handleGetFunc+0x298>)
 8003580:	f006 fb29 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 8003584:	2364      	movs	r3, #100	; 0x64
 8003586:	2202      	movs	r2, #2
 8003588:	4915      	ldr	r1, [pc, #84]	; (80035e0 <handleGetFunc+0x29c>)
 800358a:	4814      	ldr	r0, [pc, #80]	; (80035dc <handleGetFunc+0x298>)
 800358c:	f006 fb23 	bl	8009bd6 <HAL_UART_Transmit>
			break;
 8003590:	e09a      	b.n	80036c8 <handleGetFunc+0x384>

		case 'J':
			ReadFlash2Buff( FlashDataPosTab[SLEEP_ON].pos, &rU8, FlashDataPosTab[SLEEP_ON].size,0);
 8003592:	2307      	movs	r3, #7
 8003594:	b298      	uxth	r0, r3
 8003596:	2201      	movs	r2, #1
 8003598:	f107 0117 	add.w	r1, r7, #23
 800359c:	2300      	movs	r3, #0
 800359e:	f7ff fb2b 	bl	8002bf8 <ReadFlash2Buff>
			hex2ch(rU8, buff);
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
 80035a4:	1d3a      	adds	r2, r7, #4
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff faa5 	bl	8002af8 <hex2ch>
			HAL_UART_Transmit(&huart1, (uint8_t*)"GJ", 2, 100);
 80035ae:	2364      	movs	r3, #100	; 0x64
 80035b0:	2202      	movs	r2, #2
 80035b2:	4912      	ldr	r1, [pc, #72]	; (80035fc <handleGetFunc+0x2b8>)
 80035b4:	4809      	ldr	r0, [pc, #36]	; (80035dc <handleGetFunc+0x298>)
 80035b6:	f006 fb0e 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)buff, 2, 100);
 80035ba:	1d39      	adds	r1, r7, #4
 80035bc:	2364      	movs	r3, #100	; 0x64
 80035be:	2202      	movs	r2, #2
 80035c0:	4806      	ldr	r0, [pc, #24]	; (80035dc <handleGetFunc+0x298>)
 80035c2:	f006 fb08 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 80035c6:	2364      	movs	r3, #100	; 0x64
 80035c8:	2202      	movs	r2, #2
 80035ca:	4905      	ldr	r1, [pc, #20]	; (80035e0 <handleGetFunc+0x29c>)
 80035cc:	4803      	ldr	r0, [pc, #12]	; (80035dc <handleGetFunc+0x298>)
 80035ce:	f006 fb02 	bl	8009bd6 <HAL_UART_Transmit>
			break;
 80035d2:	e079      	b.n	80036c8 <handleGetFunc+0x384>
 80035d4:	200005cc 	.word	0x200005cc
 80035d8:	0800f83c 	.word	0x0800f83c
 80035dc:	20000440 	.word	0x20000440
 80035e0:	0800f840 	.word	0x0800f840
 80035e4:	0800f844 	.word	0x0800f844
 80035e8:	0800f848 	.word	0x0800f848
 80035ec:	0800f84c 	.word	0x0800f84c
 80035f0:	0800f850 	.word	0x0800f850
 80035f4:	0800f854 	.word	0x0800f854
 80035f8:	0800f858 	.word	0x0800f858
 80035fc:	0800f85c 	.word	0x0800f85c

		case 'S':
			ReadFlash2Buff( 0, (uint8_t*)&rU32, 4,1);
 8003600:	4639      	mov	r1, r7
 8003602:	2301      	movs	r3, #1
 8003604:	2204      	movs	r2, #4
 8003606:	2000      	movs	r0, #0
 8003608:	f7ff faf6 	bl	8002bf8 <ReadFlash2Buff>
			hex2ch(rU32 & 0xFF, &buff[0]);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	1d3a      	adds	r2, r7, #4
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fa6f 	bl	8002af8 <hex2ch>
			hex2ch((rU32 >> 8) & 0xFF, &buff[2]);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	0a1b      	lsrs	r3, r3, #8
 800361e:	b2da      	uxtb	r2, r3
 8003620:	1d3b      	adds	r3, r7, #4
 8003622:	3302      	adds	r3, #2
 8003624:	4619      	mov	r1, r3
 8003626:	4610      	mov	r0, r2
 8003628:	f7ff fa66 	bl	8002af8 <hex2ch>
			hex2ch((rU32 >> 16) & 0xFF, &buff[4]);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	0c1b      	lsrs	r3, r3, #16
 8003630:	b2da      	uxtb	r2, r3
 8003632:	1d3b      	adds	r3, r7, #4
 8003634:	3304      	adds	r3, #4
 8003636:	4619      	mov	r1, r3
 8003638:	4610      	mov	r0, r2
 800363a:	f7ff fa5d 	bl	8002af8 <hex2ch>
			hex2ch((rU32 >> 24) & 0xFF, &buff[6]);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	0e1b      	lsrs	r3, r3, #24
 8003642:	b2da      	uxtb	r2, r3
 8003644:	1d3b      	adds	r3, r7, #4
 8003646:	3306      	adds	r3, #6
 8003648:	4619      	mov	r1, r3
 800364a:	4610      	mov	r0, r2
 800364c:	f7ff fa54 	bl	8002af8 <hex2ch>
			ReadFlash2Buff( 4, (uint8_t*)&rU32, 4,1);
 8003650:	4639      	mov	r1, r7
 8003652:	2301      	movs	r3, #1
 8003654:	2204      	movs	r2, #4
 8003656:	2004      	movs	r0, #4
 8003658:	f7ff face 	bl	8002bf8 <ReadFlash2Buff>
			hex2ch(rU32 & 0xFF, &buff[8]);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	b2da      	uxtb	r2, r3
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	3308      	adds	r3, #8
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f7ff fa46 	bl	8002af8 <hex2ch>
			hex2ch((rU32 >> 8) & 0xFF, &buff[10]);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	0a1b      	lsrs	r3, r3, #8
 8003670:	b2da      	uxtb	r2, r3
 8003672:	1d3b      	adds	r3, r7, #4
 8003674:	330a      	adds	r3, #10
 8003676:	4619      	mov	r1, r3
 8003678:	4610      	mov	r0, r2
 800367a:	f7ff fa3d 	bl	8002af8 <hex2ch>
			hex2ch((rU32 >> 16) & 0xFF, &buff[12]);
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	0c1b      	lsrs	r3, r3, #16
 8003682:	b2da      	uxtb	r2, r3
 8003684:	1d3b      	adds	r3, r7, #4
 8003686:	330c      	adds	r3, #12
 8003688:	4619      	mov	r1, r3
 800368a:	4610      	mov	r0, r2
 800368c:	f7ff fa34 	bl	8002af8 <hex2ch>
			hex2ch((rU32 >> 24) & 0xFF, &buff[14]);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	0e1b      	lsrs	r3, r3, #24
 8003694:	b2da      	uxtb	r2, r3
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	330e      	adds	r3, #14
 800369a:	4619      	mov	r1, r3
 800369c:	4610      	mov	r0, r2
 800369e:	f7ff fa2b 	bl	8002af8 <hex2ch>
		

			HAL_UART_Transmit(&huart1, (uint8_t*)"GS", 2, 100);
 80036a2:	2364      	movs	r3, #100	; 0x64
 80036a4:	2202      	movs	r2, #2
 80036a6:	490b      	ldr	r1, [pc, #44]	; (80036d4 <handleGetFunc+0x390>)
 80036a8:	480b      	ldr	r0, [pc, #44]	; (80036d8 <handleGetFunc+0x394>)
 80036aa:	f006 fa94 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)buff, 16, 100);
 80036ae:	1d39      	adds	r1, r7, #4
 80036b0:	2364      	movs	r3, #100	; 0x64
 80036b2:	2210      	movs	r2, #16
 80036b4:	4808      	ldr	r0, [pc, #32]	; (80036d8 <handleGetFunc+0x394>)
 80036b6:	f006 fa8e 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 100);
 80036ba:	2364      	movs	r3, #100	; 0x64
 80036bc:	2202      	movs	r2, #2
 80036be:	4907      	ldr	r1, [pc, #28]	; (80036dc <handleGetFunc+0x398>)
 80036c0:	4805      	ldr	r0, [pc, #20]	; (80036d8 <handleGetFunc+0x394>)
 80036c2:	f006 fa88 	bl	8009bd6 <HAL_UART_Transmit>
			break;
 80036c6:	bf00      	nop
	}
	return 0;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	0800f860 	.word	0x0800f860
 80036d8:	20000440 	.word	0x20000440
 80036dc:	0800f840 	.word	0x0800f840

080036e0 <handleUart2Pkt>:



int handleUart2Pkt()
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
	switch(cmdBuffer[0])
 80036e4:	4b36      	ldr	r3, [pc, #216]	; (80037c0 <handleUart2Pkt+0xe0>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	3b43      	subs	r3, #67	; 0x43
 80036ea:	2b10      	cmp	r3, #16
 80036ec:	d858      	bhi.n	80037a0 <handleUart2Pkt+0xc0>
 80036ee:	a201      	add	r2, pc, #4	; (adr r2, 80036f4 <handleUart2Pkt+0x14>)
 80036f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f4:	08003745 	.word	0x08003745
 80036f8:	080037af 	.word	0x080037af
 80036fc:	080037a1 	.word	0x080037a1
 8003700:	080037a1 	.word	0x080037a1
 8003704:	0800373f 	.word	0x0800373f
 8003708:	080037a1 	.word	0x080037a1
 800370c:	080037a1 	.word	0x080037a1
 8003710:	080037a1 	.word	0x080037a1
 8003714:	080037a1 	.word	0x080037a1
 8003718:	080037a1 	.word	0x080037a1
 800371c:	08003775 	.word	0x08003775
 8003720:	080037a1 	.word	0x080037a1
 8003724:	080037a1 	.word	0x080037a1
 8003728:	080037a1 	.word	0x080037a1
 800372c:	080037a1 	.word	0x080037a1
 8003730:	0800375b 	.word	0x0800375b
 8003734:	08003739 	.word	0x08003739
	{
	case 'D': // TEST
		break;
	case 'S':
		handleSetFunc();
 8003738:	f7ff fc50 	bl	8002fdc <handleSetFunc>
		break;
 800373c:	e03c      	b.n	80037b8 <handleUart2Pkt+0xd8>
	case 'G':
		handleGetFunc();
 800373e:	f7ff fe01 	bl	8003344 <handleGetFunc>
		break;
 8003742:	e039      	b.n	80037b8 <handleUart2Pkt+0xd8>
	case 'C':
		if ( cmdBuffer[1] == 'T' )
 8003744:	4b1e      	ldr	r3, [pc, #120]	; (80037c0 <handleUart2Pkt+0xe0>)
 8003746:	785b      	ldrb	r3, [r3, #1]
 8003748:	2b54      	cmp	r3, #84	; 0x54
 800374a:	d132      	bne.n	80037b2 <handleUart2Pkt+0xd2>
		{
			HAL_UART_Transmit(&huart1, (uint8_t*)"OK\r\n",4, 100);
 800374c:	2364      	movs	r3, #100	; 0x64
 800374e:	2204      	movs	r2, #4
 8003750:	491c      	ldr	r1, [pc, #112]	; (80037c4 <handleUart2Pkt+0xe4>)
 8003752:	481d      	ldr	r0, [pc, #116]	; (80037c8 <handleUart2Pkt+0xe8>)
 8003754:	f006 fa3f 	bl	8009bd6 <HAL_UART_Transmit>
		}
		break;
 8003758:	e02b      	b.n	80037b2 <handleUart2Pkt+0xd2>
		
	case 'R':
		if ( cmdBuffer[1] == 'S' )
 800375a:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <handleUart2Pkt+0xe0>)
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	2b53      	cmp	r3, #83	; 0x53
 8003760:	d129      	bne.n	80037b6 <handleUart2Pkt+0xd6>
		{
			HAL_UART_Transmit(&huart1, (uint8_t*)"OK\r\n",4, 100);
 8003762:	2364      	movs	r3, #100	; 0x64
 8003764:	2204      	movs	r2, #4
 8003766:	4917      	ldr	r1, [pc, #92]	; (80037c4 <handleUart2Pkt+0xe4>)
 8003768:	4817      	ldr	r0, [pc, #92]	; (80037c8 <handleUart2Pkt+0xe8>)
 800376a:	f006 fa34 	bl	8009bd6 <HAL_UART_Transmit>
			HAL_NVIC_SystemReset();
 800376e:	f001 fcf8 	bl	8005162 <HAL_NVIC_SystemReset>
		}
		//HAL_UART_Transmit(&huart1, "OK", 2, 100);
		
		//handleReset();
		break;
 8003772:	e020      	b.n	80037b6 <handleUart2Pkt+0xd6>

	case 'M':
          	switch(cmdBuffer[1])
 8003774:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <handleUart2Pkt+0xe0>)
 8003776:	785b      	ldrb	r3, [r3, #1]
 8003778:	2b43      	cmp	r3, #67	; 0x43
 800377a:	d002      	beq.n	8003782 <handleUart2Pkt+0xa2>
 800377c:	2b45      	cmp	r3, #69	; 0x45
 800377e:	d007      	beq.n	8003790 <handleUart2Pkt+0xb0>
                    break;
                case 'E':
                    HAL_UART_Transmit(&huart1, "ME", 2, 100);
                    break;
                }
          	break;
 8003780:	e01a      	b.n	80037b8 <handleUart2Pkt+0xd8>
                    HAL_UART_Transmit(&huart1, "MC", 2, 100);
 8003782:	2364      	movs	r3, #100	; 0x64
 8003784:	2202      	movs	r2, #2
 8003786:	4911      	ldr	r1, [pc, #68]	; (80037cc <handleUart2Pkt+0xec>)
 8003788:	480f      	ldr	r0, [pc, #60]	; (80037c8 <handleUart2Pkt+0xe8>)
 800378a:	f006 fa24 	bl	8009bd6 <HAL_UART_Transmit>
                    break;
 800378e:	e006      	b.n	800379e <handleUart2Pkt+0xbe>
                    HAL_UART_Transmit(&huart1, "ME", 2, 100);
 8003790:	2364      	movs	r3, #100	; 0x64
 8003792:	2202      	movs	r2, #2
 8003794:	490e      	ldr	r1, [pc, #56]	; (80037d0 <handleUart2Pkt+0xf0>)
 8003796:	480c      	ldr	r0, [pc, #48]	; (80037c8 <handleUart2Pkt+0xe8>)
 8003798:	f006 fa1d 	bl	8009bd6 <HAL_UART_Transmit>
                    break;
 800379c:	bf00      	nop
          	break;
 800379e:	e00b      	b.n	80037b8 <handleUart2Pkt+0xd8>

	default:
		HAL_UART_Transmit(&huart1, (uint8_t*)"ERR\r\n", 5, 100);
 80037a0:	2364      	movs	r3, #100	; 0x64
 80037a2:	2205      	movs	r2, #5
 80037a4:	490b      	ldr	r1, [pc, #44]	; (80037d4 <handleUart2Pkt+0xf4>)
 80037a6:	4808      	ldr	r0, [pc, #32]	; (80037c8 <handleUart2Pkt+0xe8>)
 80037a8:	f006 fa15 	bl	8009bd6 <HAL_UART_Transmit>
		break;
 80037ac:	e004      	b.n	80037b8 <handleUart2Pkt+0xd8>
		break;
 80037ae:	bf00      	nop
 80037b0:	e002      	b.n	80037b8 <handleUart2Pkt+0xd8>
		break;
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <handleUart2Pkt+0xd8>
		break;
 80037b6:	bf00      	nop
	}

	return 0;
 80037b8:	2300      	movs	r3, #0
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	200005cc 	.word	0x200005cc
 80037c4:	0800f834 	.word	0x0800f834
 80037c8:	20000440 	.word	0x20000440
 80037cc:	0800f864 	.word	0x0800f864
 80037d0:	0800f868 	.word	0x0800f868
 80037d4:	0800f82c 	.word	0x0800f82c

080037d8 <uart2_receive_func>:

void uart2_receive_func()
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
 	if (uart_flag == 1)
 80037dc:	4b07      	ldr	r3, [pc, #28]	; (80037fc <uart2_receive_func+0x24>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d109      	bne.n	80037f8 <uart2_receive_func+0x20>
	{
		if(recvUartPkt() > 0)
 80037e4:	f7ff f9bc 	bl	8002b60 <recvUartPkt>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	dd04      	ble.n	80037f8 <uart2_receive_func+0x20>
		{
			handleUart2Pkt();
 80037ee:	f7ff ff77 	bl	80036e0 <handleUart2Pkt>
			uart_flag = 0;
 80037f2:	4b02      	ldr	r3, [pc, #8]	; (80037fc <uart2_receive_func+0x24>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80037f8:	bf00      	nop
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000597 	.word	0x20000597

08003800 <update_index_atomic>:
//
//*****************************************************************************
static void
update_index_atomic(uint32_t volatile *pui32Val, uint32_t ui32Delta,
                    uint32_t ui32Size)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
#endif

    //
    // Update the variable value.
    //
    *pui32Val += ui32Delta;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	441a      	add	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	601a      	str	r2, [r3, #0]
    // Correct for wrap.  We use a loop here since we don't want to use a
    // modulus operation with interrupts off but we don't want to fail in
    // case ui32Delta is greater than ui32Size (which is extremely unlikely
    // but...)
    //
    while (*pui32Val >= ui32Size) {
 8003818:	e005      	b.n	8003826 <update_index_atomic+0x26>
        *pui32Val -= ui32Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	1ad2      	subs	r2, r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	601a      	str	r2, [r3, #0]
    while (*pui32Val >= ui32Size) {
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	429a      	cmp	r2, r3
 800382e:	d9f4      	bls.n	800381a <update_index_atomic+0x1a>
    // Restore the interrupt state
    //
#if __USE_INTERRUPT
    INT_Enable();
#endif
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <ringbuf_used>:
//! \return Returns the number of bytes stored in the ring buffer.
//
//*****************************************************************************
uint32_t
ringbuf_used(ringbuffer_t *psRingBuf)
{
 800383e:	b480      	push	{r7}
 8003840:	b085      	sub	sp, #20
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
    __ASSERT(psRingBuf != NULL);

    //
    // Copy the Read/Write indices for calculation.
    //
    ui32Write = psRingBuf->ui32WriteIndex;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	60fb      	str	r3, [r7, #12]
    ui32Read = psRingBuf->ui32ReadIndex;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	60bb      	str	r3, [r7, #8]

    //
    // Return the number of bytes contained in the ring buffer.
    //
    return ((ui32Write >= ui32Read) ? (ui32Write - ui32Read) :
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	429a      	cmp	r2, r3
 8003858:	d303      	bcc.n	8003862 <ringbuf_used+0x24>
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	e005      	b.n	800386e <ringbuf_used+0x30>
            (psRingBuf->ui32Size - (ui32Read - ui32Write)));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68f9      	ldr	r1, [r7, #12]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	1acb      	subs	r3, r1, r3
    return ((ui32Write >= ui32Read) ? (ui32Write - ui32Read) :
 800386c:	4413      	add	r3, r2
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <ringbuf_free>:
//! \return Returns the number of bytes available in the ring buffer.
//
//*****************************************************************************
uint32_t
ringbuf_free(ringbuffer_t *psRingBuf)
{
 800387a:	b590      	push	{r4, r7, lr}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
    __ASSERT(psRingBuf != NULL);

    //
    // Return the number of bytes available in the ring buffer.
    //
    return ((psRingBuf->ui32Size - 1) - ringbuf_used(psRingBuf));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681c      	ldr	r4, [r3, #0]
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff ffd9 	bl	800383e <ringbuf_used>
 800388c:	4603      	mov	r3, r0
 800388e:	1ae3      	subs	r3, r4, r3
 8003890:	3b01      	subs	r3, #1
}
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	bd90      	pop	{r4, r7, pc}

0800389a <ringbuf_readone>:
//! \return The byte read from the ring buffer.
//
//*****************************************************************************
uint8_t
ringbuf_readone(ringbuffer_t *psRingBuf)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
    __ASSERT(ringbuf_used(psRingBuf) != 0);

    //
    // Write the data byte.
    //
    ui8Temp = psRingBuf->pui8Buf[psRingBuf->ui32ReadIndex];
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68da      	ldr	r2, [r3, #12]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	4413      	add	r3, r2
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	73fb      	strb	r3, [r7, #15]

    //
    // Increment the read index.
    //
    update_index_atomic(&psRingBuf->ui32ReadIndex, 1, psRingBuf->ui32Size);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f103 0008 	add.w	r0, r3, #8
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	2101      	movs	r1, #1
 80038be:	f7ff ff9f 	bl	8003800 <update_index_atomic>

    //
    // Return the character read.
    //
    return (ui8Temp);
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <ringbuf_writeone>:
//! \return None.
//
//*****************************************************************************
void
ringbuf_writeone(ringbuffer_t *psRingBuf, uint8_t ui8Data)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	70fb      	strb	r3, [r7, #3]
    //
    // Verify that space is available in the buffer.
    //
    __ASSERT(ringbuf_free(psRingBuf) != 0);

	if(ringbuf_free(psRingBuf) == 0)
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7ff ffce 	bl	800387a <ringbuf_free>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00f      	beq.n	8003904 <ringbuf_writeone+0x38>
	  return;
    //
    // Write the data byte.
    //
    psRingBuf->pui8Buf[psRingBuf->ui32WriteIndex] = ui8Data;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	701a      	strb	r2, [r3, #0]

    //
    // Increment the write index.
    //
    update_index_atomic(&psRingBuf->ui32WriteIndex, 1, psRingBuf->ui32Size);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	1d18      	adds	r0, r3, #4
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	2101      	movs	r1, #1
 80038fe:	f7ff ff7f 	bl	8003800 <update_index_atomic>
 8003902:	e000      	b.n	8003906 <ringbuf_writeone+0x3a>
	  return;
 8003904:	bf00      	nop
}
 8003906:	3708      	adds	r7, #8
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <ringbuf_init>:
//
//*****************************************************************************
void
ringbuf_init(ringbuffer_t *psRingBuf, uint8_t *pui8Buf,
             uint32_t ui32Size)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
    __ASSERT(ui32Size != 0);

    //
    // Initialize the ring buffer object.
    //
    psRingBuf->ui32Size = ui32Size;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	601a      	str	r2, [r3, #0]
    psRingBuf->pui8Buf = pui8Buf;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	60da      	str	r2, [r3, #12]
    psRingBuf->ui32WriteIndex = psRingBuf->ui32ReadIndex = 0;
 8003924:	2300      	movs	r3, #0
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	6093      	str	r3, [r2, #8]
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	6053      	str	r3, [r2, #4]
}
 800392e:	bf00      	nop
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <gpioAllAnalogSet>:
uint8_t sleep_min;
uint8_t sleep_sec;


void gpioAllAnalogSet()
{
 800393a:	b480      	push	{r7}
 800393c:	b087      	sub	sp, #28
 800393e:	af00      	add	r7, sp, #0
//	GPIO_InitStructure.Pin = GPIO_PIN_8;
//	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
//	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);

}
 8003940:	bf00      	nop
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <SleepModeEntryFunction>:




void SleepModeEntryFunction(uint8_t min, uint8_t sec)  // sleep
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	460a      	mov	r2, r1
 8003956:	71fb      	strb	r3, [r7, #7]
 8003958:	4613      	mov	r3, r2
 800395a:	71bb      	strb	r3, [r7, #6]
	//HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
//	uint16_t sleepTime;
//	if ( sec  <= 0 )
//		return ;
	if ( min == 0 && sec ==0)
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d102      	bne.n	8003968 <SleepModeEntryFunction+0x1c>
 8003962:	79bb      	ldrb	r3, [r7, #6]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d030      	beq.n	80039ca <SleepModeEntryFunction+0x7e>
		return ;

	timeSec = (min * 60) + sec;
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	b29b      	uxth	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	0112      	lsls	r2, r2, #4
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	b29a      	uxth	r2, r3
 8003976:	79bb      	ldrb	r3, [r7, #6]
 8003978:	b29b      	uxth	r3, r3
 800397a:	4413      	add	r3, r2
 800397c:	81fb      	strh	r3, [r7, #14]


		/* Enable PWR clock enable */
		//__HAL_RCC_PWR_CLK_ENABLE();

		HAL_PWREx_DisableLowPowerRunMode();
 800397e:	f002 fb33 	bl	8005fe8 <HAL_PWREx_DisableLowPowerRunMode>

		/* Suspend tick interrupt */
	    HAL_SuspendTick();
 8003982:	f001 f87b 	bl	8004a7c <HAL_SuspendTick>

		/* Clear the WU FLAG */
		//__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
		__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003986:	4b13      	ldr	r3, [pc, #76]	; (80039d4 <SleepModeEntryFunction+0x88>)
 8003988:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800398c:	615a      	str	r2, [r3, #20]
		/* clear the RTC Wake UP (WU) flag */
		__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <SleepModeEntryFunction+0x8c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <SleepModeEntryFunction+0x8c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800399e:	60da      	str	r2, [r3, #12]

		HAL_SuspendTick();
 80039a0:	f001 f86c 	bl	8004a7c <HAL_SuspendTick>

		/** Deactivate the RTC wakeup  **/

		//sleepTime = (uint16_t)((float)sec / RTC_32768_TICK);
		/* Finally enter the standby mode */
		if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, timeSec/*0x0FA0 */, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80039a4:	89fb      	ldrh	r3, [r7, #14]
 80039a6:	2204      	movs	r2, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	480b      	ldr	r0, [pc, #44]	; (80039d8 <SleepModeEntryFunction+0x8c>)
 80039ac:	f003 ff4e 	bl	800784c <HAL_RTCEx_SetWakeUpTimer_IT>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <SleepModeEntryFunction+0x6e>
		{
		  Error_Handler();
 80039b6:	f7fd fd4f 	bl	8001458 <Error_Handler>
		//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET); // LED OFF

		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);  // 3v volt enable

		// 1)
		gpioAllAnalogSet();
 80039ba:	f7ff ffbe 	bl	800393a <gpioAllAnalogSet>
		sleep_deinit();
 80039be:	f000 f847 	bl	8003a50 <sleep_deinit>
		#ifdef STOP2_MODE

		//	LpClock_Config();
		//	HAL_LPTIM_Counter_Stop(&hlptim1);
		//	HAL_LPTIM_Counter_Start(&hlptim1,0xFFFF);
		HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80039c2:	2001      	movs	r0, #1
 80039c4:	f002 fb48 	bl	8006058 <HAL_PWREx_EnterSTOP2Mode>
 80039c8:	e000      	b.n	80039cc <SleepModeEntryFunction+0x80>
		return ;
 80039ca:	bf00      	nop
		//HAL_PWREx_EnterSTOP1Mode(PWR_STOPENTRY_WFI);
		#endif
#endif

}
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40010400 	.word	0x40010400
 80039d8:	200002d0 	.word	0x200002d0

080039dc <HAL_RTCEx_WakeUpTimerEventCallback>:
uint8_t initialize;

uint32_t m_LpTimerCnt;

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) // wake up
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b0a8      	sub	sp, #160	; 0xa0
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	60da      	str	r2, [r3, #12]
 80039f2:	611a      	str	r2, [r3, #16]
	uint16_t tempPort;
	char bvuf[128] = {0x00,};
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	f107 0310 	add.w	r3, r7, #16
 80039fc:	227c      	movs	r2, #124	; 0x7c
 80039fe:	2100      	movs	r1, #0
 8003a00:	4618      	mov	r0, r3
 8003a02:	f007 f9bd 	bl	800ad80 <memset>
	


	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)   // rtc 에서 wake up 했을 구문 빠짐
 8003a06:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <HAL_RTCEx_WakeUpTimerEventCallback+0x68>)
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_RTCEx_WakeUpTimerEventCallback+0x3e>
	{
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8003a12:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_RTCEx_WakeUpTimerEventCallback+0x68>)
 8003a14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a18:	619a      	str	r2, [r3, #24]
	}


	/** Disable the WWAKEUP PIN **/
	HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	f002 fa6a 	bl	8005ef4 <HAL_PWR_DisableWakeUpPin>

	HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f003 ffa7 	bl	8007974 <HAL_RTCEx_DeactivateWakeUpTimer>

	SystemClock_Config();
 8003a26:	f7fd fcc3 	bl	80013b0 <SystemClock_Config>

	HAL_ResumeTick();
 8003a2a:	f001 f837 	bl	8004a9c <HAL_ResumeTick>

	sleep_init =1; // test
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_RTCEx_WakeUpTimerEventCallback+0x6c>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	701a      	strb	r2, [r3, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


#endif
	initialize = 0;
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <HAL_RTCEx_WakeUpTimerEventCallback+0x70>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]

}
 8003a3a:	bf00      	nop
 8003a3c:	37a0      	adds	r7, #160	; 0xa0
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40007000 	.word	0x40007000
 8003a48:	20000614 	.word	0x20000614
 8003a4c:	20000616 	.word	0x20000616

08003a50 <sleep_deinit>:
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc2;

void sleep_deinit()
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure = {0};
 8003a56:	463b      	mov	r3, r7
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	60da      	str	r2, [r3, #12]
 8003a62:	611a      	str	r2, [r3, #16]
	uint16_t temp_pin;
#if 1  // cc1120 deinit
    uint8_t rc;
    CC1120_SpiCmdStrobe(CC112X_SIDLE);
 8003a64:	2036      	movs	r0, #54	; 0x36
 8003a66:	f7fe fb13 	bl	8002090 <CC1120_SpiCmdStrobe>
    do
    {
        rc = CC1120_SpiCmdStrobe(CC112X_SNOP);
 8003a6a:	203d      	movs	r0, #61	; 0x3d
 8003a6c:	f7fe fb10 	bl	8002090 <CC1120_SpiCmdStrobe>
 8003a70:	4603      	mov	r3, r0
 8003a72:	75fb      	strb	r3, [r7, #23]
    //__no_operation();
    } while ((rc & 0xF0) != 0x00);
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f5      	bne.n	8003a6a <sleep_deinit+0x1a>

    CC1120_SpiCmdStrobe(CC112X_SPWD);
 8003a7e:	2039      	movs	r0, #57	; 0x39
 8003a80:	f7fe fb06 	bl	8002090 <CC1120_SpiCmdStrobe>
   __HAL_RCC_TIM15_CLK_DISABLE();

#endif
   //HAL_SuspendTick();
   /* GPIO */
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 8003a84:	4b75      	ldr	r3, [pc, #468]	; (8003c5c <sleep_deinit+0x20c>)
 8003a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a8a:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8003a8c:	4b73      	ldr	r3, [pc, #460]	; (8003c5c <sleep_deinit+0x20c>)
 8003a8e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a92:	615a      	str	r2, [r3, #20]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8003a94:	4b71      	ldr	r3, [pc, #452]	; (8003c5c <sleep_deinit+0x20c>)
 8003a96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a9a:	615a      	str	r2, [r3, #20]


    HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8003a9c:	2017      	movs	r0, #23
 8003a9e:	f001 fb52 	bl	8005146 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8003aa2:	2028      	movs	r0, #40	; 0x28
 8003aa4:	f001 fb4f 	bl	8005146 <HAL_NVIC_DisableIRQ>

   /*TIM 4*/ // USE CC1120
   __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8003aa8:	4b6d      	ldr	r3, [pc, #436]	; (8003c60 <sleep_deinit+0x210>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	4b6c      	ldr	r3, [pc, #432]	; (8003c60 <sleep_deinit+0x210>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0202 	bic.w	r2, r2, #2
 8003ab6:	60da      	str	r2, [r3, #12]
   __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
 8003ab8:	4b69      	ldr	r3, [pc, #420]	; (8003c60 <sleep_deinit+0x210>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	4b68      	ldr	r3, [pc, #416]	; (8003c60 <sleep_deinit+0x210>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0204 	bic.w	r2, r2, #4
 8003ac6:	60da      	str	r2, [r3, #12]
   __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
 8003ac8:	4b65      	ldr	r3, [pc, #404]	; (8003c60 <sleep_deinit+0x210>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	4b64      	ldr	r3, [pc, #400]	; (8003c60 <sleep_deinit+0x210>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0208 	bic.w	r2, r2, #8
 8003ad6:	60da      	str	r2, [r3, #12]

    HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 8003ad8:	2100      	movs	r1, #0
 8003ada:	4861      	ldr	r0, [pc, #388]	; (8003c60 <sleep_deinit+0x210>)
 8003adc:	f004 ffb8 	bl	8008a50 <HAL_TIM_OC_Stop_IT>
    HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_2);
 8003ae0:	2104      	movs	r1, #4
 8003ae2:	485f      	ldr	r0, [pc, #380]	; (8003c60 <sleep_deinit+0x210>)
 8003ae4:	f004 ffb4 	bl	8008a50 <HAL_TIM_OC_Stop_IT>
    HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_3);
 8003ae8:	2108      	movs	r1, #8
 8003aea:	485d      	ldr	r0, [pc, #372]	; (8003c60 <sleep_deinit+0x210>)
 8003aec:	f004 ffb0 	bl	8008a50 <HAL_TIM_OC_Stop_IT>
    HAL_TIM_Base_Stop(&htim4);
 8003af0:	485b      	ldr	r0, [pc, #364]	; (8003c60 <sleep_deinit+0x210>)
 8003af2:	f004 fe8f 	bl	8008814 <HAL_TIM_Base_Stop>


    HAL_NVIC_DisableIRQ(TIM4_IRQn);
 8003af6:	201e      	movs	r0, #30
 8003af8:	f001 fb25 	bl	8005146 <HAL_NVIC_DisableIRQ>
    HAL_TIM_OC_DeInit(&htim4);
 8003afc:	4858      	ldr	r0, [pc, #352]	; (8003c60 <sleep_deinit+0x210>)
 8003afe:	f004 ff36 	bl	800896e <HAL_TIM_OC_DeInit>
    HAL_TIM_Base_DeInit(&htim4);
 8003b02:	4857      	ldr	r0, [pc, #348]	; (8003c60 <sleep_deinit+0x210>)
 8003b04:	f004 fdc1 	bl	800868a <HAL_TIM_Base_DeInit>
    __HAL_RCC_TIM4_CLK_DISABLE();
 8003b08:	4b56      	ldr	r3, [pc, #344]	; (8003c64 <sleep_deinit+0x214>)
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0c:	4a55      	ldr	r2, [pc, #340]	; (8003c64 <sleep_deinit+0x214>)
 8003b0e:	f023 0304 	bic.w	r3, r3, #4
 8003b12:	6593      	str	r3, [r2, #88]	; 0x58

   /* UART1*/
   HAL_GPIO_DeInit(GPIOA,GPIO_PIN_9);
 8003b14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b1c:	f002 f89e 	bl	8005c5c <HAL_GPIO_DeInit>
   HAL_GPIO_DeInit(GPIOA,GPIO_PIN_10);
 8003b20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b28:	f002 f898 	bl	8005c5c <HAL_GPIO_DeInit>
   HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003b2c:	2025      	movs	r0, #37	; 0x25
 8003b2e:	f001 fb0a 	bl	8005146 <HAL_NVIC_DisableIRQ>
   __HAL_RCC_USART1_CLK_DISABLE();
 8003b32:	4b4c      	ldr	r3, [pc, #304]	; (8003c64 <sleep_deinit+0x214>)
 8003b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b36:	4a4b      	ldr	r2, [pc, #300]	; (8003c64 <sleep_deinit+0x214>)
 8003b38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b3c:	6613      	str	r3, [r2, #96]	; 0x60
   HAL_UART_DeInit(&huart1);
 8003b3e:	484a      	ldr	r0, [pc, #296]	; (8003c68 <sleep_deinit+0x218>)
 8003b40:	f006 f810 	bl	8009b64 <HAL_UART_DeInit>
    

    /* UART3*/
   HAL_GPIO_DeInit(GPIOA,GPIO_PIN_4);
 8003b44:	2110      	movs	r1, #16
 8003b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b4a:	f002 f887 	bl	8005c5c <HAL_GPIO_DeInit>
   HAL_GPIO_DeInit(GPIOA,GPIO_PIN_5);
 8003b4e:	2120      	movs	r1, #32
 8003b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b54:	f002 f882 	bl	8005c5c <HAL_GPIO_DeInit>
   HAL_NVIC_DisableIRQ(USART3_IRQn);
 8003b58:	2027      	movs	r0, #39	; 0x27
 8003b5a:	f001 faf4 	bl	8005146 <HAL_NVIC_DisableIRQ>
   __HAL_RCC_USART3_CLK_DISABLE();
 8003b5e:	4b41      	ldr	r3, [pc, #260]	; (8003c64 <sleep_deinit+0x214>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	4a40      	ldr	r2, [pc, #256]	; (8003c64 <sleep_deinit+0x214>)
 8003b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b68:	6593      	str	r3, [r2, #88]	; 0x58
   HAL_UART_DeInit(&huart3);
 8003b6a:	4840      	ldr	r0, [pc, #256]	; (8003c6c <sleep_deinit+0x21c>)
 8003b6c:	f005 fffa 	bl	8009b64 <HAL_UART_DeInit>
   


   /* SPI */
    //HAL_SPI_MspDeInit(&hspi1);
    HAL_GPIO_DeInit(GPIOA,GPIO_PIN_5);
 8003b70:	2120      	movs	r1, #32
 8003b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b76:	f002 f871 	bl	8005c5c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA,GPIO_PIN_6);
 8003b7a:	2140      	movs	r1, #64	; 0x40
 8003b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b80:	f002 f86c 	bl	8005c5c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA,GPIO_PIN_7);
 8003b84:	2180      	movs	r1, #128	; 0x80
 8003b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b8a:	f002 f867 	bl	8005c5c <HAL_GPIO_DeInit>
    HAL_SPI_DeInit(&hspi1);
 8003b8e:	4838      	ldr	r0, [pc, #224]	; (8003c70 <sleep_deinit+0x220>)
 8003b90:	f004 f817 	bl	8007bc2 <HAL_SPI_DeInit>
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003b94:	4b33      	ldr	r3, [pc, #204]	; (8003c64 <sleep_deinit+0x214>)
 8003b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b98:	4a32      	ldr	r2, [pc, #200]	; (8003c64 <sleep_deinit+0x214>)
 8003b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b9e:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_SPI_MspDeInit(&hspi1);
 8003ba0:	4833      	ldr	r0, [pc, #204]	; (8003c70 <sleep_deinit+0x220>)
 8003ba2:	f7fd fd41 	bl	8001628 <HAL_SPI_MspDeInit>
    HAL_GPIO_DeInit(GPIOC,GPIO_PIN_9);
    HAL_GPIO_DeInit(GPIOC,GPIO_PIN_10);
    HAL_GPIO_DeInit(GPIOC,GPIO_PIN_11);
#endif 
   #if 1
    temp_pin = GPIO_PIN_4 | GPIO_PIN_8 | GPIO_PIN_12 | GPIO_PIN_15 ;
 8003ba6:	f249 1310 	movw	r3, #37136	; 0x9110
 8003baa:	82bb      	strh	r3, [r7, #20]
    //temp_pin = GPIO_PIN_4 | GPIO_PIN_8 | GPIO_PIN_12 | GPIO_PIN_15;
    GPIO_InitStructure.Pin = temp_pin;
 8003bac:	8abb      	ldrh	r3, [r7, #20]
 8003bae:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003bb8:	463b      	mov	r3, r7
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bc0:	f001 fea2 	bl	8005908 <HAL_GPIO_Init>

	temp_pin = GPIO_PIN_All;
 8003bc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bc8:	82bb      	strh	r3, [r7, #20]
	temp_pin &= ~GPIO_PIN_8 ; // 3v
 8003bca:	8abb      	ldrh	r3, [r7, #20]
 8003bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd0:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.Pin = temp_pin;
 8003bd2:	8abb      	ldrh	r3, [r7, #20]
 8003bd4:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003bde:	463b      	mov	r3, r7
 8003be0:	4619      	mov	r1, r3
 8003be2:	4824      	ldr	r0, [pc, #144]	; (8003c74 <sleep_deinit+0x224>)
 8003be4:	f001 fe90 	bl	8005908 <HAL_GPIO_Init>


	temp_pin = GPIO_PIN_All;
 8003be8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bec:	82bb      	strh	r3, [r7, #20]
	temp_pin &= ~GPIO_PIN_8 ; // 5v
 8003bee:	8abb      	ldrh	r3, [r7, #20]
 8003bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf4:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.Pin = temp_pin;
 8003bf6:	8abb      	ldrh	r3, [r7, #20]
 8003bf8:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003c02:	463b      	mov	r3, r7
 8003c04:	4619      	mov	r1, r3
 8003c06:	481c      	ldr	r0, [pc, #112]	; (8003c78 <sleep_deinit+0x228>)
 8003c08:	f001 fe7e 	bl	8005908 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);  // 3v volt disable
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c12:	4818      	ldr	r0, [pc, #96]	; (8003c74 <sleep_deinit+0x224>)
 8003c14:	f002 f92e 	bl	8005e74 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);  // 5v volt disable
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c1e:	4816      	ldr	r0, [pc, #88]	; (8003c78 <sleep_deinit+0x228>)
 8003c20:	f002 f928 	bl	8005e74 <HAL_GPIO_WritePin>

    #endif 

    __HAL_RCC_GPIOA_CLK_DISABLE();
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <sleep_deinit+0x214>)
 8003c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c28:	4a0e      	ldr	r2, [pc, #56]	; (8003c64 <sleep_deinit+0x214>)
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_GPIOB_CLK_DISABLE();
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <sleep_deinit+0x214>)
 8003c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c34:	4a0b      	ldr	r2, [pc, #44]	; (8003c64 <sleep_deinit+0x214>)
 8003c36:	f023 0302 	bic.w	r3, r3, #2
 8003c3a:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_GPIOC_CLK_DISABLE();
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <sleep_deinit+0x214>)
 8003c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c40:	4a08      	ldr	r2, [pc, #32]	; (8003c64 <sleep_deinit+0x214>)
 8003c42:	f023 0304 	bic.w	r3, r3, #4
 8003c46:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_DISABLE();
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <sleep_deinit+0x214>)
 8003c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4c:	4a05      	ldr	r2, [pc, #20]	; (8003c64 <sleep_deinit+0x214>)
 8003c4e:	f023 0308 	bic.w	r3, r3, #8
 8003c52:	64d3      	str	r3, [r2, #76]	; 0x4c
//	GPIO_InitStructure.Pin = GPIO_PIN_8;
//	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
//	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
//	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);

}
 8003c54:	bf00      	nop
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40010400 	.word	0x40010400
 8003c60:	2000035c 	.word	0x2000035c
 8003c64:	40021000 	.word	0x40021000
 8003c68:	20000440 	.word	0x20000440
 8003c6c:	200004c4 	.word	0x200004c4
 8003c70:	200002f4 	.word	0x200002f4
 8003c74:	48000400 	.word	0x48000400
 8003c78:	48000800 	.word	0x48000800

08003c7c <wakeup_init>:
void wakeup_init()
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
    //HAL_Init();
    MX_GPIO_Init();
 8003c80:	f7fd f9ba 	bl	8000ff8 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8003c84:	f7fd ff7e 	bl	8001b84 <MX_USART1_UART_Init>
    //MX_SPI1_Init();
    MX_TIM4_Init();
 8003c88:	f7fd fe72 	bl	8001970 <MX_TIM4_Init>
    //MX_TIM15_Init();
	MX_USART3_UART_Init();
 8003c8c:	f7fd ffaa 	bl	8001be4 <MX_USART3_UART_Init>


	power_init();
 8003c90:	f7fe fed0 	bl	8002a34 <power_init>

    // JKU
    HAL_Delay(500);  // 필요함
 8003c94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c98:	f000 fecc 	bl	8004a34 <HAL_Delay>
    
    // HJS
    MX_SPI1_Init();
 8003c9c:	f7fd fc44 	bl	8001528 <MX_SPI1_Init>
    MX_RTC_Init(); 
 8003ca0:	f7fd fbe0 	bl	8001464 <MX_RTC_Init>
    
    // JKU
    read_sen_id();
 8003ca4:	f7fe fede 	bl	8002a64 <read_sen_id>
    //sensor_init();
    //uartRingBuff_init();
    //__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
    
    //mac_set_access_allowed_cb(mac_ready); // 수정
}
 8003ca8:	bf00      	nop
 8003caa:	bd80      	pop	{r7, pc}

08003cac <beaconGetSleepTimeData>:
static data_msg_t data_msg;
uint8_t *const mac_payload = data_msg.payload;

uint8_t beacon2sleeptime[2];

void beaconGetSleepTimeData(uint8_t *beaconData, uint8_t *buf) {
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
	uint8_t *data = (uint8_t*) &beaconData[4];
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	60fb      	str	r3, [r7, #12]

	buf[0] = data[(node_addr - 1) * 2 + 0];
 8003cbc:	4b0d      	ldr	r3, [pc, #52]	; (8003cf4 <beaconGetSleepTimeData+0x48>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	4413      	add	r3, r2
 8003cca:	781a      	ldrb	r2, [r3, #0]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	701a      	strb	r2, [r3, #0]
	buf[1] = data[(node_addr - 1) * 2 + 1];
 8003cd0:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <beaconGetSleepTimeData+0x48>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	3301      	adds	r3, #1
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	441a      	add	r2, r3
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	7812      	ldrb	r2, [r2, #0]
 8003ce4:	701a      	strb	r2, [r3, #0]
}
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	20000005 	.word	0x20000005

08003cf8 <mac_init>:

void mac_init(uint8_t chaanel) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
	uint8_t writeByte;

//	LED_WHITE_OFF();
// 	initialize the timerB
	timerB_init();
 8003d02:	f000 fb79 	bl	80043f8 <timerB_init>
//	timerB_start_ACLK_div(TIMERB_DIV_1);

#if PC_TEST_MODE
	cc1120_init(chaanel);
	#else
	cc1120_init();
 8003d06:	f7fe fe6d 	bl	80029e4 <cc1120_init>
#endif

	cc1120_cmd_idle();
 8003d0a:	f7fe fdc3 	bl	8002894 <cc1120_cmd_idle>
	//	writeByte = 0x06; CC1120_SpiWriteReg(CC112X_IOCFG3, &writeByte, 1);

	// go to IDLE after RX and TX
#if 1
	//cc1120_cfg_rxoff_mode(CC1120_RXOFF_MODE_STAY_RX);
	cc1120_cfg_rxoff_mode(CC1120_RXOFF_MODE_IDLE);
 8003d0e:	f107 030f 	add.w	r3, r7, #15
 8003d12:	2201      	movs	r2, #1
 8003d14:	4619      	mov	r1, r3
 8003d16:	2029      	movs	r0, #41	; 0x29
 8003d18:	f7fe face 	bl	80022b8 <CC1120_SpiReadReg>
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	73fb      	strb	r3, [r7, #15]
 8003d26:	f107 030f 	add.w	r3, r7, #15
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	2029      	movs	r0, #41	; 0x29
 8003d30:	f7fe fa8e 	bl	8002250 <CC1120_SpiWriteReg>
	cc1120_cfg_txoff_mode(CC1120_TXOFF_MODE_IDLE);
 8003d34:	f107 030e 	add.w	r3, r7, #14
 8003d38:	2201      	movs	r2, #1
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	202a      	movs	r0, #42	; 0x2a
 8003d3e:	f7fe fabb 	bl	80022b8 <CC1120_SpiReadReg>
 8003d42:	7bbb      	ldrb	r3, [r7, #14]
 8003d44:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	73bb      	strb	r3, [r7, #14]
 8003d4c:	f107 030e 	add.w	r3, r7, #14
 8003d50:	2201      	movs	r2, #1
 8003d52:	4619      	mov	r1, r3
 8003d54:	202a      	movs	r0, #42	; 0x2a
 8003d56:	f7fe fa7b 	bl	8002250 <CC1120_SpiWriteReg>

	cc1120_gdo0_register_callback(beacon_received);		// payload는 rising 으로 캡쳐
 8003d5a:	4818      	ldr	r0, [pc, #96]	; (8003dbc <mac_init+0xc4>)
 8003d5c:	f7fe f926 	bl	8001fac <cc1120_gdo0_register_callback>
	cc1120_gdo2_register_callback(sync_detected);		// sync 는 falling 으로 캡쳐
 8003d60:	4817      	ldr	r0, [pc, #92]	; (8003dc0 <mac_init+0xc8>)
 8003d62:	f7fe f933 	bl	8001fcc <cc1120_gdo2_register_callback>
#endif

	timerB_init();
 8003d66:	f000 fb47 	bl	80043f8 <timerB_init>

#if 1
//	state = STATE_BEACON_SEARCH;
	state = STATE_ATTACHED;
 8003d6a:	4b16      	ldr	r3, [pc, #88]	; (8003dc4 <mac_init+0xcc>)
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	701a      	strb	r2, [r3, #0]
//	printf("BEACON SEARCH\n");
	my_slot = -1;
 8003d70:	4b15      	ldr	r3, [pc, #84]	; (8003dc8 <mac_init+0xd0>)
 8003d72:	22ff      	movs	r2, #255	; 0xff
 8003d74:	701a      	strb	r2, [r3, #0]
	set_rx();
 8003d76:	f000 f85d 	bl	8003e34 <set_rx>

	// initialize the flag
	send_ready = 0;
 8003d7a:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <mac_init+0xd4>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	701a      	strb	r2, [r3, #0]
	// reset the callback
	access_allowed_cb = 0x0;
 8003d80:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <mac_init+0xd8>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]

	__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI9_5_IRQn);
 8003d86:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <mac_init+0xdc>)
 8003d88:	2217      	movs	r2, #23
 8003d8a:	615a      	str	r2, [r3, #20]
	__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI15_10_IRQn);
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <mac_init+0xdc>)
 8003d8e:	2228      	movs	r2, #40	; 0x28
 8003d90:	615a      	str	r2, [r3, #20]
//	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003d92:	2200      	movs	r2, #0
 8003d94:	2105      	movs	r1, #5
 8003d96:	2017      	movs	r0, #23
 8003d98:	f001 f9ab 	bl	80050f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003d9c:	2017      	movs	r0, #23
 8003d9e:	f001 f9c4 	bl	800512a <HAL_NVIC_EnableIRQ>
//
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 1);
 8003da2:	2201      	movs	r2, #1
 8003da4:	2105      	movs	r1, #5
 8003da6:	2028      	movs	r0, #40	; 0x28
 8003da8:	f001 f9a3 	bl	80050f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003dac:	2028      	movs	r0, #40	; 0x28
 8003dae:	f001 f9bc 	bl	800512a <HAL_NVIC_EnableIRQ>

#endif
}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	08003e69 	.word	0x08003e69
 8003dc0:	08004231 	.word	0x08004231
 8003dc4:	2000061c 	.word	0x2000061c
 8003dc8:	2000061b 	.word	0x2000061b
 8003dcc:	2000061d 	.word	0x2000061d
 8003dd0:	20000644 	.word	0x20000644
 8003dd4:	40010400 	.word	0x40010400

08003dd8 <mac_is_access_allowed>:

uint16_t packetCounter = 0;

int16_t mac_is_access_allowed(void) {
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
	return (send_ready == 0);
 8003ddc:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <mac_is_access_allowed+0x20>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bf0c      	ite	eq
 8003de6:	2301      	moveq	r3, #1
 8003de8:	2300      	movne	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	b21b      	sxth	r3, r3
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	2000061d 	.word	0x2000061d

08003dfc <mac_send>:

void mac_send(void) {
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
	send_ready = 1;
 8003e00:	4b03      	ldr	r3, [pc, #12]	; (8003e10 <mac_send+0x14>)
 8003e02:	2201      	movs	r2, #1
 8003e04:	701a      	strb	r2, [r3, #0]
}
 8003e06:	bf00      	nop
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	2000061d 	.word	0x2000061d

08003e14 <mac_set_access_allowed_cb>:

void mac_set_access_allowed_cb(uint16_t (*cb)(void)) {
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
	access_allowed_cb = cb;
 8003e1c:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <mac_set_access_allowed_cb+0x1c>)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6013      	str	r3, [r2, #0]
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	20000644 	.word	0x20000644

08003e34 <set_rx>:

static void set_rx(void) {
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
	// idle, flush, calibrate
	cc1120_cmd_idle();
 8003e38:	f7fe fd2c 	bl	8002894 <cc1120_cmd_idle>
	cc1120_cmd_flush_rx();
 8003e3c:	203a      	movs	r0, #58	; 0x3a
 8003e3e:	f7fe f927 	bl	8002090 <CC1120_SpiCmdStrobe>
	cc1120_cmd_flush_tx();
 8003e42:	203b      	movs	r0, #59	; 0x3b
 8003e44:	f7fe f924 	bl	8002090 <CC1120_SpiCmdStrobe>

	cc1120_cmd_calibrate();	
 8003e48:	f7fe fd50 	bl	80028ec <cc1120_cmd_calibrate>

	// set RX
	cc1120_cmd_rx();
 8003e4c:	2034      	movs	r0, #52	; 0x34
 8003e4e:	f7fe f91f 	bl	8002090 <CC1120_SpiCmdStrobe>
	LED_RED_OFF();
 8003e52:	2200      	movs	r2, #0
 8003e54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <set_rx+0x30>)
 8003e5a:	f002 f80b 	bl	8005e74 <HAL_GPIO_WritePin>
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	48000400 	.word	0x48000400

08003e68 <beacon_received>:
uint8_t old_statedd = 0xff;
uint8_t packetReceived;
uint8_t attached_rr;

uint8_t sentComplete = 1;
uint16_t beacon_received(void) {
 8003e68:	b5b0      	push	{r4, r5, r7, lr}
 8003e6a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003e6e:	af00      	add	r7, sp, #0
	uint8_t marcStatus;
	uint8_t temp_byte;
	uint8_t rxBytes, i;
	uint8_t rxBuffer[512] = { 0, };
 8003e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e74:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8003e82:	2100      	movs	r1, #0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f006 ff7b 	bl	800ad80 <memset>
	uint16_t now;
	uint8_t coord, seq;

	now = timerB_time();
 8003e8a:	f000 fb05 	bl	8004498 <timerB_time>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	f8a7 3206 	strh.w	r3, [r7, #518]	; 0x206
	LED_RED_ON();
 8003e94:	2201      	movs	r2, #1
 8003e96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e9a:	489d      	ldr	r0, [pc, #628]	; (8004110 <beacon_received+0x2a8>)
 8003e9c:	f001 ffea 	bl	8005e74 <HAL_GPIO_WritePin>
#if 1
	CC1120_SpiReadReg(CC112X_MARC_STATUS1, &temp_byte, 1);
 8003ea0:	f207 2302 	addw	r3, r7, #514	; 0x202
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	f642 7094 	movw	r0, #12180	; 0x2f94
 8003eac:	f7fe fa04 	bl	80022b8 <CC1120_SpiReadReg>
	if ((temp_byte & 0x09) || (temp_byte & 0x0a)) {
 8003eb0:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8003eb4:	f003 0309 	and.w	r3, r3, #9
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f040 819a 	bne.w	80041f2 <beacon_received+0x38a>
 8003ebe:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8003ec2:	f003 030a 	and.w	r3, r3, #10
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f040 8193 	bne.w	80041f2 <beacon_received+0x38a>
		//CC1120_SpiCmdStrobe(CC112X_SFRX);
		goto err;
		//return 0;
	}

	else if (temp_byte & 0x80) {
 8003ecc:	f897 3202 	ldrb.w	r3, [r7, #514]	; 0x202
 8003ed0:	b25b      	sxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f280 818f 	bge.w	80041f6 <beacon_received+0x38e>
		CC1120_SpiReadReg(CC112X_NUM_RXBYTES, &rxBytes, 1);
 8003ed8:	f207 2301 	addw	r3, r7, #513	; 0x201
 8003edc:	2201      	movs	r2, #1
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f642 70d7 	movw	r0, #12247	; 0x2fd7
 8003ee4:	f7fe f9e8 	bl	80022b8 <CC1120_SpiReadReg>

		// Check that we have bytes in fifo
		if (rxBytes != 0) {
 8003ee8:	f897 3201 	ldrb.w	r3, [r7, #513]	; 0x201
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 8182 	beq.w	80041f6 <beacon_received+0x38e>
			// Read marcstate to check for RX FIFO error
			CC1120_SpiReadReg(CC112X_MARCSTATE, &marcStatus, 1);
 8003ef2:	f207 2303 	addw	r3, r7, #515	; 0x203
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	4619      	mov	r1, r3
 8003efa:	f642 7073 	movw	r0, #12147	; 0x2f73
 8003efe:	f7fe f9db 	bl	80022b8 <CC1120_SpiReadReg>

			// Mask out marcstate bits and check if we have a RX FIFO error
			if ((marcStatus & 0x1F) == 0x11/*RX_FIFO_ERROR*/) {
 8003f02:	f897 3203 	ldrb.w	r3, [r7, #515]	; 0x203
 8003f06:	f003 031f 	and.w	r3, r3, #31
 8003f0a:	2b11      	cmp	r3, #17
 8003f0c:	d103      	bne.n	8003f16 <beacon_received+0xae>
				// Flush RX Fifo
				CC1120_SpiCmdStrobe(CC112X_SFRX);
 8003f0e:	203a      	movs	r0, #58	; 0x3a
 8003f10:	f7fe f8be 	bl	8002090 <CC1120_SpiCmdStrobe>
				goto err;
 8003f14:	e178      	b.n	8004208 <beacon_received+0x3a0>
			} else {
				// Read n bytes from rx fifo
				CC1120_SpiReadRxFifo(rxBuffer, rxBytes);
 8003f16:	f897 2201 	ldrb.w	r2, [r7, #513]	; 0x201
 8003f1a:	463b      	mov	r3, r7
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe fa11 	bl	8002346 <CC1120_SpiReadRxFifo>

				// Check CRC ok (CRC_OK: bit7 in second status byte)
				// This assumes status bytes are appended in RX_FIFO
				// (PKT_CFG1.APPEND_STATUS = 1.)
				// If CRC is disabled the CRC_OK field will read 1
				if (rxBuffer[rxBytes - 1] & 0x80) {
 8003f24:	f897 3201 	ldrb.w	r3, [r7, #513]	; 0x201
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003f2e:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8003f32:	5cd3      	ldrb	r3, [r2, r3]
 8003f34:	b25b      	sxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f280 815f 	bge.w	80041fa <beacon_received+0x392>
//					if ( rxBytes != )
					memcpy((uint8_t*) &beacon_msg, &rxBuffer, BEACON_LENGTH);
 8003f3c:	4a75      	ldr	r2, [pc, #468]	; (8004114 <beacon_received+0x2ac>)
 8003f3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003f42:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8003f46:	4614      	mov	r4, r2
 8003f48:	461d      	mov	r5, r3
 8003f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f4e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003f52:	6020      	str	r0, [r4, #0]
 8003f54:	3404      	adds	r4, #4
 8003f56:	8021      	strh	r1, [r4, #0]
//					{
//						printf("idx=[%d]  rxByte=%02x\r\n", i , rxBuffer[i]);
//					}
					//data
					// check length, type
					if ((beacon_msg.hdr.length != (BEACON_LENGTH - 1))
 8003f58:	4b6e      	ldr	r3, [pc, #440]	; (8004114 <beacon_received+0x2ac>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b15      	cmp	r3, #21
 8003f5e:	f040 814e 	bne.w	80041fe <beacon_received+0x396>
							|| (HEADER_GET_TYPE(beacon_msg.hdr) != BEACON_TYPE)) {
 8003f62:	4b6c      	ldr	r3, [pc, #432]	; (8004114 <beacon_received+0x2ac>)
 8003f64:	785b      	ldrb	r3, [r3, #1]
 8003f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f6a:	2b10      	cmp	r3, #16
 8003f6c:	f040 8147 	bne.w	80041fe <beacon_received+0x396>
						//set_rx();
						goto err;
					}
					// unset timeout alarm
					timerB_unset_alarm(ALARM_TIMEOUT);
 8003f70:	2001      	movs	r0, #1
 8003f72:	f000 fb65 	bl	8004640 <timerB_unset_alarm>

					coord = HEADER_GET_ADDR(beacon_msg.hdr);
 8003f76:	4b67      	ldr	r3, [pc, #412]	; (8004114 <beacon_received+0x2ac>)
 8003f78:	785b      	ldrb	r3, [r3, #1]
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	f887 3205 	strb.w	r3, [r7, #517]	; 0x205
					seq = beacon_msg.seq;
 8003f82:	4b64      	ldr	r3, [pc, #400]	; (8004114 <beacon_received+0x2ac>)
 8003f84:	789b      	ldrb	r3, [r3, #2]
 8003f86:	f887 3204 	strb.w	r3, [r7, #516]	; 0x204
					beacon_eop_time = now;
 8003f8a:	4a63      	ldr	r2, [pc, #396]	; (8004118 <beacon_received+0x2b0>)
 8003f8c:	f8b7 3206 	ldrh.w	r3, [r7, #518]	; 0x206
 8003f90:	8013      	strh	r3, [r2, #0]
//						// beacon from unknown coordinator
//						//set_rx();
//						goto err;
//					}

					beaconGetSleepTimeData(&beacon_msg, &beacon2sleeptime); // 분초 파싱부분
 8003f92:	4962      	ldr	r1, [pc, #392]	; (800411c <beacon_received+0x2b4>)
 8003f94:	485f      	ldr	r0, [pc, #380]	; (8004114 <beacon_received+0x2ac>)
 8003f96:	f7ff fe89 	bl	8003cac <beaconGetSleepTimeData>
					{
						printf("%02x ",beacon_msg.data[i]);
					}
#endif

					LED_RED_OFF();
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fa0:	485b      	ldr	r0, [pc, #364]	; (8004110 <beacon_received+0x2a8>)
 8003fa2:	f001 ff67 	bl	8005e74 <HAL_GPIO_WritePin>

					// reset timeout count
					beacon_timeout_count = 0;
 8003fa6:	4b5e      	ldr	r3, [pc, #376]	; (8004120 <beacon_received+0x2b8>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	801a      	strh	r2, [r3, #0]

					// save beacon time
					beacon_sync_time = sync_time - BEACON_OVERHEAD;
 8003fac:	4b5d      	ldr	r3, [pc, #372]	; (8004124 <beacon_received+0x2bc>)
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	3b20      	subs	r3, #32
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	4b5c      	ldr	r3, [pc, #368]	; (8004128 <beacon_received+0x2c0>)
 8003fb6:	801a      	strh	r2, [r3, #0]
					//printf("%d\r\n",beacon_sync_time);
					// set alarm to receive beacon
					timerB_set_alarm_from_time(ALARM_BEACON,  // alarm #
 8003fb8:	4b5b      	ldr	r3, [pc, #364]	; (8004128 <beacon_received+0x2c0>)
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	f2a3 3329 	subw	r3, r3, #809	; 0x329
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f644 31d8 	movw	r1, #19416	; 0x4bd8
 8003fc8:	2000      	movs	r0, #0
 8003fca:	f000 facd 	bl	8004568 <timerB_set_alarm_from_time>
							BEACON_PERIOD,  // ticks
							0,  // no period
							beacon_sync_time - SAFETY_TIME); // reference
					timerB_register_cb(ALARM_BEACON, beacon_rx);
 8003fce:	4957      	ldr	r1, [pc, #348]	; (800412c <beacon_received+0x2c4>)
 8003fd0:	2000      	movs	r0, #0
 8003fd2:	f000 fa47 	bl	8004464 <timerB_register_cb>
#if 1
					switch (state) {
 8003fd6:	4b56      	ldr	r3, [pc, #344]	; (8004130 <beacon_received+0x2c8>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	f200 8114 	bhi.w	8004208 <beacon_received+0x3a0>
 8003fe0:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <beacon_received+0x180>)
 8003fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe6:	bf00      	nop
 8003fe8:	08003ff9 	.word	0x08003ff9
 8003fec:	08004017 	.word	0x08004017
 8003ff0:	080040db 	.word	0x080040db
 8003ff4:	08004151 	.word	0x08004151
					case STATE_BEACON_SEARCH:
						// pick a random backoff between 1 and 16
						attach_backoff = 1 + (rand() & 0xF);
 8003ff8:	f007 fdba 	bl	800bb70 <rand>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	b29b      	uxth	r3, r3
 8004006:	3301      	adds	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	4b4a      	ldr	r3, [pc, #296]	; (8004134 <beacon_received+0x2cc>)
 800400c:	801a      	strh	r2, [r3, #0]
						//attach_backoff = 4;

						// update state
						state = STATE_ATTACHING_WAIT_TX;
 800400e:	4b48      	ldr	r3, [pc, #288]	; (8004130 <beacon_received+0x2c8>)
 8004010:	2201      	movs	r2, #1
 8004012:	701a      	strb	r2, [r3, #0]
						break;
 8004014:	e0f8      	b.n	8004208 <beacon_received+0x3a0>

					case STATE_ATTACHING_WAIT_TX:
						// decrement count
						attach_backoff--;
 8004016:	4b47      	ldr	r3, [pc, #284]	; (8004134 <beacon_received+0x2cc>)
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	4b45      	ldr	r3, [pc, #276]	; (8004134 <beacon_received+0x2cc>)
 8004020:	801a      	strh	r2, [r3, #0]
						//printf("bf=%d\r\n", attach_backoff);
						if (attach_backoff == 0) {
 8004022:	4b44      	ldr	r3, [pc, #272]	; (8004134 <beacon_received+0x2cc>)
 8004024:	881b      	ldrh	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	f040 80eb 	bne.w	8004202 <beacon_received+0x39a>
							// prepare attach request frame
							control_msg.hdr.length = CONTROL_LENGTH - 1;
 800402c:	4b42      	ldr	r3, [pc, #264]	; (8004138 <beacon_received+0x2d0>)
 800402e:	2215      	movs	r2, #21
 8004030:	701a      	strb	r2, [r3, #0]
							HEADER_SET_ADDR(control_msg.hdr, node_addr);
 8004032:	4b41      	ldr	r3, [pc, #260]	; (8004138 <beacon_received+0x2d0>)
 8004034:	785b      	ldrb	r3, [r3, #1]
 8004036:	b25b      	sxtb	r3, r3
 8004038:	f023 030f 	bic.w	r3, r3, #15
 800403c:	b25a      	sxtb	r2, r3
 800403e:	4b3f      	ldr	r3, [pc, #252]	; (800413c <beacon_received+0x2d4>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	b25b      	sxtb	r3, r3
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	b25b      	sxtb	r3, r3
 800404a:	4313      	orrs	r3, r2
 800404c:	b25b      	sxtb	r3, r3
 800404e:	b2da      	uxtb	r2, r3
 8004050:	4b39      	ldr	r3, [pc, #228]	; (8004138 <beacon_received+0x2d0>)
 8004052:	705a      	strb	r2, [r3, #1]
							HEADER_SET_TYPE(control_msg.hdr, CONTROL_TYPE);
 8004054:	4b38      	ldr	r3, [pc, #224]	; (8004138 <beacon_received+0x2d0>)
 8004056:	785b      	ldrb	r3, [r3, #1]
 8004058:	b25b      	sxtb	r3, r3
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	b25b      	sxtb	r3, r3
 8004060:	f043 0320 	orr.w	r3, r3, #32
 8004064:	b25b      	sxtb	r3, r3
 8004066:	b2da      	uxtb	r2, r3
 8004068:	4b33      	ldr	r3, [pc, #204]	; (8004138 <beacon_received+0x2d0>)
 800406a:	705a      	strb	r2, [r3, #1]
							CONTROL_SET_TYPE(control_msg, CONTROL_ATTACH_REQ);
 800406c:	4b32      	ldr	r3, [pc, #200]	; (8004138 <beacon_received+0x2d0>)
 800406e:	789b      	ldrb	r3, [r3, #2]
 8004070:	b25b      	sxtb	r3, r3
 8004072:	f003 030f 	and.w	r3, r3, #15
 8004076:	b25b      	sxtb	r3, r3
 8004078:	f063 035f 	orn	r3, r3, #95	; 0x5f
 800407c:	b25b      	sxtb	r3, r3
 800407e:	b2da      	uxtb	r2, r3
 8004080:	4b2d      	ldr	r3, [pc, #180]	; (8004138 <beacon_received+0x2d0>)
 8004082:	709a      	strb	r2, [r3, #2]
							CONTROL_SET_ADDR(control_msg, coord_addr);
 8004084:	4b2c      	ldr	r3, [pc, #176]	; (8004138 <beacon_received+0x2d0>)
 8004086:	789b      	ldrb	r3, [r3, #2]
 8004088:	b25b      	sxtb	r3, r3
 800408a:	f023 030f 	bic.w	r3, r3, #15
 800408e:	b25a      	sxtb	r2, r3
 8004090:	4b2b      	ldr	r3, [pc, #172]	; (8004140 <beacon_received+0x2d8>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	b25b      	sxtb	r3, r3
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	b25b      	sxtb	r3, r3
 800409c:	4313      	orrs	r3, r2
 800409e:	b25b      	sxtb	r3, r3
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	4b25      	ldr	r3, [pc, #148]	; (8004138 <beacon_received+0x2d0>)
 80040a4:	709a      	strb	r2, [r3, #2]
							// set timer to send attach request
							timerB_set_alarm_from_time(ALARM_SEND,
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <beacon_received+0x2c0>)
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f244 5186 	movw	r1, #17798	; 0x4586
 80040b0:	2002      	movs	r0, #2
 80040b2:	f000 fa59 	bl	8004568 <timerB_set_alarm_from_time>
							CTRL_SLOT * SLOT_LENGTH_CTRL, // ticks
									0, beacon_sync_time);

							timerB_register_cb(ALARM_SEND, control_send);
 80040b6:	4923      	ldr	r1, [pc, #140]	; (8004144 <beacon_received+0x2dc>)
 80040b8:	2002      	movs	r0, #2
 80040ba:	f000 f9d3 	bl	8004464 <timerB_register_cb>
							LED_WHITE_ON();
 80040be:	2201      	movs	r2, #1
 80040c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80040c8:	f001 fed4 	bl	8005e74 <HAL_GPIO_WritePin>
							// update state
							state = STATE_ATTACHING_WAIT_RX;
 80040cc:	4b18      	ldr	r3, [pc, #96]	; (8004130 <beacon_received+0x2c8>)
 80040ce:	2202      	movs	r2, #2
 80040d0:	701a      	strb	r2, [r3, #0]
							attach_backoff = 0;
 80040d2:	4b18      	ldr	r3, [pc, #96]	; (8004134 <beacon_received+0x2cc>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	801a      	strh	r2, [r3, #0]
						}
						break;
 80040d8:	e093      	b.n	8004202 <beacon_received+0x39a>
//				        	{
//				        		printf("rx[%d] =%02x",i, rxBuffer[i]);
//				        	}
//				        	printf("\r\n");

						if ((CONTROL_GET_TYPE(beacon_msg) == CONTROL_ATTACH_OK)
 80040da:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <beacon_received+0x2ac>)
 80040dc:	78db      	ldrb	r3, [r3, #3]
 80040de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e2:	2bb0      	cmp	r3, #176	; 0xb0
 80040e4:	d10f      	bne.n	8004106 <beacon_received+0x29e>
								&& (CONTROL_GET_ADDR(beacon_msg) == node_addr)) {
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <beacon_received+0x2ac>)
 80040e8:	78db      	ldrb	r3, [r3, #3]
 80040ea:	f003 030f 	and.w	r3, r3, #15
 80040ee:	4a13      	ldr	r2, [pc, #76]	; (800413c <beacon_received+0x2d4>)
 80040f0:	7812      	ldrb	r2, [r2, #0]
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d107      	bne.n	8004106 <beacon_received+0x29e>
							// store my_slot
							my_slot = beacon_msg.data;
 80040f6:	4b14      	ldr	r3, [pc, #80]	; (8004148 <beacon_received+0x2e0>)
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	4b14      	ldr	r3, [pc, #80]	; (800414c <beacon_received+0x2e4>)
 80040fc:	701a      	strb	r2, [r3, #0]
							//printf("slot =%d\r\n", my_slot);
							state = STATE_ATTACHED;
 80040fe:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <beacon_received+0x2c8>)
 8004100:	2203      	movs	r2, #3
 8004102:	701a      	strb	r2, [r3, #0]
							// attach failed, retry at next beacon
							//printf("no attach %c\r\n", beacon_msg.ctl &0xf0);
							state = STATE_BEACON_SEARCH;
						}
					}
						break;
 8004104:	e080      	b.n	8004208 <beacon_received+0x3a0>
							state = STATE_BEACON_SEARCH;
 8004106:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <beacon_received+0x2c8>)
 8004108:	2200      	movs	r2, #0
 800410a:	701a      	strb	r2, [r3, #0]
						break;
 800410c:	e07c      	b.n	8004208 <beacon_received+0x3a0>
 800410e:	bf00      	nop
 8004110:	48000400 	.word	0x48000400
 8004114:	20000620 	.word	0x20000620
 8004118:	20000638 	.word	0x20000638
 800411c:	20000658 	.word	0x20000658
 8004120:	2000063a 	.word	0x2000063a
 8004124:	20000618 	.word	0x20000618
 8004128:	20000636 	.word	0x20000636
 800412c:	0800424d 	.word	0x0800424d
 8004130:	2000061c 	.word	0x2000061c
 8004134:	20000640 	.word	0x20000640
 8004138:	2000063c 	.word	0x2000063c
 800413c:	20000005 	.word	0x20000005
 8004140:	2000061a 	.word	0x2000061a
 8004144:	08004321 	.word	0x08004321
 8004148:	20000624 	.word	0x20000624
 800414c:	2000061b 	.word	0x2000061b
						if (1 /*send_ready*/) {
							// prepare data frame

							{

								data_msg.hdr.length = DATA_LENGTH - 1;
 8004150:	4b31      	ldr	r3, [pc, #196]	; (8004218 <beacon_received+0x3b0>)
 8004152:	220c      	movs	r2, #12
 8004154:	701a      	strb	r2, [r3, #0]
								HEADER_SET_TYPE(data_msg.hdr, DATA_TYPE);
 8004156:	4b30      	ldr	r3, [pc, #192]	; (8004218 <beacon_received+0x3b0>)
 8004158:	785b      	ldrb	r3, [r3, #1]
 800415a:	b25b      	sxtb	r3, r3
 800415c:	f003 030f 	and.w	r3, r3, #15
 8004160:	b25b      	sxtb	r3, r3
 8004162:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8004166:	b25b      	sxtb	r3, r3
 8004168:	b2da      	uxtb	r2, r3
 800416a:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <beacon_received+0x3b0>)
 800416c:	705a      	strb	r2, [r3, #1]
								HEADER_SET_ADDR(data_msg.hdr, node_addr);
 800416e:	4b2a      	ldr	r3, [pc, #168]	; (8004218 <beacon_received+0x3b0>)
 8004170:	785b      	ldrb	r3, [r3, #1]
 8004172:	b25b      	sxtb	r3, r3
 8004174:	f023 030f 	bic.w	r3, r3, #15
 8004178:	b25a      	sxtb	r2, r3
 800417a:	4b28      	ldr	r3, [pc, #160]	; (800421c <beacon_received+0x3b4>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	b25b      	sxtb	r3, r3
 8004180:	f003 030f 	and.w	r3, r3, #15
 8004184:	b25b      	sxtb	r3, r3
 8004186:	4313      	orrs	r3, r2
 8004188:	b25b      	sxtb	r3, r3
 800418a:	b2da      	uxtb	r2, r3
 800418c:	4b22      	ldr	r3, [pc, #136]	; (8004218 <beacon_received+0x3b0>)
 800418e:	705a      	strb	r2, [r3, #1]

								timerB_set_alarm_from_time(ALARM_SEND, // alarm #
 8004190:	4b22      	ldr	r3, [pc, #136]	; (800421c <beacon_received+0x3b4>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	b29b      	uxth	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	00d2      	lsls	r2, r2, #3
 800419a:	1ad2      	subs	r2, r2, r3
 800419c:	4611      	mov	r1, r2
 800419e:	00c9      	lsls	r1, r1, #3
 80041a0:	1a8a      	subs	r2, r1, r2
 80041a2:	4611      	mov	r1, r2
 80041a4:	0148      	lsls	r0, r1, #5
 80041a6:	4611      	mov	r1, r2
 80041a8:	4602      	mov	r2, r0
 80041aa:	440a      	add	r2, r1
 80041ac:	4413      	add	r3, r2
 80041ae:	b299      	uxth	r1, r3
 80041b0:	4b1b      	ldr	r3, [pc, #108]	; (8004220 <beacon_received+0x3b8>)
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	2200      	movs	r2, #0
 80041b6:	2002      	movs	r0, #2
 80041b8:	f000 f9d6 	bl	8004568 <timerB_set_alarm_from_time>
										node_addr * SLOT_LENGTH, // ticks
										0, // period
										beacon_sync_time); // ref
								// set alarm callback
								timerB_register_cb(ALARM_SEND, slot_send);
 80041bc:	4919      	ldr	r1, [pc, #100]	; (8004224 <beacon_received+0x3bc>)
 80041be:	2002      	movs	r0, #2
 80041c0:	f000 f950 	bl	8004464 <timerB_register_cb>

								//								 put the data in the FIFO
								//								cc1101_fifo_put((uint8_t*)&data_msg, data_msg.hdr.length+1);
								CC1120_SpiWriteTxFifo((uint8_t*) &data_msg,
										data_msg.hdr.length + 1);
 80041c4:	4b14      	ldr	r3, [pc, #80]	; (8004218 <beacon_received+0x3b0>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
								CC1120_SpiWriteTxFifo((uint8_t*) &data_msg,
 80041c8:	3301      	adds	r3, #1
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	4619      	mov	r1, r3
 80041ce:	4812      	ldr	r0, [pc, #72]	; (8004218 <beacon_received+0x3b0>)
 80041d0:	f7fe f8a6 	bl	8002320 <CC1120_SpiWriteTxFifo>

								//PacketSend(0x00, MyNodeID, 0x01);
								send_ready = 0;
 80041d4:	4b14      	ldr	r3, [pc, #80]	; (8004228 <beacon_received+0x3c0>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]
								if (access_allowed_cb && access_allowed_cb()) {
 80041da:	4b14      	ldr	r3, [pc, #80]	; (800422c <beacon_received+0x3c4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d011      	beq.n	8004206 <beacon_received+0x39e>
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <beacon_received+0x3c4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4798      	blx	r3
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <beacon_received+0x39e>
									// if wanted we return 1 to wake the CPU up
									//state = 0;
									return 1;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e00d      	b.n	800420e <beacon_received+0x3a6>
		goto err;
 80041f2:	bf00      	nop
 80041f4:	e008      	b.n	8004208 <beacon_received+0x3a0>

			}
		}
	}
#endif
	err: set_rx();
 80041f6:	bf00      	nop
 80041f8:	e006      	b.n	8004208 <beacon_received+0x3a0>
					goto err;
 80041fa:	bf00      	nop
 80041fc:	e004      	b.n	8004208 <beacon_received+0x3a0>
						goto err;
 80041fe:	bf00      	nop
 8004200:	e002      	b.n	8004208 <beacon_received+0x3a0>
						break;
 8004202:	bf00      	nop
 8004204:	e000      	b.n	8004208 <beacon_received+0x3a0>
						break;
 8004206:	bf00      	nop
	err: set_rx();
 8004208:	f7ff fe14 	bl	8003e34 <set_rx>
	return 0;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004214:	46bd      	mov	sp, r7
 8004216:	bdb0      	pop	{r4, r5, r7, pc}
 8004218:	20000648 	.word	0x20000648
 800421c:	20000005 	.word	0x20000005
 8004220:	20000636 	.word	0x20000636
 8004224:	080043a1 	.word	0x080043a1
 8004228:	2000061d 	.word	0x2000061d
 800422c:	20000644 	.word	0x20000644

08004230 <sync_detected>:

uint16_t sync_detected(void) {
 8004230:	b580      	push	{r7, lr}
 8004232:	af00      	add	r7, sp, #0
	sync_time = timerB_time();
 8004234:	f000 f930 	bl	8004498 <timerB_time>
 8004238:	4603      	mov	r3, r0
 800423a:	461a      	mov	r2, r3
 800423c:	4b02      	ldr	r3, [pc, #8]	; (8004248 <sync_detected+0x18>)
 800423e:	801a      	strh	r2, [r3, #0]
	return 0;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000618 	.word	0x20000618

0800424c <beacon_rx>:

static uint16_t beacon_rx(void) {
 800424c:	b580      	push	{r7, lr}
 800424e:	af00      	add	r7, sp, #0
	// wake up radio
	set_rx();
 8004250:	f7ff fdf0 	bl	8003e34 <set_rx>

	// set callback
	cc1120_gdo0_register_callback(beacon_received);
 8004254:	4809      	ldr	r0, [pc, #36]	; (800427c <beacon_rx+0x30>)
 8004256:	f7fd fea9 	bl	8001fac <cc1120_gdo0_register_callback>
	__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI9_5_IRQn);
 800425a:	4b09      	ldr	r3, [pc, #36]	; (8004280 <beacon_rx+0x34>)
 800425c:	2217      	movs	r2, #23
 800425e:	615a      	str	r2, [r3, #20]
	//cc1101_gdo0_int_enable();

	// set alarm for beacon timeout
	timerB_set_alarm_from_now(ALARM_TIMEOUT,  // alarm #
 8004260:	2200      	movs	r2, #0
 8004262:	f240 6152 	movw	r1, #1618	; 0x652
 8004266:	2001      	movs	r0, #1
 8004268:	f000 f924 	bl	80044b4 <timerB_set_alarm_from_now>
			TIMEOUT_TIME,  // ticks
			0);  // no period
	timerB_register_cb(ALARM_TIMEOUT, beacon_timeout);
 800426c:	4905      	ldr	r1, [pc, #20]	; (8004284 <beacon_rx+0x38>)
 800426e:	2001      	movs	r0, #1
 8004270:	f000 f8f8 	bl	8004464 <timerB_register_cb>
	return 0;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	08003e69 	.word	0x08003e69
 8004280:	40010400 	.word	0x40010400
 8004284:	08004289 	.word	0x08004289

08004288 <beacon_timeout>:

static uint16_t beacon_timeout(void) {
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
	// put radio to sleep
	//cc1101_cmd_pwd();
	LED_RED_OFF();
 800428c:	2200      	movs	r2, #0
 800428e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004292:	481f      	ldr	r0, [pc, #124]	; (8004310 <beacon_timeout+0x88>)
 8004294:	f001 fdee 	bl	8005e74 <HAL_GPIO_WritePin>

	// increase timeout count
	beacon_timeout_count++;
 8004298:	4b1e      	ldr	r3, [pc, #120]	; (8004314 <beacon_timeout+0x8c>)
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	3301      	adds	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	4b1c      	ldr	r3, [pc, #112]	; (8004314 <beacon_timeout+0x8c>)
 80042a2:	801a      	strh	r2, [r3, #0]

	// if too many timeouts, reset state
	if (beacon_timeout_count >= 500/*TIMEOUT_COUNT_MAX*/) {
 80042a4:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <beacon_timeout+0x8c>)
 80042a6:	881b      	ldrh	r3, [r3, #0]
 80042a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80042ac:	d306      	bcc.n	80042bc <beacon_timeout+0x34>
		set_rx();
 80042ae:	f7ff fdc1 	bl	8003e34 <set_rx>
		//state = STATE_BEACON_SEARCH;
		state = STATE_ATTACHED;
 80042b2:	4b19      	ldr	r3, [pc, #100]	; (8004318 <beacon_timeout+0x90>)
 80042b4:	2203      	movs	r2, #3
 80042b6:	701a      	strb	r2, [r3, #0]
		//printf("BEACON_SEARCH\n");
		return 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e026      	b.n	800430a <beacon_timeout+0x82>
	}

	// reset alarm to receive beacon
	timerB_set_alarm_from_time(ALARM_BEACON,  // alarm #
 80042bc:	4b15      	ldr	r3, [pc, #84]	; (8004314 <beacon_timeout+0x8c>)
 80042be:	881b      	ldrh	r3, [r3, #0]
 80042c0:	3301      	adds	r3, #1
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	461a      	mov	r2, r3
 80042c6:	00d2      	lsls	r2, r2, #3
 80042c8:	441a      	add	r2, r3
 80042ca:	0052      	lsls	r2, r2, #1
 80042cc:	441a      	add	r2, r3
 80042ce:	0152      	lsls	r2, r2, #5
 80042d0:	1ad2      	subs	r2, r2, r3
 80042d2:	0092      	lsls	r2, r2, #2
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	b299      	uxth	r1, r3
 80042da:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <beacon_timeout+0x8c>)
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	3301      	adds	r3, #1
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	461a      	mov	r2, r3
 80042e4:	0192      	lsls	r2, r2, #6
 80042e6:	441a      	add	r2, r3
 80042e8:	0092      	lsls	r2, r2, #2
 80042ea:	441a      	add	r2, r3
 80042ec:	4610      	mov	r0, r2
 80042ee:	0140      	lsls	r0, r0, #5
 80042f0:	1a82      	subs	r2, r0, r2
 80042f2:	00d2      	lsls	r2, r2, #3
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	4b08      	ldr	r3, [pc, #32]	; (800431c <beacon_timeout+0x94>)
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	4413      	add	r3, r2
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2200      	movs	r2, #0
 8004302:	2000      	movs	r0, #0
 8004304:	f000 f930 	bl	8004568 <timerB_set_alarm_from_time>
			BEACON_PERIOD * (beacon_timeout_count + 1),  // ticks
			0,  // period (same)
			beacon_sync_time - (SAFETY_TIME * (beacon_timeout_count + 1))); // reference

	return 0;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	48000400 	.word	0x48000400
 8004314:	2000063a 	.word	0x2000063a
 8004318:	2000061c 	.word	0x2000061c
 800431c:	20000636 	.word	0x20000636

08004320 <control_send>:

static uint16_t control_send(void) {
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
	LED_BLUE_ON();
 8004324:	2201      	movs	r2, #1
 8004326:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800432a:	4812      	ldr	r0, [pc, #72]	; (8004374 <control_send+0x54>)
 800432c:	f001 fda2 	bl	8005e74 <HAL_GPIO_WritePin>
	cc1120_gdo0_register_callback(control_sent);
 8004330:	4811      	ldr	r0, [pc, #68]	; (8004378 <control_send+0x58>)
 8004332:	f7fd fe3b 	bl	8001fac <cc1120_gdo0_register_callback>
	__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI9_5_IRQn);
 8004336:	4b11      	ldr	r3, [pc, #68]	; (800437c <control_send+0x5c>)
 8004338:	2217      	movs	r2, #23
 800433a:	615a      	str	r2, [r3, #20]

	cc1120_cmd_idle();
 800433c:	f7fe faaa 	bl	8002894 <cc1120_cmd_idle>
	cc1120_cmd_flush_tx();
 8004340:	203b      	movs	r0, #59	; 0x3b
 8004342:	f7fd fea5 	bl	8002090 <CC1120_SpiCmdStrobe>
	cc1120_cmd_flush_rx();
 8004346:	203a      	movs	r0, #58	; 0x3a
 8004348:	f7fd fea2 	bl	8002090 <CC1120_SpiCmdStrobe>

	// 1.2khz일시
	// Strobe TX to send packet
	cc1120_cmd_tx();
 800434c:	2035      	movs	r0, #53	; 0x35
 800434e:	f7fd fe9f 	bl	8002090 <CC1120_SpiCmdStrobe>
	CC1120_SpiWriteTxFifo((uint8_t*) &control_msg, control_msg.hdr.length + 1);
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <control_send+0x60>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	3301      	adds	r3, #1
 8004358:	b2db      	uxtb	r3, r3
 800435a:	4619      	mov	r1, r3
 800435c:	4808      	ldr	r0, [pc, #32]	; (8004380 <control_send+0x60>)
 800435e:	f7fd ffdf 	bl	8002320 <CC1120_SpiWriteTxFifo>
	//printf("control send\r\n");
	// 1.2khz 이상일시
	//send_packet((uint8_t*)&control_msg, control_msg.hdr.length+1);

	LED_BLUE_OFF();
 8004362:	2200      	movs	r2, #0
 8004364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004368:	4802      	ldr	r0, [pc, #8]	; (8004374 <control_send+0x54>)
 800436a:	f001 fd83 	bl	8005e74 <HAL_GPIO_WritePin>
	return 0;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	bd80      	pop	{r7, pc}
 8004374:	48000400 	.word	0x48000400
 8004378:	08004385 	.word	0x08004385
 800437c:	40010400 	.word	0x40010400
 8004380:	2000063c 	.word	0x2000063c

08004384 <control_sent>:

static uint16_t control_sent(void) {
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
	LED_BLUE_OFF();
 8004388:	2200      	movs	r2, #0
 800438a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800438e:	4803      	ldr	r0, [pc, #12]	; (800439c <control_sent+0x18>)
 8004390:	f001 fd70 	bl	8005e74 <HAL_GPIO_WritePin>
	return 0;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	48000400 	.word	0x48000400

080043a0 <slot_send>:

static uint16_t slot_send(void) {
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
	uint8_t statusByte;
	uint8_t marcstate;
	printf("sending\r\n");
 80043a4:	4805      	ldr	r0, [pc, #20]	; (80043bc <slot_send+0x1c>)
 80043a6:	f007 fbdb 	bl	800bb60 <puts>
	//LED_BLUE_ON();

	cc1120_cmd_tx(); // 실제 보내는곳
 80043aa:	2035      	movs	r0, #53	; 0x35
 80043ac:	f7fd fe70 	bl	8002090 <CC1120_SpiCmdStrobe>
	cc1120_gdo0_register_callback(slot_sent);
 80043b0:	4803      	ldr	r0, [pc, #12]	; (80043c0 <slot_send+0x20>)
 80043b2:	f7fd fdfb 	bl	8001fac <cc1120_gdo0_register_callback>
//	{
//		//cc1120_gdo0_register_callback(beacon_sent);
//			//__HAL_GPIO_EXTI_CLEAR_FLAG(EXTI0_IRQn);
//		send_packet((uint8_t*)&data_msg, data_msg.hdr.length+1);
//	}
	return 0;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	0800f86c 	.word	0x0800f86c
 80043c0:	080043c5 	.word	0x080043c5

080043c4 <slot_sent>:

static uint16_t slot_sent(void) {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
	// put radio to sleep
	//cc1120_cmd_pwd();
//    LED_GREEN_OFF();
	LED_BLUE_OFF();
 80043c8:	2200      	movs	r2, #0
 80043ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043ce:	4808      	ldr	r0, [pc, #32]	; (80043f0 <slot_sent+0x2c>)
 80043d0:	f001 fd50 	bl	8005e74 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80043d4:	2200      	movs	r2, #0
 80043d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80043da:	4806      	ldr	r0, [pc, #24]	; (80043f4 <slot_sent+0x30>)
 80043dc:	f001 fd4a 	bl	8005e74 <HAL_GPIO_WritePin>
#if 1
	//sleep_deinit();
	//SleepModeEntryFunction(beacon2sleeptime[0],beacon2sleeptime[1]);
	SleepModeEntryFunction(0,5);
 80043e0:	2105      	movs	r1, #5
 80043e2:	2000      	movs	r0, #0
 80043e4:	f7ff fab2 	bl	800394c <SleepModeEntryFunction>
#endif
	return 0;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	48000400 	.word	0x48000400
 80043f4:	48000800 	.word	0x48000800

080043f8 <timerB_init>:
static uint16_t timerB_periods[TIMERB_CCR_NUMBER];



void timerB_init()
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
    uint16_t i;

    // stop everything
    //TBCTL = 0;
    HAL_TIM_Base_Stop(&htim4);
 80043fe:	4816      	ldr	r0, [pc, #88]	; (8004458 <timerB_init+0x60>)
 8004400:	f004 fa08 	bl	8008814 <HAL_TIM_Base_Stop>
    HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 8004404:	2100      	movs	r1, #0
 8004406:	4814      	ldr	r0, [pc, #80]	; (8004458 <timerB_init+0x60>)
 8004408:	f004 fb22 	bl	8008a50 <HAL_TIM_OC_Stop_IT>
    HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_2);
 800440c:	2104      	movs	r1, #4
 800440e:	4812      	ldr	r0, [pc, #72]	; (8004458 <timerB_init+0x60>)
 8004410:	f004 fb1e 	bl	8008a50 <HAL_TIM_OC_Stop_IT>
    HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_3);
 8004414:	2108      	movs	r1, #8
 8004416:	4810      	ldr	r0, [pc, #64]	; (8004458 <timerB_init+0x60>)
 8004418:	f004 fb1a 	bl	8008a50 <HAL_TIM_OC_Stop_IT>
//        timerB_callbacks[i] = 0x0;
//        timerB_periods[i] = 0;
//    }

	// clear the CCR and CCTL registers, and the associated callbacks
	for (i=0;i<TIMERB_CCR_NUMBER;i++)
 800441c:	2300      	movs	r3, #0
 800441e:	80fb      	strh	r3, [r7, #6]
 8004420:	e00c      	b.n	800443c <timerB_init+0x44>
	{
		timerB_callbacks[i] = 0x0;
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	4a0d      	ldr	r2, [pc, #52]	; (800445c <timerB_init+0x64>)
 8004426:	2100      	movs	r1, #0
 8004428:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		timerB_periods[i] = 0;
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	4a0c      	ldr	r2, [pc, #48]	; (8004460 <timerB_init+0x68>)
 8004430:	2100      	movs	r1, #0
 8004432:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (i=0;i<TIMERB_CCR_NUMBER;i++)
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	3301      	adds	r3, #1
 800443a:	80fb      	strh	r3, [r7, #6]
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	2b06      	cmp	r3, #6
 8004440:	d9ef      	bls.n	8004422 <timerB_init+0x2a>
	}


    // clear the overflow callback
    timerB_callbacks[TIMERB_CCR_NUMBER] = 0x0;
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <timerB_init+0x64>)
 8004444:	2200      	movs	r2, #0
 8004446:	61da      	str	r2, [r3, #28]

	HAL_TIM_Base_Start(&htim4);
 8004448:	4803      	ldr	r0, [pc, #12]	; (8004458 <timerB_init+0x60>)
 800444a:	f004 f97b 	bl	8008744 <HAL_TIM_Base_Start>

}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	2000035c 	.word	0x2000035c
 800445c:	2000065c 	.word	0x2000065c
 8004460:	2000067c 	.word	0x2000067c

08004464 <timerB_register_cb>:




uint16_t timerB_register_cb (uint16_t alarm, timerBcb f)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	4603      	mov	r3, r0
 800446c:	6039      	str	r1, [r7, #0]
 800446e:	80fb      	strh	r3, [r7, #6]
    if (alarm > TIMERB_CCR_NUMBER)
 8004470:	88fb      	ldrh	r3, [r7, #6]
 8004472:	2b07      	cmp	r3, #7
 8004474:	d901      	bls.n	800447a <timerB_register_cb+0x16>
    {
        return 0;
 8004476:	2300      	movs	r3, #0
 8004478:	e005      	b.n	8004486 <timerB_register_cb+0x22>
    }

    timerB_callbacks[alarm] = f;
 800447a:	88fb      	ldrh	r3, [r7, #6]
 800447c:	4905      	ldr	r1, [pc, #20]	; (8004494 <timerB_register_cb+0x30>)
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
//        else
//        {
//            TBCTL |= TBIE;
//        }
    }
    return 1;
 8004484:	2301      	movs	r3, #1
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	2000065c 	.word	0x2000065c

08004498 <timerB_time>:

uint16_t timerB_time()
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
    return htim4.Instance->CNT;
 800449c:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <timerB_time+0x18>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	b29b      	uxth	r3, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	2000035c 	.word	0x2000035c

080044b4 <timerB_set_alarm_from_now>:
	HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_2);
	HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_3);
}

uint16_t timerB_set_alarm_from_now  (uint16_t alarm, uint16_t ticks, uint16_t period)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	80fb      	strh	r3, [r7, #6]
 80044be:	460b      	mov	r3, r1
 80044c0:	80bb      	strh	r3, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	807b      	strh	r3, [r7, #2]
    uint16_t now;
    now = timerB_time();
 80044c6:	f7ff ffe7 	bl	8004498 <timerB_time>
 80044ca:	4603      	mov	r3, r0
 80044cc:	81fb      	strh	r3, [r7, #14]

    if (alarm >= TIMERB_CCR_NUMBER)
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	2b06      	cmp	r3, #6
 80044d2:	d901      	bls.n	80044d8 <timerB_set_alarm_from_now+0x24>
    {
        return 0;
 80044d4:	2300      	movs	r3, #0
 80044d6:	e03d      	b.n	8004554 <timerB_set_alarm_from_now+0xa0>
    }
    switch ( alarm )
 80044d8:	88fb      	ldrh	r3, [r7, #6]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d028      	beq.n	8004530 <timerB_set_alarm_from_now+0x7c>
 80044de:	2b02      	cmp	r3, #2
 80044e0:	dc37      	bgt.n	8004552 <timerB_set_alarm_from_now+0x9e>
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <timerB_set_alarm_from_now+0x38>
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d011      	beq.n	800450e <timerB_set_alarm_from_now+0x5a>
 80044ea:	e032      	b.n	8004552 <timerB_set_alarm_from_now+0x9e>
    {
		case 0:

			TIM4->CCR1 = now + ticks;
 80044ec:	89fa      	ldrh	r2, [r7, #14]
 80044ee:	88bb      	ldrh	r3, [r7, #4]
 80044f0:	441a      	add	r2, r3
 80044f2:	4b1a      	ldr	r3, [pc, #104]	; (800455c <timerB_set_alarm_from_now+0xa8>)
 80044f4:	635a      	str	r2, [r3, #52]	; 0x34
			timerB_periods[0] = period;
 80044f6:	4a1a      	ldr	r2, [pc, #104]	; (8004560 <timerB_set_alarm_from_now+0xac>)
 80044f8:	887b      	ldrh	r3, [r7, #2]
 80044fa:	8013      	strh	r3, [r2, #0]
			__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 80044fc:	4b19      	ldr	r3, [pc, #100]	; (8004564 <timerB_set_alarm_from_now+0xb0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	4b18      	ldr	r3, [pc, #96]	; (8004564 <timerB_set_alarm_from_now+0xb0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0202 	orr.w	r2, r2, #2
 800450a:	60da      	str	r2, [r3, #12]
			break;
 800450c:	e021      	b.n	8004552 <timerB_set_alarm_from_now+0x9e>
		case 1:
			TIM4->CCR2 = now + ticks;
 800450e:	89fa      	ldrh	r2, [r7, #14]
 8004510:	88bb      	ldrh	r3, [r7, #4]
 8004512:	441a      	add	r2, r3
 8004514:	4b11      	ldr	r3, [pc, #68]	; (800455c <timerB_set_alarm_from_now+0xa8>)
 8004516:	639a      	str	r2, [r3, #56]	; 0x38
			timerB_periods[1] = period;
 8004518:	4a11      	ldr	r2, [pc, #68]	; (8004560 <timerB_set_alarm_from_now+0xac>)
 800451a:	887b      	ldrh	r3, [r7, #2]
 800451c:	8053      	strh	r3, [r2, #2]
			__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 800451e:	4b11      	ldr	r3, [pc, #68]	; (8004564 <timerB_set_alarm_from_now+0xb0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	4b0f      	ldr	r3, [pc, #60]	; (8004564 <timerB_set_alarm_from_now+0xb0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f042 0204 	orr.w	r2, r2, #4
 800452c:	60da      	str	r2, [r3, #12]
			break;
 800452e:	e010      	b.n	8004552 <timerB_set_alarm_from_now+0x9e>
		case 2:
			TIM4->CCR3 = now + ticks;
 8004530:	89fa      	ldrh	r2, [r7, #14]
 8004532:	88bb      	ldrh	r3, [r7, #4]
 8004534:	441a      	add	r2, r3
 8004536:	4b09      	ldr	r3, [pc, #36]	; (800455c <timerB_set_alarm_from_now+0xa8>)
 8004538:	63da      	str	r2, [r3, #60]	; 0x3c
			timerB_periods[2] = period;
 800453a:	4a09      	ldr	r2, [pc, #36]	; (8004560 <timerB_set_alarm_from_now+0xac>)
 800453c:	887b      	ldrh	r3, [r7, #2]
 800453e:	8093      	strh	r3, [r2, #4]
			__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC3);
 8004540:	4b08      	ldr	r3, [pc, #32]	; (8004564 <timerB_set_alarm_from_now+0xb0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	4b07      	ldr	r3, [pc, #28]	; (8004564 <timerB_set_alarm_from_now+0xb0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0208 	orr.w	r2, r2, #8
 800454e:	60da      	str	r2, [r3, #12]
			break;
 8004550:	bf00      	nop
    }

//    TBCCTLx[alarm] = CCIE;


    return 1;
 8004552:	2301      	movs	r3, #1
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40000800 	.word	0x40000800
 8004560:	2000067c 	.word	0x2000067c
 8004564:	2000035c 	.word	0x2000035c

08004568 <timerB_set_alarm_from_time>:

uint16_t timerB_set_alarm_from_time (uint16_t alarm, uint16_t ticks, uint16_t period, uint16_t ref)
{
 8004568:	b490      	push	{r4, r7}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	4604      	mov	r4, r0
 8004570:	4608      	mov	r0, r1
 8004572:	4611      	mov	r1, r2
 8004574:	461a      	mov	r2, r3
 8004576:	4623      	mov	r3, r4
 8004578:	80fb      	strh	r3, [r7, #6]
 800457a:	4603      	mov	r3, r0
 800457c:	80bb      	strh	r3, [r7, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	807b      	strh	r3, [r7, #2]
 8004582:	4613      	mov	r3, r2
 8004584:	803b      	strh	r3, [r7, #0]
    if (alarm >= TIMERB_CCR_NUMBER)
 8004586:	88fb      	ldrh	r3, [r7, #6]
 8004588:	2b06      	cmp	r3, #6
 800458a:	d901      	bls.n	8004590 <timerB_set_alarm_from_time+0x28>
    {
        return 0;
 800458c:	2300      	movs	r3, #0
 800458e:	e04c      	b.n	800462a <timerB_set_alarm_from_time+0xc2>
    }

    //TBCCRx[alarm] = ref + ticks;
    //TBCCTLx[alarm] = CCIE;
    switch ( alarm )
 8004590:	88fb      	ldrh	r3, [r7, #6]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d032      	beq.n	80045fc <timerB_set_alarm_from_time+0x94>
 8004596:	2b02      	cmp	r3, #2
 8004598:	dc46      	bgt.n	8004628 <timerB_set_alarm_from_time+0xc0>
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <timerB_set_alarm_from_time+0x3c>
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d016      	beq.n	80045d0 <timerB_set_alarm_from_time+0x68>
 80045a2:	e041      	b.n	8004628 <timerB_set_alarm_from_time+0xc0>
    {
    	case 0:
    		__HAL_TIM_CLEAR_IT(&htim4, TIM_IT_CC1);
 80045a4:	4b23      	ldr	r3, [pc, #140]	; (8004634 <timerB_set_alarm_from_time+0xcc>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0202 	mvn.w	r2, #2
 80045ac:	611a      	str	r2, [r3, #16]
			TIM4->CCR1 = ref + ticks;
 80045ae:	883a      	ldrh	r2, [r7, #0]
 80045b0:	88bb      	ldrh	r3, [r7, #4]
 80045b2:	441a      	add	r2, r3
 80045b4:	4b20      	ldr	r3, [pc, #128]	; (8004638 <timerB_set_alarm_from_time+0xd0>)
 80045b6:	635a      	str	r2, [r3, #52]	; 0x34
			timerB_periods[0] = period;
 80045b8:	4a20      	ldr	r2, [pc, #128]	; (800463c <timerB_set_alarm_from_time+0xd4>)
 80045ba:	887b      	ldrh	r3, [r7, #2]
 80045bc:	8013      	strh	r3, [r2, #0]
			__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 80045be:	4b1d      	ldr	r3, [pc, #116]	; (8004634 <timerB_set_alarm_from_time+0xcc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68da      	ldr	r2, [r3, #12]
 80045c4:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <timerB_set_alarm_from_time+0xcc>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0202 	orr.w	r2, r2, #2
 80045cc:	60da      	str	r2, [r3, #12]
			break;
 80045ce:	e02b      	b.n	8004628 <timerB_set_alarm_from_time+0xc0>
		case 1:
			__HAL_TIM_CLEAR_IT(&htim4, TIM_IT_CC2);
 80045d0:	4b18      	ldr	r3, [pc, #96]	; (8004634 <timerB_set_alarm_from_time+0xcc>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f06f 0204 	mvn.w	r2, #4
 80045d8:	611a      	str	r2, [r3, #16]
			TIM4->CCR2 = ref + ticks;
 80045da:	883a      	ldrh	r2, [r7, #0]
 80045dc:	88bb      	ldrh	r3, [r7, #4]
 80045de:	441a      	add	r2, r3
 80045e0:	4b15      	ldr	r3, [pc, #84]	; (8004638 <timerB_set_alarm_from_time+0xd0>)
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38
			timerB_periods[1] = period;
 80045e4:	4a15      	ldr	r2, [pc, #84]	; (800463c <timerB_set_alarm_from_time+0xd4>)
 80045e6:	887b      	ldrh	r3, [r7, #2]
 80045e8:	8053      	strh	r3, [r2, #2]
			__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC2);
 80045ea:	4b12      	ldr	r3, [pc, #72]	; (8004634 <timerB_set_alarm_from_time+0xcc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	4b10      	ldr	r3, [pc, #64]	; (8004634 <timerB_set_alarm_from_time+0xcc>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0204 	orr.w	r2, r2, #4
 80045f8:	60da      	str	r2, [r3, #12]
			break;
 80045fa:	e015      	b.n	8004628 <timerB_set_alarm_from_time+0xc0>
		case 2:
			__HAL_TIM_CLEAR_IT(&htim4, TIM_IT_CC3);
 80045fc:	4b0d      	ldr	r3, [pc, #52]	; (8004634 <timerB_set_alarm_from_time+0xcc>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f06f 0208 	mvn.w	r2, #8
 8004604:	611a      	str	r2, [r3, #16]
			TIM4->CCR3 = ref + ticks;
 8004606:	883a      	ldrh	r2, [r7, #0]
 8004608:	88bb      	ldrh	r3, [r7, #4]
 800460a:	441a      	add	r2, r3
 800460c:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <timerB_set_alarm_from_time+0xd0>)
 800460e:	63da      	str	r2, [r3, #60]	; 0x3c
			timerB_periods[2] = period;
 8004610:	4a0a      	ldr	r2, [pc, #40]	; (800463c <timerB_set_alarm_from_time+0xd4>)
 8004612:	887b      	ldrh	r3, [r7, #2]
 8004614:	8093      	strh	r3, [r2, #4]
			__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC3);
 8004616:	4b07      	ldr	r3, [pc, #28]	; (8004634 <timerB_set_alarm_from_time+0xcc>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <timerB_set_alarm_from_time+0xcc>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0208 	orr.w	r2, r2, #8
 8004624:	60da      	str	r2, [r3, #12]
			break;
 8004626:	bf00      	nop
    }


    return 1;
 8004628:	2301      	movs	r3, #1
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bc90      	pop	{r4, r7}
 8004632:	4770      	bx	lr
 8004634:	2000035c 	.word	0x2000035c
 8004638:	40000800 	.word	0x40000800
 800463c:	2000067c 	.word	0x2000067c

08004640 <timerB_unset_alarm>:

uint16_t timerB_unset_alarm(uint16_t alarm)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	80fb      	strh	r3, [r7, #6]
    if (alarm >= TIMERB_CCR_NUMBER)
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2b06      	cmp	r3, #6
 800464e:	d901      	bls.n	8004654 <timerB_unset_alarm+0x14>
    {
        return 0;
 8004650:	2300      	movs	r3, #0
 8004652:	e05b      	b.n	800470c <timerB_unset_alarm+0xcc>
    }

    switch ( alarm )
 8004654:	88fb      	ldrh	r3, [r7, #6]
 8004656:	2b02      	cmp	r3, #2
 8004658:	d03c      	beq.n	80046d4 <timerB_unset_alarm+0x94>
 800465a:	2b02      	cmp	r3, #2
 800465c:	dc55      	bgt.n	800470a <timerB_unset_alarm+0xca>
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <timerB_unset_alarm+0x28>
 8004662:	2b01      	cmp	r3, #1
 8004664:	d01b      	beq.n	800469e <timerB_unset_alarm+0x5e>
 8004666:	e050      	b.n	800470a <timerB_unset_alarm+0xca>
	{
		case 0:
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8004668:	4b2b      	ldr	r3, [pc, #172]	; (8004718 <timerB_unset_alarm+0xd8>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	4b2a      	ldr	r3, [pc, #168]	; (8004718 <timerB_unset_alarm+0xd8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0202 	bic.w	r2, r2, #2
 8004676:	60da      	str	r2, [r3, #12]
			__HAL_TIM_CLEAR_IT(&htim4, TIM_IT_CC1);
 8004678:	4b27      	ldr	r3, [pc, #156]	; (8004718 <timerB_unset_alarm+0xd8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0202 	mvn.w	r2, #2
 8004680:	611a      	str	r2, [r3, #16]
			TIM4->CCR1 = 0;
 8004682:	4b26      	ldr	r3, [pc, #152]	; (800471c <timerB_unset_alarm+0xdc>)
 8004684:	2200      	movs	r2, #0
 8004686:	635a      	str	r2, [r3, #52]	; 0x34
			timerB_periods[alarm] = 0;
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	4a25      	ldr	r2, [pc, #148]	; (8004720 <timerB_unset_alarm+0xe0>)
 800468c:	2100      	movs	r1, #0
 800468e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			timerB_callbacks[alarm] = 0;
 8004692:	88fb      	ldrh	r3, [r7, #6]
 8004694:	4a23      	ldr	r2, [pc, #140]	; (8004724 <timerB_unset_alarm+0xe4>)
 8004696:	2100      	movs	r1, #0
 8004698:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			break;
 800469c:	e035      	b.n	800470a <timerB_unset_alarm+0xca>
		case 1:
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
 800469e:	4b1e      	ldr	r3, [pc, #120]	; (8004718 <timerB_unset_alarm+0xd8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <timerB_unset_alarm+0xd8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0204 	bic.w	r2, r2, #4
 80046ac:	60da      	str	r2, [r3, #12]
			__HAL_TIM_CLEAR_IT(&htim4, TIM_IT_CC2);
 80046ae:	4b1a      	ldr	r3, [pc, #104]	; (8004718 <timerB_unset_alarm+0xd8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f06f 0204 	mvn.w	r2, #4
 80046b6:	611a      	str	r2, [r3, #16]
			TIM4->CCR2 = 0;
 80046b8:	4b18      	ldr	r3, [pc, #96]	; (800471c <timerB_unset_alarm+0xdc>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
			timerB_periods[alarm] = 0;
 80046be:	88fb      	ldrh	r3, [r7, #6]
 80046c0:	4a17      	ldr	r2, [pc, #92]	; (8004720 <timerB_unset_alarm+0xe0>)
 80046c2:	2100      	movs	r1, #0
 80046c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			timerB_callbacks[alarm] = 0;
 80046c8:	88fb      	ldrh	r3, [r7, #6]
 80046ca:	4a16      	ldr	r2, [pc, #88]	; (8004724 <timerB_unset_alarm+0xe4>)
 80046cc:	2100      	movs	r1, #0
 80046ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			break;
 80046d2:	e01a      	b.n	800470a <timerB_unset_alarm+0xca>
		case 2:
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
 80046d4:	4b10      	ldr	r3, [pc, #64]	; (8004718 <timerB_unset_alarm+0xd8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	4b0f      	ldr	r3, [pc, #60]	; (8004718 <timerB_unset_alarm+0xd8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0208 	bic.w	r2, r2, #8
 80046e2:	60da      	str	r2, [r3, #12]
			__HAL_TIM_CLEAR_IT(&htim4, TIM_IT_CC3);
 80046e4:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <timerB_unset_alarm+0xd8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f06f 0208 	mvn.w	r2, #8
 80046ec:	611a      	str	r2, [r3, #16]
			TIM4->CCR3 = 0;
 80046ee:	4b0b      	ldr	r3, [pc, #44]	; (800471c <timerB_unset_alarm+0xdc>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	63da      	str	r2, [r3, #60]	; 0x3c
			timerB_periods[alarm] = 0;
 80046f4:	88fb      	ldrh	r3, [r7, #6]
 80046f6:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <timerB_unset_alarm+0xe0>)
 80046f8:	2100      	movs	r1, #0
 80046fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			timerB_callbacks[alarm] = 0;
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	4a08      	ldr	r2, [pc, #32]	; (8004724 <timerB_unset_alarm+0xe4>)
 8004702:	2100      	movs	r1, #0
 8004704:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

			break;
 8004708:	bf00      	nop
	}


    return 1;
 800470a:	2301      	movs	r3, #1
}
 800470c:	4618      	mov	r0, r3
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	2000035c 	.word	0x2000035c
 800471c:	40000800 	.word	0x40000800
 8004720:	2000067c 	.word	0x2000067c
 8004724:	2000065c 	.word	0x2000065c

08004728 <HAL_TIM_OC_DelayElapsedCallback>:


void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
	//if ( htim->Instance != TIM4 ) return;

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	7f1b      	ldrb	r3, [r3, #28]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d11f      	bne.n	8004778 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	{
		if (timerB_periods[0])
 8004738:	4b35      	ldr	r3, [pc, #212]	; (8004810 <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <HAL_TIM_OC_DelayElapsedCallback+0x2a>
		{
			TIM4->CCR1 += timerB_periods[0];
 8004740:	4b34      	ldr	r3, [pc, #208]	; (8004814 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 8004742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004744:	4a32      	ldr	r2, [pc, #200]	; (8004810 <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 8004746:	8812      	ldrh	r2, [r2, #0]
 8004748:	4611      	mov	r1, r2
 800474a:	4a32      	ldr	r2, [pc, #200]	; (8004814 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 800474c:	440b      	add	r3, r1
 800474e:	6353      	str	r3, [r2, #52]	; 0x34
 8004750:	e00a      	b.n	8004768 <HAL_TIM_OC_DelayElapsedCallback+0x40>
		}
		else
		{
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8004752:	4b31      	ldr	r3, [pc, #196]	; (8004818 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	4b2f      	ldr	r3, [pc, #188]	; (8004818 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0202 	bic.w	r2, r2, #2
 8004760:	60da      	str	r2, [r3, #12]
			TIM4->CCR1 = 0;
 8004762:	4b2c      	ldr	r3, [pc, #176]	; (8004814 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 8004764:	2200      	movs	r2, #0
 8004766:	635a      	str	r2, [r3, #52]	; 0x34

		}
		if (timerB_callbacks[0])
 8004768:	4b2c      	ldr	r3, [pc, #176]	; (800481c <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d04a      	beq.n	8004806 <HAL_TIM_OC_DelayElapsedCallback+0xde>
		{
 			if ( timerB_callbacks[0]() )
 8004770:	4b2a      	ldr	r3, [pc, #168]	; (800481c <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4798      	blx	r3
			{

			}
		}
	}
}
 8004776:	e046      	b.n	8004806 <HAL_TIM_OC_DelayElapsedCallback+0xde>
	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	7f1b      	ldrb	r3, [r3, #28]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d11f      	bne.n	80047c0 <HAL_TIM_OC_DelayElapsedCallback+0x98>
		if (timerB_periods[1])
 8004780:	4b23      	ldr	r3, [pc, #140]	; (8004810 <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 8004782:	885b      	ldrh	r3, [r3, #2]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_TIM_OC_DelayElapsedCallback+0x72>
			TIM4->CCR2 += timerB_periods[1];
 8004788:	4b22      	ldr	r3, [pc, #136]	; (8004814 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	4a20      	ldr	r2, [pc, #128]	; (8004810 <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 800478e:	8852      	ldrh	r2, [r2, #2]
 8004790:	4611      	mov	r1, r2
 8004792:	4a20      	ldr	r2, [pc, #128]	; (8004814 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 8004794:	440b      	add	r3, r1
 8004796:	6393      	str	r3, [r2, #56]	; 0x38
 8004798:	e00a      	b.n	80047b0 <HAL_TIM_OC_DelayElapsedCallback+0x88>
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC2);
 800479a:	4b1f      	ldr	r3, [pc, #124]	; (8004818 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	4b1d      	ldr	r3, [pc, #116]	; (8004818 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0204 	bic.w	r2, r2, #4
 80047a8:	60da      	str	r2, [r3, #12]
			TIM4->CCR2 = 0;
 80047aa:	4b1a      	ldr	r3, [pc, #104]	; (8004814 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
		if (timerB_callbacks[1])
 80047b0:	4b1a      	ldr	r3, [pc, #104]	; (800481c <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d026      	beq.n	8004806 <HAL_TIM_OC_DelayElapsedCallback+0xde>
			if ( timerB_callbacks[1]() )
 80047b8:	4b18      	ldr	r3, [pc, #96]	; (800481c <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	4798      	blx	r3
}
 80047be:	e022      	b.n	8004806 <HAL_TIM_OC_DelayElapsedCallback+0xde>
	else if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	7f1b      	ldrb	r3, [r3, #28]
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d11e      	bne.n	8004806 <HAL_TIM_OC_DelayElapsedCallback+0xde>
		if (timerB_periods[2])
 80047c8:	4b11      	ldr	r3, [pc, #68]	; (8004810 <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 80047ca:	889b      	ldrh	r3, [r3, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d008      	beq.n	80047e2 <HAL_TIM_OC_DelayElapsedCallback+0xba>
			TIM4->CCR3 += timerB_periods[2];
 80047d0:	4b10      	ldr	r3, [pc, #64]	; (8004814 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 80047d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d4:	4a0e      	ldr	r2, [pc, #56]	; (8004810 <HAL_TIM_OC_DelayElapsedCallback+0xe8>)
 80047d6:	8892      	ldrh	r2, [r2, #4]
 80047d8:	4611      	mov	r1, r2
 80047da:	4a0e      	ldr	r2, [pc, #56]	; (8004814 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 80047dc:	440b      	add	r3, r1
 80047de:	63d3      	str	r3, [r2, #60]	; 0x3c
 80047e0:	e00a      	b.n	80047f8 <HAL_TIM_OC_DelayElapsedCallback+0xd0>
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC3);
 80047e2:	4b0d      	ldr	r3, [pc, #52]	; (8004818 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <HAL_TIM_OC_DelayElapsedCallback+0xf0>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0208 	bic.w	r2, r2, #8
 80047f0:	60da      	str	r2, [r3, #12]
			TIM4->CCR3 = 0;
 80047f2:	4b08      	ldr	r3, [pc, #32]	; (8004814 <HAL_TIM_OC_DelayElapsedCallback+0xec>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	63da      	str	r2, [r3, #60]	; 0x3c
		if (timerB_callbacks[2])
 80047f8:	4b08      	ldr	r3, [pc, #32]	; (800481c <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <HAL_TIM_OC_DelayElapsedCallback+0xde>
			if ( timerB_callbacks[2]() )
 8004800:	4b06      	ldr	r3, [pc, #24]	; (800481c <HAL_TIM_OC_DelayElapsedCallback+0xf4>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	4798      	blx	r3
}
 8004806:	bf00      	nop
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	2000067c 	.word	0x2000067c
 8004814:	40000800 	.word	0x40000800
 8004818:	2000035c 	.word	0x2000035c
 800481c:	2000065c 	.word	0x2000065c

08004820 <ultraTimerStop>:
}



void ultraTimerStop()
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
	uint32_t distance_value;
	ultra_sen_value= (TIM15->CNT)/50;
 8004826:	4b38      	ldr	r3, [pc, #224]	; (8004908 <ultraTimerStop+0xe8>)
 8004828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482a:	4a38      	ldr	r2, [pc, #224]	; (800490c <ultraTimerStop+0xec>)
 800482c:	fba2 2303 	umull	r2, r3, r2, r3
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483a:	4b35      	ldr	r3, [pc, #212]	; (8004910 <ultraTimerStop+0xf0>)
 800483c:	edc3 7a00 	vstr	s15, [r3]
	HAL_TIM_Base_Stop(&htim15);
 8004840:	4834      	ldr	r0, [pc, #208]	; (8004914 <ultraTimerStop+0xf4>)
 8004842:	f003 ffe7 	bl	8008814 <HAL_TIM_Base_Stop>
	// HAL_TIM_Base_Stop_IT(&htim15);
	distance_value = (uint32_t)(ultra_sen_value *10);
 8004846:	4b32      	ldr	r3, [pc, #200]	; (8004910 <ultraTimerStop+0xf0>)
 8004848:	edd3 7a00 	vldr	s15, [r3]
 800484c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8004850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004858:	ee17 3a90 	vmov	r3, s15
 800485c:	607b      	str	r3, [r7, #4]
	sen_1_h = distance_value/1000;    
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a2d      	ldr	r2, [pc, #180]	; (8004918 <ultraTimerStop+0xf8>)
 8004862:	fba2 2303 	umull	r2, r3, r2, r3
 8004866:	099b      	lsrs	r3, r3, #6
 8004868:	b2da      	uxtb	r2, r3
 800486a:	4b2c      	ldr	r3, [pc, #176]	; (800491c <ultraTimerStop+0xfc>)
 800486c:	701a      	strb	r2, [r3, #0]
	sen_1_l = distance_value%1000/100;   
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	4b29      	ldr	r3, [pc, #164]	; (8004918 <ultraTimerStop+0xf8>)
 8004872:	fba3 1302 	umull	r1, r3, r3, r2
 8004876:	099b      	lsrs	r3, r3, #6
 8004878:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800487c:	fb01 f303 	mul.w	r3, r1, r3
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	4a22      	ldr	r2, [pc, #136]	; (800490c <ultraTimerStop+0xec>)
 8004884:	fba2 2303 	umull	r2, r3, r2, r3
 8004888:	095b      	lsrs	r3, r3, #5
 800488a:	b2da      	uxtb	r2, r3
 800488c:	4b24      	ldr	r3, [pc, #144]	; (8004920 <ultraTimerStop+0x100>)
 800488e:	701a      	strb	r2, [r3, #0]
	sen_2_h = distance_value%1000%100/10;
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	4b21      	ldr	r3, [pc, #132]	; (8004918 <ultraTimerStop+0xf8>)
 8004894:	fba3 1302 	umull	r1, r3, r3, r2
 8004898:	099b      	lsrs	r3, r3, #6
 800489a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800489e:	fb01 f303 	mul.w	r3, r1, r3
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	4a19      	ldr	r2, [pc, #100]	; (800490c <ultraTimerStop+0xec>)
 80048a6:	fba2 1203 	umull	r1, r2, r2, r3
 80048aa:	0952      	lsrs	r2, r2, #5
 80048ac:	2164      	movs	r1, #100	; 0x64
 80048ae:	fb01 f202 	mul.w	r2, r1, r2
 80048b2:	1a9a      	subs	r2, r3, r2
 80048b4:	4b1b      	ldr	r3, [pc, #108]	; (8004924 <ultraTimerStop+0x104>)
 80048b6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ba:	08db      	lsrs	r3, r3, #3
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	4b1a      	ldr	r3, [pc, #104]	; (8004928 <ultraTimerStop+0x108>)
 80048c0:	701a      	strb	r2, [r3, #0]
	sen_2_l = distance_value%1000%100%10;
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	4b14      	ldr	r3, [pc, #80]	; (8004918 <ultraTimerStop+0xf8>)
 80048c6:	fba3 1302 	umull	r1, r3, r3, r2
 80048ca:	099b      	lsrs	r3, r3, #6
 80048cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80048d0:	fb01 f303 	mul.w	r3, r1, r3
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	4a0d      	ldr	r2, [pc, #52]	; (800490c <ultraTimerStop+0xec>)
 80048d8:	fba2 1203 	umull	r1, r2, r2, r3
 80048dc:	0952      	lsrs	r2, r2, #5
 80048de:	2164      	movs	r1, #100	; 0x64
 80048e0:	fb01 f202 	mul.w	r2, r1, r2
 80048e4:	1a9a      	subs	r2, r3, r2
 80048e6:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <ultraTimerStop+0x104>)
 80048e8:	fba3 1302 	umull	r1, r3, r3, r2
 80048ec:	08d9      	lsrs	r1, r3, #3
 80048ee:	460b      	mov	r3, r1
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	1ad1      	subs	r1, r2, r3
 80048f8:	b2ca      	uxtb	r2, r1
 80048fa:	4b0c      	ldr	r3, [pc, #48]	; (800492c <ultraTimerStop+0x10c>)
 80048fc:	701a      	strb	r2, [r3, #0]
}
 80048fe:	bf00      	nop
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40014000 	.word	0x40014000
 800490c:	51eb851f 	.word	0x51eb851f
 8004910:	2000068c 	.word	0x2000068c
 8004914:	200003a8 	.word	0x200003a8
 8004918:	10624dd3 	.word	0x10624dd3
 800491c:	2000054b 	.word	0x2000054b
 8004920:	2000054c 	.word	0x2000054c
 8004924:	cccccccd 	.word	0xcccccccd
 8004928:	2000054d 	.word	0x2000054d
 800492c:	2000054e 	.word	0x2000054e

08004930 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	71fb      	strb	r3, [r7, #7]
  /* Default configuration at reset is:                      */
  /* - Prefetch disabled                                     */
  /* - Instruction cache enabled                             */
  /* - Data cache enabled                                    */
#if (INSTRUCTION_CACHE_ENABLE == 0)
   __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800493a:	4b0f      	ldr	r3, [pc, #60]	; (8004978 <HAL_Init+0x48>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a0e      	ldr	r2, [pc, #56]	; (8004978 <HAL_Init+0x48>)
 8004940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004944:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
 8004946:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <HAL_Init+0x48>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a0b      	ldr	r2, [pc, #44]	; (8004978 <HAL_Init+0x48>)
 800494c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004950:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004952:	2003      	movs	r0, #3
 8004954:	f000 fbc2 	bl	80050dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004958:	200f      	movs	r0, #15
 800495a:	f000 f80f 	bl	800497c <HAL_InitTick>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_Init+0x3a>
  {
    status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	71fb      	strb	r3, [r7, #7]
 8004968:	e001      	b.n	800496e <HAL_Init+0x3e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800496a:	f7fc fe79 	bl	8001660 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800496e:	79fb      	ldrb	r3, [r7, #7]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40022000 	.word	0x40022000

0800497c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004988:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <HAL_InitTick+0x6c>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d023      	beq.n	80049d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004990:	4b16      	ldr	r3, [pc, #88]	; (80049ec <HAL_InitTick+0x70>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <HAL_InitTick+0x6c>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	4619      	mov	r1, r3
 800499a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800499e:	fbb3 f3f1 	udiv	r3, r3, r1
 80049a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fbdf 	bl	800516a <HAL_SYSTICK_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10f      	bne.n	80049d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b0f      	cmp	r3, #15
 80049b6:	d809      	bhi.n	80049cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049b8:	2200      	movs	r2, #0
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	f04f 30ff 	mov.w	r0, #4294967295
 80049c0:	f000 fb97 	bl	80050f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80049c4:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <HAL_InitTick+0x74>)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	e007      	b.n	80049dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
 80049d0:	e004      	b.n	80049dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
 80049d6:	e001      	b.n	80049dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	2000000c 	.word	0x2000000c
 80049ec:	20000000 	.word	0x20000000
 80049f0:	20000008 	.word	0x20000008

080049f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80049f8:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_IncTick+0x20>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	461a      	mov	r2, r3
 80049fe:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <HAL_IncTick+0x24>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4413      	add	r3, r2
 8004a04:	4a04      	ldr	r2, [pc, #16]	; (8004a18 <HAL_IncTick+0x24>)
 8004a06:	6013      	str	r3, [r2, #0]
}
 8004a08:	bf00      	nop
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	2000000c 	.word	0x2000000c
 8004a18:	20000690 	.word	0x20000690

08004a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8004a20:	4b03      	ldr	r3, [pc, #12]	; (8004a30 <HAL_GetTick+0x14>)
 8004a22:	681b      	ldr	r3, [r3, #0]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	20000690 	.word	0x20000690

08004a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a3c:	f7ff ffee 	bl	8004a1c <HAL_GetTick>
 8004a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d005      	beq.n	8004a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004a4e:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <HAL_Delay+0x44>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	461a      	mov	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a5a:	bf00      	nop
 8004a5c:	f7ff ffde 	bl	8004a1c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d8f7      	bhi.n	8004a5c <HAL_Delay+0x28>
  {
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	2000000c 	.word	0x2000000c

08004a7c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004a80:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <HAL_SuspendTick+0x1c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a04      	ldr	r2, [pc, #16]	; (8004a98 <HAL_SuspendTick+0x1c>)
 8004a86:	f023 0302 	bic.w	r3, r3, #2
 8004a8a:	6013      	str	r3, [r2, #0]
}
 8004a8c:	bf00      	nop
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	e000e010 	.word	0xe000e010

08004a9c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004aa0:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <HAL_ResumeTick+0x1c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a04      	ldr	r2, [pc, #16]	; (8004ab8 <HAL_ResumeTick+0x1c>)
 8004aa6:	f043 0302 	orr.w	r3, r3, #2
 8004aaa:	6013      	str	r3, [r2, #0]
}
 8004aac:	bf00      	nop
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	e000e010 	.word	0xe000e010

08004abc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004acc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ad0:	f043 0202 	orr.w	r2, r3, #2
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d101      	bne.n	8004afc <LL_ADC_IsEnabled+0x18>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <LL_ADC_IsEnabled+0x1a>
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d101      	bne.n	8004b22 <LL_ADC_IsDisableOngoing+0x18>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e000      	b.n	8004b24 <LL_ADC_IsDisableOngoing+0x1a>
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b44:	f043 0210 	orr.w	r2, r3, #16
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b04      	cmp	r3, #4
 8004b6a:	d101      	bne.n	8004b70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e000      	b.n	8004b72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004b92:	f043 0220 	orr.w	r2, r3, #32
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d101      	bne.n	8004bbe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d101      	bne.n	8004be2 <HAL_ADC_Stop_DMA+0x16>
 8004bde:	2302      	movs	r3, #2
 8004be0:	e051      	b.n	8004c86 <HAL_ADC_Stop_DMA+0xba>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004bea:	2103      	movs	r1, #3
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f84f 	bl	8004c90 <ADC_ConversionStop>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d13f      	bne.n	8004c7c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d10f      	bne.n	8004c3a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 faaf 	bl	8005182 <HAL_DMA_Abort>
 8004c24:	4603      	mov	r3, r0
 8004c26:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d005      	beq.n	8004c3a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c32:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 0210 	bic.w	r2, r2, #16
 8004c48:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d105      	bne.n	8004c5c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f8d9 	bl	8004e08 <ADC_Disable>
 8004c56:	4603      	mov	r3, r0
 8004c58:	73fb      	strb	r3, [r7, #15]
 8004c5a:	e002      	b.n	8004c62 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f8d3 	bl	8004e08 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d109      	bne.n	8004c7c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c70:	f023 0301 	bic.w	r3, r3, #1
 8004c74:	f043 0201 	orr.w	r2, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
	...

08004c90 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff ff56 	bl	8004b58 <LL_ADC_REG_IsConversionOngoing>
 8004cac:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff ff77 	bl	8004ba6 <LL_ADC_INJ_IsConversionOngoing>
 8004cb8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d103      	bne.n	8004cc8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 8098 	beq.w	8004df8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d02a      	beq.n	8004d2c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	7e5b      	ldrb	r3, [r3, #25]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d126      	bne.n	8004d2c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	7e1b      	ldrb	r3, [r3, #24]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d122      	bne.n	8004d2c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004cea:	e014      	b.n	8004d16 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4a45      	ldr	r2, [pc, #276]	; (8004e04 <ADC_ConversionStop+0x174>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d90d      	bls.n	8004d10 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf8:	f043 0210 	orr.w	r2, r3, #16
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d04:	f043 0201 	orr.w	r2, r3, #1
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e074      	b.n	8004dfa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	3301      	adds	r3, #1
 8004d14:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d20:	2b40      	cmp	r3, #64	; 0x40
 8004d22:	d1e3      	bne.n	8004cec <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2240      	movs	r2, #64	; 0x40
 8004d2a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d014      	beq.n	8004d5c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7ff ff0e 	bl	8004b58 <LL_ADC_REG_IsConversionOngoing>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00c      	beq.n	8004d5c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff fedf 	bl	8004b0a <LL_ADC_IsDisableOngoing>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d104      	bne.n	8004d5c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff feea 	bl	8004b30 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d014      	beq.n	8004d8c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff ff1d 	bl	8004ba6 <LL_ADC_INJ_IsConversionOngoing>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00c      	beq.n	8004d8c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff fec7 	bl	8004b0a <LL_ADC_IsDisableOngoing>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d104      	bne.n	8004d8c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff fef9 	bl	8004b7e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d005      	beq.n	8004d9e <ADC_ConversionStop+0x10e>
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d105      	bne.n	8004da4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004d98:	230c      	movs	r3, #12
 8004d9a:	617b      	str	r3, [r7, #20]
        break;
 8004d9c:	e005      	b.n	8004daa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004d9e:	2308      	movs	r3, #8
 8004da0:	617b      	str	r3, [r7, #20]
        break;
 8004da2:	e002      	b.n	8004daa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004da4:	2304      	movs	r3, #4
 8004da6:	617b      	str	r3, [r7, #20]
        break;
 8004da8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004daa:	f7ff fe37 	bl	8004a1c <HAL_GetTick>
 8004dae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004db0:	e01b      	b.n	8004dea <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004db2:	f7ff fe33 	bl	8004a1c <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b05      	cmp	r3, #5
 8004dbe:	d914      	bls.n	8004dea <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00d      	beq.n	8004dea <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd2:	f043 0210 	orr.w	r2, r3, #16
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dde:	f043 0201 	orr.w	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e007      	b.n	8004dfa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	4013      	ands	r3, r2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1dc      	bne.n	8004db2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3720      	adds	r7, #32
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	a33fffff 	.word	0xa33fffff

08004e08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f7ff fe78 	bl	8004b0a <LL_ADC_IsDisableOngoing>
 8004e1a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fe5f 	bl	8004ae4 <LL_ADC_IsEnabled>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d047      	beq.n	8004ebc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d144      	bne.n	8004ebc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f003 030d 	and.w	r3, r3, #13
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d10c      	bne.n	8004e5a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff fe39 	bl	8004abc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2203      	movs	r2, #3
 8004e50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e52:	f7ff fde3 	bl	8004a1c <HAL_GetTick>
 8004e56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e58:	e029      	b.n	8004eae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	f043 0210 	orr.w	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6a:	f043 0201 	orr.w	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e023      	b.n	8004ebe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e76:	f7ff fdd1 	bl	8004a1c <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d914      	bls.n	8004eae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d00d      	beq.n	8004eae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e96:	f043 0210 	orr.w	r2, r3, #16
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ea2:	f043 0201 	orr.w	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e007      	b.n	8004ebe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1dc      	bne.n	8004e76 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
	...

08004ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <__NVIC_SetPriorityGrouping+0x44>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004efa:	4a04      	ldr	r2, [pc, #16]	; (8004f0c <__NVIC_SetPriorityGrouping+0x44>)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	60d3      	str	r3, [r2, #12]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	e000ed00 	.word	0xe000ed00

08004f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f14:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <__NVIC_GetPriorityGrouping+0x18>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	0a1b      	lsrs	r3, r3, #8
 8004f1a:	f003 0307 	and.w	r3, r3, #7
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	e000ed00 	.word	0xe000ed00

08004f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	db0b      	blt.n	8004f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	f003 021f 	and.w	r2, r3, #31
 8004f44:	4907      	ldr	r1, [pc, #28]	; (8004f64 <__NVIC_EnableIRQ+0x38>)
 8004f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	e000e100 	.word	0xe000e100

08004f68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	db12      	blt.n	8004fa0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	f003 021f 	and.w	r2, r3, #31
 8004f80:	490a      	ldr	r1, [pc, #40]	; (8004fac <__NVIC_DisableIRQ+0x44>)
 8004f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	2001      	movs	r0, #1
 8004f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f8e:	3320      	adds	r3, #32
 8004f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004f94:	f3bf 8f4f 	dsb	sy
}
 8004f98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f9a:	f3bf 8f6f 	isb	sy
}
 8004f9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	e000e100 	.word	0xe000e100

08004fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	6039      	str	r1, [r7, #0]
 8004fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	db0a      	blt.n	8004fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	490c      	ldr	r1, [pc, #48]	; (8004ffc <__NVIC_SetPriority+0x4c>)
 8004fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fce:	0112      	lsls	r2, r2, #4
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fd8:	e00a      	b.n	8004ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	4908      	ldr	r1, [pc, #32]	; (8005000 <__NVIC_SetPriority+0x50>)
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	3b04      	subs	r3, #4
 8004fe8:	0112      	lsls	r2, r2, #4
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	440b      	add	r3, r1
 8004fee:	761a      	strb	r2, [r3, #24]
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	e000e100 	.word	0xe000e100
 8005000:	e000ed00 	.word	0xe000ed00

08005004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005004:	b480      	push	{r7}
 8005006:	b089      	sub	sp, #36	; 0x24
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f1c3 0307 	rsb	r3, r3, #7
 800501e:	2b04      	cmp	r3, #4
 8005020:	bf28      	it	cs
 8005022:	2304      	movcs	r3, #4
 8005024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	3304      	adds	r3, #4
 800502a:	2b06      	cmp	r3, #6
 800502c:	d902      	bls.n	8005034 <NVIC_EncodePriority+0x30>
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3b03      	subs	r3, #3
 8005032:	e000      	b.n	8005036 <NVIC_EncodePriority+0x32>
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005038:	f04f 32ff 	mov.w	r2, #4294967295
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43da      	mvns	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	401a      	ands	r2, r3
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800504c:	f04f 31ff 	mov.w	r1, #4294967295
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	fa01 f303 	lsl.w	r3, r1, r3
 8005056:	43d9      	mvns	r1, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800505c:	4313      	orrs	r3, r2
         );
}
 800505e:	4618      	mov	r0, r3
 8005060:	3724      	adds	r7, #36	; 0x24
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005070:	f3bf 8f4f 	dsb	sy
}
 8005074:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005076:	4b06      	ldr	r3, [pc, #24]	; (8005090 <__NVIC_SystemReset+0x24>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800507e:	4904      	ldr	r1, [pc, #16]	; (8005090 <__NVIC_SystemReset+0x24>)
 8005080:	4b04      	ldr	r3, [pc, #16]	; (8005094 <__NVIC_SystemReset+0x28>)
 8005082:	4313      	orrs	r3, r2
 8005084:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005086:	f3bf 8f4f 	dsb	sy
}
 800508a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800508c:	bf00      	nop
 800508e:	e7fd      	b.n	800508c <__NVIC_SystemReset+0x20>
 8005090:	e000ed00 	.word	0xe000ed00
 8005094:	05fa0004 	.word	0x05fa0004

08005098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050a8:	d301      	bcc.n	80050ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050aa:	2301      	movs	r3, #1
 80050ac:	e00f      	b.n	80050ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050ae:	4a0a      	ldr	r2, [pc, #40]	; (80050d8 <SysTick_Config+0x40>)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050b6:	210f      	movs	r1, #15
 80050b8:	f04f 30ff 	mov.w	r0, #4294967295
 80050bc:	f7ff ff78 	bl	8004fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050c0:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <SysTick_Config+0x40>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050c6:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <SysTick_Config+0x40>)
 80050c8:	2207      	movs	r2, #7
 80050ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	e000e010 	.word	0xe000e010

080050dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff feef 	bl	8004ec8 <__NVIC_SetPriorityGrouping>
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b086      	sub	sp, #24
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	4603      	mov	r3, r0
 80050fa:	60b9      	str	r1, [r7, #8]
 80050fc:	607a      	str	r2, [r7, #4]
 80050fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005100:	2300      	movs	r3, #0
 8005102:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005104:	f7ff ff04 	bl	8004f10 <__NVIC_GetPriorityGrouping>
 8005108:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	6978      	ldr	r0, [r7, #20]
 8005110:	f7ff ff78 	bl	8005004 <NVIC_EncodePriority>
 8005114:	4602      	mov	r2, r0
 8005116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800511a:	4611      	mov	r1, r2
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff ff47 	bl	8004fb0 <__NVIC_SetPriority>
}
 8005122:	bf00      	nop
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b082      	sub	sp, #8
 800512e:	af00      	add	r7, sp, #0
 8005130:	4603      	mov	r3, r0
 8005132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fef7 	bl	8004f2c <__NVIC_EnableIRQ>
}
 800513e:	bf00      	nop
 8005140:	3708      	adds	r7, #8
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
 800514c:	4603      	mov	r3, r0
 800514e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff ff07 	bl	8004f68 <__NVIC_DisableIRQ>
}
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005166:	f7ff ff81 	bl	800506c <__NVIC_SystemReset>

0800516a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b082      	sub	sp, #8
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff ff90 	bl	8005098 <SysTick_Config>
 8005178:	4603      	mov	r3, r0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005182:	b480      	push	{r7}
 8005184:	b085      	sub	sp, #20
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d008      	beq.n	80051ac <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2204      	movs	r2, #4
 800519e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e022      	b.n	80051f2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 020e 	bic.w	r2, r2, #14
 80051ba:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0201 	bic.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d0:	f003 021c 	and.w	r2, r3, #28
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	2101      	movs	r1, #1
 80051da:	fa01 f202 	lsl.w	r2, r1, r2
 80051de:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d005      	beq.n	8005222 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2204      	movs	r2, #4
 800521a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	73fb      	strb	r3, [r7, #15]
 8005220:	e029      	b.n	8005276 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 020e 	bic.w	r2, r2, #14
 8005230:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f022 0201 	bic.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005246:	f003 021c 	and.w	r2, r3, #28
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	2101      	movs	r1, #1
 8005250:	fa01 f202 	lsl.w	r2, r1, r2
 8005254:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	4798      	blx	r3
    }
  }
  return status;
 8005276:	7bfb      	ldrb	r3, [r7, #15]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3710      	adds	r7, #16
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}

08005280 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529c:	f003 031c 	and.w	r3, r3, #28
 80052a0:	2204      	movs	r2, #4
 80052a2:	409a      	lsls	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4013      	ands	r3, r2
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d026      	beq.n	80052fa <HAL_DMA_IRQHandler+0x7a>
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d021      	beq.n	80052fa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d107      	bne.n	80052d4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0204 	bic.w	r2, r2, #4
 80052d2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d8:	f003 021c 	and.w	r2, r3, #28
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	2104      	movs	r1, #4
 80052e2:	fa01 f202 	lsl.w	r2, r1, r2
 80052e6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d071      	beq.n	80053d4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80052f8:	e06c      	b.n	80053d4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fe:	f003 031c 	and.w	r3, r3, #28
 8005302:	2202      	movs	r2, #2
 8005304:	409a      	lsls	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4013      	ands	r3, r2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d02e      	beq.n	800536c <HAL_DMA_IRQHandler+0xec>
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d029      	beq.n	800536c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10b      	bne.n	800533e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 020a 	bic.w	r2, r2, #10
 8005334:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005342:	f003 021c 	and.w	r2, r3, #28
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	2102      	movs	r1, #2
 800534c:	fa01 f202 	lsl.w	r2, r1, r2
 8005350:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d038      	beq.n	80053d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800536a:	e033      	b.n	80053d4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005370:	f003 031c 	and.w	r3, r3, #28
 8005374:	2208      	movs	r2, #8
 8005376:	409a      	lsls	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4013      	ands	r3, r2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d02a      	beq.n	80053d6 <HAL_DMA_IRQHandler+0x156>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f003 0308 	and.w	r3, r3, #8
 8005386:	2b00      	cmp	r3, #0
 8005388:	d025      	beq.n	80053d6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 020e 	bic.w	r2, r2, #14
 8005398:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539e:	f003 021c 	and.w	r2, r3, #28
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	2101      	movs	r1, #1
 80053a8:	fa01 f202 	lsl.w	r2, r1, r2
 80053ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d004      	beq.n	80053d6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80053d4:	bf00      	nop
 80053d6:	bf00      	nop
}
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80053f2:	4b2f      	ldr	r3, [pc, #188]	; (80054b0 <HAL_FLASH_Program+0xd0>)
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_FLASH_Program+0x1e>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e053      	b.n	80054a6 <HAL_FLASH_Program+0xc6>
 80053fe:	4b2c      	ldr	r3, [pc, #176]	; (80054b0 <HAL_FLASH_Program+0xd0>)
 8005400:	2201      	movs	r2, #1
 8005402:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005404:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005408:	f000 f888 	bl	800551c <FLASH_WaitForLastOperation>
 800540c:	4603      	mov	r3, r0
 800540e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8005410:	7dfb      	ldrb	r3, [r7, #23]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d143      	bne.n	800549e <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005416:	4b26      	ldr	r3, [pc, #152]	; (80054b0 <HAL_FLASH_Program+0xd0>)
 8005418:	2200      	movs	r2, #0
 800541a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800541c:	4b25      	ldr	r3, [pc, #148]	; (80054b4 <HAL_FLASH_Program+0xd4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005424:	2b00      	cmp	r3, #0
 8005426:	d009      	beq.n	800543c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8005428:	4b22      	ldr	r3, [pc, #136]	; (80054b4 <HAL_FLASH_Program+0xd4>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a21      	ldr	r2, [pc, #132]	; (80054b4 <HAL_FLASH_Program+0xd4>)
 800542e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005432:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005434:	4b1e      	ldr	r3, [pc, #120]	; (80054b0 <HAL_FLASH_Program+0xd0>)
 8005436:	2202      	movs	r2, #2
 8005438:	771a      	strb	r2, [r3, #28]
 800543a:	e002      	b.n	8005442 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800543c:	4b1c      	ldr	r3, [pc, #112]	; (80054b0 <HAL_FLASH_Program+0xd0>)
 800543e:	2200      	movs	r2, #0
 8005440:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d107      	bne.n	8005458 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800544c:	68b8      	ldr	r0, [r7, #8]
 800544e:	f000 f8bb 	bl	80055c8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8005452:	2301      	movs	r3, #1
 8005454:	613b      	str	r3, [r7, #16]
 8005456:	e010      	b.n	800547a <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d002      	beq.n	8005464 <HAL_FLASH_Program+0x84>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d10a      	bne.n	800547a <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	4619      	mov	r1, r3
 8005468:	68b8      	ldr	r0, [r7, #8]
 800546a:	f000 f8d3 	bl	8005614 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d102      	bne.n	800547a <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8005474:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005478:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800547a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800547e:	f000 f84d 	bl	800551c <FLASH_WaitForLastOperation>
 8005482:	4603      	mov	r3, r0
 8005484:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d006      	beq.n	800549a <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <HAL_FLASH_Program+0xd4>)
 800548e:	695a      	ldr	r2, [r3, #20]
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	43db      	mvns	r3, r3
 8005494:	4907      	ldr	r1, [pc, #28]	; (80054b4 <HAL_FLASH_Program+0xd4>)
 8005496:	4013      	ands	r3, r2
 8005498:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800549a:	f000 f9eb 	bl	8005874 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800549e:	4b04      	ldr	r3, [pc, #16]	; (80054b0 <HAL_FLASH_Program+0xd0>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]

  return status;
 80054a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20000010 	.word	0x20000010
 80054b4:	40022000 	.word	0x40022000

080054b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80054be:	2300      	movs	r3, #0
 80054c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80054c2:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <HAL_FLASH_Unlock+0x38>)
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	da0b      	bge.n	80054e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <HAL_FLASH_Unlock+0x38>)
 80054cc:	4a09      	ldr	r2, [pc, #36]	; (80054f4 <HAL_FLASH_Unlock+0x3c>)
 80054ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80054d0:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <HAL_FLASH_Unlock+0x38>)
 80054d2:	4a09      	ldr	r2, [pc, #36]	; (80054f8 <HAL_FLASH_Unlock+0x40>)
 80054d4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80054d6:	4b06      	ldr	r3, [pc, #24]	; (80054f0 <HAL_FLASH_Unlock+0x38>)
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	da01      	bge.n	80054e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80054e2:	79fb      	ldrb	r3, [r7, #7]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr
 80054f0:	40022000 	.word	0x40022000
 80054f4:	45670123 	.word	0x45670123
 80054f8:	cdef89ab 	.word	0xcdef89ab

080054fc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_FLASH_Lock+0x1c>)
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	4a04      	ldr	r2, [pc, #16]	; (8005518 <HAL_FLASH_Lock+0x1c>)
 8005506:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800550a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	40022000 	.word	0x40022000

0800551c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8005524:	f7ff fa7a 	bl	8004a1c <HAL_GetTick>
 8005528:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800552a:	e00d      	b.n	8005548 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005532:	d009      	beq.n	8005548 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8005534:	f7ff fa72 	bl	8004a1c <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	429a      	cmp	r2, r3
 8005542:	d801      	bhi.n	8005548 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e037      	b.n	80055b8 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005548:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <FLASH_WaitForLastOperation+0xa4>)
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1eb      	bne.n	800552c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8005554:	4b1a      	ldr	r3, [pc, #104]	; (80055c0 <FLASH_WaitForLastOperation+0xa4>)
 8005556:	691a      	ldr	r2, [r3, #16]
 8005558:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800555c:	4013      	ands	r3, r2
 800555e:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d01e      	beq.n	80055a4 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8005566:	4b17      	ldr	r3, [pc, #92]	; (80055c4 <FLASH_WaitForLastOperation+0xa8>)
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4313      	orrs	r3, r2
 800556e:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <FLASH_WaitForLastOperation+0xa8>)
 8005570:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d007      	beq.n	800558c <FLASH_WaitForLastOperation+0x70>
 800557c:	4b10      	ldr	r3, [pc, #64]	; (80055c0 <FLASH_WaitForLastOperation+0xa4>)
 800557e:	699a      	ldr	r2, [r3, #24]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005586:	490e      	ldr	r1, [pc, #56]	; (80055c0 <FLASH_WaitForLastOperation+0xa4>)
 8005588:	4313      	orrs	r3, r2
 800558a:	618b      	str	r3, [r1, #24]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d004      	beq.n	80055a0 <FLASH_WaitForLastOperation+0x84>
 8005596:	4a0a      	ldr	r2, [pc, #40]	; (80055c0 <FLASH_WaitForLastOperation+0xa4>)
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800559e:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e009      	b.n	80055b8 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80055a4:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <FLASH_WaitForLastOperation+0xa4>)
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80055b0:	4b03      	ldr	r3, [pc, #12]	; (80055c0 <FLASH_WaitForLastOperation+0xa4>)
 80055b2:	2201      	movs	r2, #1
 80055b4:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	40022000 	.word	0x40022000
 80055c4:	20000010 	.word	0x20000010

080055c8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80055d4:	4b0e      	ldr	r3, [pc, #56]	; (8005610 <FLASH_Program_DoubleWord+0x48>)
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	4a0d      	ldr	r2, [pc, #52]	; (8005610 <FLASH_Program_DoubleWord+0x48>)
 80055da:	f043 0301 	orr.w	r3, r3, #1
 80055de:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	683a      	ldr	r2, [r7, #0]
 80055e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80055e6:	f3bf 8f6f 	isb	sy
}
 80055ea:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80055ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	000a      	movs	r2, r1
 80055fa:	2300      	movs	r3, #0
 80055fc:	68f9      	ldr	r1, [r7, #12]
 80055fe:	3104      	adds	r1, #4
 8005600:	4613      	mov	r3, r2
 8005602:	600b      	str	r3, [r1, #0]
}
 8005604:	bf00      	nop
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	40022000 	.word	0x40022000

08005614 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8005614:	b480      	push	{r7}
 8005616:	b089      	sub	sp, #36	; 0x24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800561e:	2340      	movs	r3, #64	; 0x40
 8005620:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800562a:	4b14      	ldr	r3, [pc, #80]	; (800567c <FLASH_Program_Fast+0x68>)
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	4a13      	ldr	r2, [pc, #76]	; (800567c <FLASH_Program_Fast+0x68>)
 8005630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005634:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005636:	f3ef 8310 	mrs	r3, PRIMASK
 800563a:	60fb      	str	r3, [r7, #12]
  return(result);
 800563c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800563e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005640:	b672      	cpsid	i
}
 8005642:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	3304      	adds	r3, #4
 8005650:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	3304      	adds	r3, #4
 8005656:	617b      	str	r3, [r7, #20]
    row_index--;
 8005658:	7ffb      	ldrb	r3, [r7, #31]
 800565a:	3b01      	subs	r3, #1
 800565c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800565e:	7ffb      	ldrb	r3, [r7, #31]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1ef      	bne.n	8005644 <FLASH_Program_Fast+0x30>
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f383 8810 	msr	PRIMASK, r3
}
 800566e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 8005670:	bf00      	nop
 8005672:	3724      	adds	r7, #36	; 0x24
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	40022000 	.word	0x40022000

08005680 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800568a:	4b49      	ldr	r3, [pc, #292]	; (80057b0 <HAL_FLASHEx_Erase+0x130>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d101      	bne.n	8005696 <HAL_FLASHEx_Erase+0x16>
 8005692:	2302      	movs	r3, #2
 8005694:	e087      	b.n	80057a6 <HAL_FLASHEx_Erase+0x126>
 8005696:	4b46      	ldr	r3, [pc, #280]	; (80057b0 <HAL_FLASHEx_Erase+0x130>)
 8005698:	2201      	movs	r2, #1
 800569a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800569c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80056a0:	f7ff ff3c 	bl	800551c <FLASH_WaitForLastOperation>
 80056a4:	4603      	mov	r3, r0
 80056a6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d177      	bne.n	800579e <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80056ae:	4b40      	ldr	r3, [pc, #256]	; (80057b0 <HAL_FLASHEx_Erase+0x130>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80056b4:	4b3f      	ldr	r3, [pc, #252]	; (80057b4 <HAL_FLASHEx_Erase+0x134>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d013      	beq.n	80056e8 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80056c0:	4b3c      	ldr	r3, [pc, #240]	; (80057b4 <HAL_FLASHEx_Erase+0x134>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d009      	beq.n	80056e0 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80056cc:	4b39      	ldr	r3, [pc, #228]	; (80057b4 <HAL_FLASHEx_Erase+0x134>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a38      	ldr	r2, [pc, #224]	; (80057b4 <HAL_FLASHEx_Erase+0x134>)
 80056d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056d6:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80056d8:	4b35      	ldr	r3, [pc, #212]	; (80057b0 <HAL_FLASHEx_Erase+0x130>)
 80056da:	2203      	movs	r2, #3
 80056dc:	771a      	strb	r2, [r3, #28]
 80056de:	e016      	b.n	800570e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80056e0:	4b33      	ldr	r3, [pc, #204]	; (80057b0 <HAL_FLASHEx_Erase+0x130>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	771a      	strb	r2, [r3, #28]
 80056e6:	e012      	b.n	800570e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80056e8:	4b32      	ldr	r3, [pc, #200]	; (80057b4 <HAL_FLASHEx_Erase+0x134>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d009      	beq.n	8005708 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80056f4:	4b2f      	ldr	r3, [pc, #188]	; (80057b4 <HAL_FLASHEx_Erase+0x134>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a2e      	ldr	r2, [pc, #184]	; (80057b4 <HAL_FLASHEx_Erase+0x134>)
 80056fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056fe:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8005700:	4b2b      	ldr	r3, [pc, #172]	; (80057b0 <HAL_FLASHEx_Erase+0x130>)
 8005702:	2202      	movs	r2, #2
 8005704:	771a      	strb	r2, [r3, #28]
 8005706:	e002      	b.n	800570e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8005708:	4b29      	ldr	r3, [pc, #164]	; (80057b0 <HAL_FLASHEx_Erase+0x130>)
 800570a:	2200      	movs	r2, #0
 800570c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d113      	bne.n	800573e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	4618      	mov	r0, r3
 800571c:	f000 f84c 	bl	80057b8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005720:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005724:	f7ff fefa 	bl	800551c <FLASH_WaitForLastOperation>
 8005728:	4603      	mov	r3, r0
 800572a:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800572c:	4b21      	ldr	r3, [pc, #132]	; (80057b4 <HAL_FLASHEx_Erase+0x134>)
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	4a20      	ldr	r2, [pc, #128]	; (80057b4 <HAL_FLASHEx_Erase+0x134>)
 8005732:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005736:	f023 0304 	bic.w	r3, r3, #4
 800573a:	6153      	str	r3, [r2, #20]
 800573c:	e02d      	b.n	800579a <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	f04f 32ff 	mov.w	r2, #4294967295
 8005744:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	60bb      	str	r3, [r7, #8]
 800574c:	e01d      	b.n	800578a <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	4619      	mov	r1, r3
 8005754:	68b8      	ldr	r0, [r7, #8]
 8005756:	f000 f857 	bl	8005808 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800575a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800575e:	f7ff fedd 	bl	800551c <FLASH_WaitForLastOperation>
 8005762:	4603      	mov	r3, r0
 8005764:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8005766:	4b13      	ldr	r3, [pc, #76]	; (80057b4 <HAL_FLASHEx_Erase+0x134>)
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	4a12      	ldr	r2, [pc, #72]	; (80057b4 <HAL_FLASHEx_Erase+0x134>)
 800576c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005770:	f023 0302 	bic.w	r3, r3, #2
 8005774:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8005776:	7bfb      	ldrb	r3, [r7, #15]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	601a      	str	r2, [r3, #0]
          break;
 8005782:	e00a      	b.n	800579a <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	3301      	adds	r3, #1
 8005788:	60bb      	str	r3, [r7, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	4413      	add	r3, r2
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	429a      	cmp	r2, r3
 8005798:	d3d9      	bcc.n	800574e <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800579a:	f000 f86b 	bl	8005874 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800579e:	4b04      	ldr	r3, [pc, #16]	; (80057b0 <HAL_FLASHEx_Erase+0x130>)
 80057a0:	2200      	movs	r2, #0
 80057a2:	701a      	strb	r2, [r3, #0]

  return status;
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	20000010 	.word	0x20000010
 80057b4:	40022000 	.word	0x40022000

080057b8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80057ca:	4b0e      	ldr	r3, [pc, #56]	; (8005804 <FLASH_MassErase+0x4c>)
 80057cc:	695b      	ldr	r3, [r3, #20]
 80057ce:	4a0d      	ldr	r2, [pc, #52]	; (8005804 <FLASH_MassErase+0x4c>)
 80057d0:	f043 0304 	orr.w	r3, r3, #4
 80057d4:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d005      	beq.n	80057ec <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 80057e0:	4b08      	ldr	r3, [pc, #32]	; (8005804 <FLASH_MassErase+0x4c>)
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	4a07      	ldr	r2, [pc, #28]	; (8005804 <FLASH_MassErase+0x4c>)
 80057e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057ea:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80057ec:	4b05      	ldr	r3, [pc, #20]	; (8005804 <FLASH_MassErase+0x4c>)
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	4a04      	ldr	r2, [pc, #16]	; (8005804 <FLASH_MassErase+0x4c>)
 80057f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f6:	6153      	str	r3, [r2, #20]
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	40022000 	.word	0x40022000

08005808 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d006      	beq.n	800582a <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800581c:	4b14      	ldr	r3, [pc, #80]	; (8005870 <FLASH_PageErase+0x68>)
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	4a13      	ldr	r2, [pc, #76]	; (8005870 <FLASH_PageErase+0x68>)
 8005822:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005826:	6153      	str	r3, [r2, #20]
 8005828:	e005      	b.n	8005836 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800582a:	4b11      	ldr	r3, [pc, #68]	; (8005870 <FLASH_PageErase+0x68>)
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	4a10      	ldr	r2, [pc, #64]	; (8005870 <FLASH_PageErase+0x68>)
 8005830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005834:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8005836:	4b0e      	ldr	r3, [pc, #56]	; (8005870 <FLASH_PageErase+0x68>)
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	00db      	lsls	r3, r3, #3
 8005842:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8005846:	490a      	ldr	r1, [pc, #40]	; (8005870 <FLASH_PageErase+0x68>)
 8005848:	4313      	orrs	r3, r2
 800584a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800584c:	4b08      	ldr	r3, [pc, #32]	; (8005870 <FLASH_PageErase+0x68>)
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	4a07      	ldr	r2, [pc, #28]	; (8005870 <FLASH_PageErase+0x68>)
 8005852:	f043 0302 	orr.w	r3, r3, #2
 8005856:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005858:	4b05      	ldr	r3, [pc, #20]	; (8005870 <FLASH_PageErase+0x68>)
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	4a04      	ldr	r2, [pc, #16]	; (8005870 <FLASH_PageErase+0x68>)
 800585e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005862:	6153      	str	r3, [r2, #20]
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	40022000 	.word	0x40022000

08005874 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800587a:	4b21      	ldr	r3, [pc, #132]	; (8005900 <FLASH_FlushCaches+0x8c>)
 800587c:	7f1b      	ldrb	r3, [r3, #28]
 800587e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d002      	beq.n	800588c <FLASH_FlushCaches+0x18>
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	2b03      	cmp	r3, #3
 800588a:	d117      	bne.n	80058bc <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800588c:	4b1d      	ldr	r3, [pc, #116]	; (8005904 <FLASH_FlushCaches+0x90>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1c      	ldr	r2, [pc, #112]	; (8005904 <FLASH_FlushCaches+0x90>)
 8005892:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005896:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005898:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <FLASH_FlushCaches+0x90>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a19      	ldr	r2, [pc, #100]	; (8005904 <FLASH_FlushCaches+0x90>)
 800589e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	4b17      	ldr	r3, [pc, #92]	; (8005904 <FLASH_FlushCaches+0x90>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a16      	ldr	r2, [pc, #88]	; (8005904 <FLASH_FlushCaches+0x90>)
 80058aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ae:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80058b0:	4b14      	ldr	r3, [pc, #80]	; (8005904 <FLASH_FlushCaches+0x90>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a13      	ldr	r2, [pc, #76]	; (8005904 <FLASH_FlushCaches+0x90>)
 80058b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058ba:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d002      	beq.n	80058c8 <FLASH_FlushCaches+0x54>
 80058c2:	79fb      	ldrb	r3, [r7, #7]
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d111      	bne.n	80058ec <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80058c8:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <FLASH_FlushCaches+0x90>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a0d      	ldr	r2, [pc, #52]	; (8005904 <FLASH_FlushCaches+0x90>)
 80058ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058d2:	6013      	str	r3, [r2, #0]
 80058d4:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <FLASH_FlushCaches+0x90>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a0a      	ldr	r2, [pc, #40]	; (8005904 <FLASH_FlushCaches+0x90>)
 80058da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058de:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80058e0:	4b08      	ldr	r3, [pc, #32]	; (8005904 <FLASH_FlushCaches+0x90>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a07      	ldr	r2, [pc, #28]	; (8005904 <FLASH_FlushCaches+0x90>)
 80058e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058ea:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80058ec:	4b04      	ldr	r3, [pc, #16]	; (8005900 <FLASH_FlushCaches+0x8c>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	771a      	strb	r2, [r3, #28]
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000010 	.word	0x20000010
 8005904:	40022000 	.word	0x40022000

08005908 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005912:	2300      	movs	r3, #0
 8005914:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005916:	e17f      	b.n	8005c18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	2101      	movs	r1, #1
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	fa01 f303 	lsl.w	r3, r1, r3
 8005924:	4013      	ands	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	f000 8171 	beq.w	8005c12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f003 0303 	and.w	r3, r3, #3
 8005938:	2b01      	cmp	r3, #1
 800593a:	d005      	beq.n	8005948 <HAL_GPIO_Init+0x40>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	f003 0303 	and.w	r3, r3, #3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d130      	bne.n	80059aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	2203      	movs	r2, #3
 8005954:	fa02 f303 	lsl.w	r3, r2, r3
 8005958:	43db      	mvns	r3, r3
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4013      	ands	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	005b      	lsls	r3, r3, #1
 8005968:	fa02 f303 	lsl.w	r3, r2, r3
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800597e:	2201      	movs	r2, #1
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	fa02 f303 	lsl.w	r3, r2, r3
 8005986:	43db      	mvns	r3, r3
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4013      	ands	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	091b      	lsrs	r3, r3, #4
 8005994:	f003 0201 	and.w	r2, r3, #1
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d118      	bne.n	80059e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80059bc:	2201      	movs	r2, #1
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	43db      	mvns	r3, r3
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	4013      	ands	r3, r2
 80059ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	08db      	lsrs	r3, r3, #3
 80059d2:	f003 0201 	and.w	r2, r3, #1
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	fa02 f303 	lsl.w	r3, r2, r3
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f003 0303 	and.w	r3, r3, #3
 80059f0:	2b03      	cmp	r3, #3
 80059f2:	d017      	beq.n	8005a24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	2203      	movs	r2, #3
 8005a00:	fa02 f303 	lsl.w	r3, r2, r3
 8005a04:	43db      	mvns	r3, r3
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	fa02 f303 	lsl.w	r3, r2, r3
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	693a      	ldr	r2, [r7, #16]
 8005a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f003 0303 	and.w	r3, r3, #3
 8005a2c:	2b02      	cmp	r3, #2
 8005a2e:	d123      	bne.n	8005a78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	08da      	lsrs	r2, r3, #3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	3208      	adds	r2, #8
 8005a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	220f      	movs	r2, #15
 8005a48:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4013      	ands	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	691a      	ldr	r2, [r3, #16]
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f003 0307 	and.w	r3, r3, #7
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	fa02 f303 	lsl.w	r3, r2, r3
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	08da      	lsrs	r2, r3, #3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3208      	adds	r2, #8
 8005a72:	6939      	ldr	r1, [r7, #16]
 8005a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	2203      	movs	r2, #3
 8005a84:	fa02 f303 	lsl.w	r3, r2, r3
 8005a88:	43db      	mvns	r3, r3
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f003 0203 	and.w	r2, r3, #3
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	693a      	ldr	r2, [r7, #16]
 8005aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 80ac 	beq.w	8005c12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005aba:	4b5f      	ldr	r3, [pc, #380]	; (8005c38 <HAL_GPIO_Init+0x330>)
 8005abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005abe:	4a5e      	ldr	r2, [pc, #376]	; (8005c38 <HAL_GPIO_Init+0x330>)
 8005ac0:	f043 0301 	orr.w	r3, r3, #1
 8005ac4:	6613      	str	r3, [r2, #96]	; 0x60
 8005ac6:	4b5c      	ldr	r3, [pc, #368]	; (8005c38 <HAL_GPIO_Init+0x330>)
 8005ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	60bb      	str	r3, [r7, #8]
 8005ad0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005ad2:	4a5a      	ldr	r2, [pc, #360]	; (8005c3c <HAL_GPIO_Init+0x334>)
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	089b      	lsrs	r3, r3, #2
 8005ad8:	3302      	adds	r3, #2
 8005ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	220f      	movs	r2, #15
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	43db      	mvns	r3, r3
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	4013      	ands	r3, r2
 8005af4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005afc:	d025      	beq.n	8005b4a <HAL_GPIO_Init+0x242>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a4f      	ldr	r2, [pc, #316]	; (8005c40 <HAL_GPIO_Init+0x338>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d01f      	beq.n	8005b46 <HAL_GPIO_Init+0x23e>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a4e      	ldr	r2, [pc, #312]	; (8005c44 <HAL_GPIO_Init+0x33c>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d019      	beq.n	8005b42 <HAL_GPIO_Init+0x23a>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a4d      	ldr	r2, [pc, #308]	; (8005c48 <HAL_GPIO_Init+0x340>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <HAL_GPIO_Init+0x236>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a4c      	ldr	r2, [pc, #304]	; (8005c4c <HAL_GPIO_Init+0x344>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d00d      	beq.n	8005b3a <HAL_GPIO_Init+0x232>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a4b      	ldr	r2, [pc, #300]	; (8005c50 <HAL_GPIO_Init+0x348>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d007      	beq.n	8005b36 <HAL_GPIO_Init+0x22e>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a4a      	ldr	r2, [pc, #296]	; (8005c54 <HAL_GPIO_Init+0x34c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d101      	bne.n	8005b32 <HAL_GPIO_Init+0x22a>
 8005b2e:	2306      	movs	r3, #6
 8005b30:	e00c      	b.n	8005b4c <HAL_GPIO_Init+0x244>
 8005b32:	2307      	movs	r3, #7
 8005b34:	e00a      	b.n	8005b4c <HAL_GPIO_Init+0x244>
 8005b36:	2305      	movs	r3, #5
 8005b38:	e008      	b.n	8005b4c <HAL_GPIO_Init+0x244>
 8005b3a:	2304      	movs	r3, #4
 8005b3c:	e006      	b.n	8005b4c <HAL_GPIO_Init+0x244>
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e004      	b.n	8005b4c <HAL_GPIO_Init+0x244>
 8005b42:	2302      	movs	r3, #2
 8005b44:	e002      	b.n	8005b4c <HAL_GPIO_Init+0x244>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <HAL_GPIO_Init+0x244>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	f002 0203 	and.w	r2, r2, #3
 8005b52:	0092      	lsls	r2, r2, #2
 8005b54:	4093      	lsls	r3, r2
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005b5c:	4937      	ldr	r1, [pc, #220]	; (8005c3c <HAL_GPIO_Init+0x334>)
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	089b      	lsrs	r3, r3, #2
 8005b62:	3302      	adds	r3, #2
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b6a:	4b3b      	ldr	r3, [pc, #236]	; (8005c58 <HAL_GPIO_Init+0x350>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	43db      	mvns	r3, r3
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	4013      	ands	r3, r2
 8005b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b8e:	4a32      	ldr	r2, [pc, #200]	; (8005c58 <HAL_GPIO_Init+0x350>)
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005b94:	4b30      	ldr	r3, [pc, #192]	; (8005c58 <HAL_GPIO_Init+0x350>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005bb8:	4a27      	ldr	r2, [pc, #156]	; (8005c58 <HAL_GPIO_Init+0x350>)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005bbe:	4b26      	ldr	r3, [pc, #152]	; (8005c58 <HAL_GPIO_Init+0x350>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	43db      	mvns	r3, r3
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005be2:	4a1d      	ldr	r2, [pc, #116]	; (8005c58 <HAL_GPIO_Init+0x350>)
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005be8:	4b1b      	ldr	r3, [pc, #108]	; (8005c58 <HAL_GPIO_Init+0x350>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c0c:	4a12      	ldr	r2, [pc, #72]	; (8005c58 <HAL_GPIO_Init+0x350>)
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	3301      	adds	r3, #1
 8005c16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f47f ae78 	bne.w	8005918 <HAL_GPIO_Init+0x10>
  }
}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	371c      	adds	r7, #28
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	40010000 	.word	0x40010000
 8005c40:	48000400 	.word	0x48000400
 8005c44:	48000800 	.word	0x48000800
 8005c48:	48000c00 	.word	0x48000c00
 8005c4c:	48001000 	.word	0x48001000
 8005c50:	48001400 	.word	0x48001400
 8005c54:	48001800 	.word	0x48001800
 8005c58:	40010400 	.word	0x40010400

08005c5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c66:	2300      	movs	r3, #0
 8005c68:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005c6a:	e0cd      	b.n	8005e08 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	fa02 f303 	lsl.w	r3, r2, r3
 8005c74:	683a      	ldr	r2, [r7, #0]
 8005c76:	4013      	ands	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 80c0 	beq.w	8005e02 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005c82:	4a68      	ldr	r2, [pc, #416]	; (8005e24 <HAL_GPIO_DeInit+0x1c8>)
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	089b      	lsrs	r3, r3, #2
 8005c88:	3302      	adds	r3, #2
 8005c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c8e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	220f      	movs	r2, #15
 8005c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005caa:	d025      	beq.n	8005cf8 <HAL_GPIO_DeInit+0x9c>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a5e      	ldr	r2, [pc, #376]	; (8005e28 <HAL_GPIO_DeInit+0x1cc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d01f      	beq.n	8005cf4 <HAL_GPIO_DeInit+0x98>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a5d      	ldr	r2, [pc, #372]	; (8005e2c <HAL_GPIO_DeInit+0x1d0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d019      	beq.n	8005cf0 <HAL_GPIO_DeInit+0x94>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a5c      	ldr	r2, [pc, #368]	; (8005e30 <HAL_GPIO_DeInit+0x1d4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d013      	beq.n	8005cec <HAL_GPIO_DeInit+0x90>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a5b      	ldr	r2, [pc, #364]	; (8005e34 <HAL_GPIO_DeInit+0x1d8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00d      	beq.n	8005ce8 <HAL_GPIO_DeInit+0x8c>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a5a      	ldr	r2, [pc, #360]	; (8005e38 <HAL_GPIO_DeInit+0x1dc>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d007      	beq.n	8005ce4 <HAL_GPIO_DeInit+0x88>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a59      	ldr	r2, [pc, #356]	; (8005e3c <HAL_GPIO_DeInit+0x1e0>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d101      	bne.n	8005ce0 <HAL_GPIO_DeInit+0x84>
 8005cdc:	2306      	movs	r3, #6
 8005cde:	e00c      	b.n	8005cfa <HAL_GPIO_DeInit+0x9e>
 8005ce0:	2307      	movs	r3, #7
 8005ce2:	e00a      	b.n	8005cfa <HAL_GPIO_DeInit+0x9e>
 8005ce4:	2305      	movs	r3, #5
 8005ce6:	e008      	b.n	8005cfa <HAL_GPIO_DeInit+0x9e>
 8005ce8:	2304      	movs	r3, #4
 8005cea:	e006      	b.n	8005cfa <HAL_GPIO_DeInit+0x9e>
 8005cec:	2303      	movs	r3, #3
 8005cee:	e004      	b.n	8005cfa <HAL_GPIO_DeInit+0x9e>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	e002      	b.n	8005cfa <HAL_GPIO_DeInit+0x9e>
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e000      	b.n	8005cfa <HAL_GPIO_DeInit+0x9e>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	f002 0203 	and.w	r2, r2, #3
 8005d00:	0092      	lsls	r2, r2, #2
 8005d02:	4093      	lsls	r3, r2
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d132      	bne.n	8005d70 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005d0a:	4b4d      	ldr	r3, [pc, #308]	; (8005e40 <HAL_GPIO_DeInit+0x1e4>)
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	43db      	mvns	r3, r3
 8005d12:	494b      	ldr	r1, [pc, #300]	; (8005e40 <HAL_GPIO_DeInit+0x1e4>)
 8005d14:	4013      	ands	r3, r2
 8005d16:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005d18:	4b49      	ldr	r3, [pc, #292]	; (8005e40 <HAL_GPIO_DeInit+0x1e4>)
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	43db      	mvns	r3, r3
 8005d20:	4947      	ldr	r1, [pc, #284]	; (8005e40 <HAL_GPIO_DeInit+0x1e4>)
 8005d22:	4013      	ands	r3, r2
 8005d24:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005d26:	4b46      	ldr	r3, [pc, #280]	; (8005e40 <HAL_GPIO_DeInit+0x1e4>)
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	4944      	ldr	r1, [pc, #272]	; (8005e40 <HAL_GPIO_DeInit+0x1e4>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005d34:	4b42      	ldr	r3, [pc, #264]	; (8005e40 <HAL_GPIO_DeInit+0x1e4>)
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	43db      	mvns	r3, r3
 8005d3c:	4940      	ldr	r1, [pc, #256]	; (8005e40 <HAL_GPIO_DeInit+0x1e4>)
 8005d3e:	4013      	ands	r3, r2
 8005d40:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f003 0303 	and.w	r3, r3, #3
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	220f      	movs	r2, #15
 8005d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d50:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005d52:	4a34      	ldr	r2, [pc, #208]	; (8005e24 <HAL_GPIO_DeInit+0x1c8>)
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	089b      	lsrs	r3, r3, #2
 8005d58:	3302      	adds	r3, #2
 8005d5a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	43da      	mvns	r2, r3
 8005d62:	4830      	ldr	r0, [pc, #192]	; (8005e24 <HAL_GPIO_DeInit+0x1c8>)
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	089b      	lsrs	r3, r3, #2
 8005d68:	400a      	ands	r2, r1
 8005d6a:	3302      	adds	r3, #2
 8005d6c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	2103      	movs	r1, #3
 8005d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	08da      	lsrs	r2, r3, #3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3208      	adds	r2, #8
 8005d8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	220f      	movs	r2, #15
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	43db      	mvns	r3, r3
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	08d2      	lsrs	r2, r2, #3
 8005da4:	4019      	ands	r1, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3208      	adds	r2, #8
 8005daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	2103      	movs	r1, #3
 8005db8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbc:	43db      	mvns	r3, r3
 8005dbe:	401a      	ands	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	2101      	movs	r1, #1
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	401a      	ands	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68da      	ldr	r2, [r3, #12]
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	2103      	movs	r1, #3
 8005de2:	fa01 f303 	lsl.w	r3, r1, r3
 8005de6:	43db      	mvns	r3, r3
 8005de8:	401a      	ands	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df2:	2101      	movs	r1, #1
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dfa:	43db      	mvns	r3, r3
 8005dfc:	401a      	ands	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	3301      	adds	r3, #1
 8005e06:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f47f af2b 	bne.w	8005c6c <HAL_GPIO_DeInit+0x10>
  }
}
 8005e16:	bf00      	nop
 8005e18:	bf00      	nop
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr
 8005e24:	40010000 	.word	0x40010000
 8005e28:	48000400 	.word	0x48000400
 8005e2c:	48000800 	.word	0x48000800
 8005e30:	48000c00 	.word	0x48000c00
 8005e34:	48001000 	.word	0x48001000
 8005e38:	48001400 	.word	0x48001400
 8005e3c:	48001800 	.word	0x48001800
 8005e40:	40010400 	.word	0x40010400

08005e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	887b      	ldrh	r3, [r7, #2]
 8005e56:	4013      	ands	r3, r2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	73fb      	strb	r3, [r7, #15]
 8005e60:	e001      	b.n	8005e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e62:	2300      	movs	r3, #0
 8005e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3714      	adds	r7, #20
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	807b      	strh	r3, [r7, #2]
 8005e80:	4613      	mov	r3, r2
 8005e82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e84:	787b      	ldrb	r3, [r7, #1]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e8a:	887a      	ldrh	r2, [r7, #2]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e90:	e002      	b.n	8005e98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e92:	887a      	ldrh	r2, [r7, #2]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	4603      	mov	r3, r0
 8005eac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005eae:	4b08      	ldr	r3, [pc, #32]	; (8005ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005eb0:	695a      	ldr	r2, [r3, #20]
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d006      	beq.n	8005ec8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005eba:	4a05      	ldr	r2, [pc, #20]	; (8005ed0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ebc:	88fb      	ldrh	r3, [r7, #6]
 8005ebe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ec0:	88fb      	ldrh	r3, [r7, #6]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fc fd28 	bl	8002918 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ec8:	bf00      	nop
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	40010400 	.word	0x40010400

08005ed4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ed8:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a04      	ldr	r2, [pc, #16]	; (8005ef0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee2:	6013      	str	r3, [r2, #0]
}
 8005ee4:	bf00      	nop
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	40007000 	.word	0x40007000

08005ef4 <HAL_PWR_DisableWakeUpPin>:
  *         This parameter can be one of the following values:
  *           @arg @ref PWR_WAKEUP_PIN1, PWR_WAKEUP_PIN2, PWR_WAKEUP_PIN3, PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8005efc:	4b07      	ldr	r3, [pc, #28]	; (8005f1c <HAL_PWR_DisableWakeUpPin+0x28>)
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f003 031f 	and.w	r3, r3, #31
 8005f06:	43db      	mvns	r3, r3
 8005f08:	4904      	ldr	r1, [pc, #16]	; (8005f1c <HAL_PWR_DisableWakeUpPin+0x28>)
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	608b      	str	r3, [r1, #8]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40007000 	.word	0x40007000

08005f20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005f24:	4b04      	ldr	r3, [pc, #16]	; (8005f38 <HAL_PWREx_GetVoltageRange+0x18>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40007000 	.word	0x40007000

08005f3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f4a:	d130      	bne.n	8005fae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f4c:	4b23      	ldr	r3, [pc, #140]	; (8005fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f58:	d038      	beq.n	8005fcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f5a:	4b20      	ldr	r3, [pc, #128]	; (8005fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f62:	4a1e      	ldr	r2, [pc, #120]	; (8005fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f6a:	4b1d      	ldr	r3, [pc, #116]	; (8005fe0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2232      	movs	r2, #50	; 0x32
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	4a1b      	ldr	r2, [pc, #108]	; (8005fe4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	0c9b      	lsrs	r3, r3, #18
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f80:	e002      	b.n	8005f88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3b01      	subs	r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f88:	4b14      	ldr	r3, [pc, #80]	; (8005fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f94:	d102      	bne.n	8005f9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1f2      	bne.n	8005f82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f9c:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005f9e:	695b      	ldr	r3, [r3, #20]
 8005fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fa8:	d110      	bne.n	8005fcc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e00f      	b.n	8005fce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005fae:	4b0b      	ldr	r3, [pc, #44]	; (8005fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fba:	d007      	beq.n	8005fcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005fbc:	4b07      	ldr	r3, [pc, #28]	; (8005fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005fc4:	4a05      	ldr	r2, [pc, #20]	; (8005fdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005fca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40007000 	.word	0x40007000
 8005fe0:	20000000 	.word	0x20000000
 8005fe4:	431bde83 	.word	0x431bde83

08005fe8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005fee:	4b17      	ldr	r3, [pc, #92]	; (800604c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a16      	ldr	r2, [pc, #88]	; (800604c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8005ff4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ff8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005ffa:	4b15      	ldr	r3, [pc, #84]	; (8006050 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2232      	movs	r2, #50	; 0x32
 8006000:	fb02 f303 	mul.w	r3, r2, r3
 8006004:	4a13      	ldr	r2, [pc, #76]	; (8006054 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8006006:	fba2 2303 	umull	r2, r3, r2, r3
 800600a:	0c9b      	lsrs	r3, r3, #18
 800600c:	3301      	adds	r3, #1
 800600e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006010:	e002      	b.n	8006018 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3b01      	subs	r3, #1
 8006016:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006018:	4b0c      	ldr	r3, [pc, #48]	; (800604c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006024:	d102      	bne.n	800602c <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1f2      	bne.n	8006012 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800602c:	4b07      	ldr	r3, [pc, #28]	; (800604c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006038:	d101      	bne.n	800603e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e000      	b.n	8006040 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	40007000 	.word	0x40007000
 8006050:	20000000 	.word	0x20000000
 8006054:	431bde83 	.word	0x431bde83

08006058 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	4603      	mov	r3, r0
 8006060:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8006062:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f023 0307 	bic.w	r3, r3, #7
 800606a:	4a0f      	ldr	r2, [pc, #60]	; (80060a8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800606c:	f043 0302 	orr.w	r3, r3, #2
 8006070:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006072:	4b0e      	ldr	r3, [pc, #56]	; (80060ac <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	4a0d      	ldr	r2, [pc, #52]	; (80060ac <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006078:	f043 0304 	orr.w	r3, r3, #4
 800607c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d101      	bne.n	8006088 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006084:	bf30      	wfi
 8006086:	e002      	b.n	800608e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006088:	bf40      	sev
    __WFE();
 800608a:	bf20      	wfe
    __WFE();
 800608c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800608e:	4b07      	ldr	r3, [pc, #28]	; (80060ac <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	4a06      	ldr	r2, [pc, #24]	; (80060ac <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006094:	f023 0304 	bic.w	r3, r3, #4
 8006098:	6113      	str	r3, [r2, #16]
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40007000 	.word	0x40007000
 80060ac:	e000ed00 	.word	0xe000ed00

080060b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d101      	bne.n	80060c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e3ca      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060c2:	4b97      	ldr	r3, [pc, #604]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 030c 	and.w	r3, r3, #12
 80060ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060cc:	4b94      	ldr	r3, [pc, #592]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f003 0303 	and.w	r3, r3, #3
 80060d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 80e4 	beq.w	80062ac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d007      	beq.n	80060fa <HAL_RCC_OscConfig+0x4a>
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	2b0c      	cmp	r3, #12
 80060ee:	f040 808b 	bne.w	8006208 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	f040 8087 	bne.w	8006208 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80060fa:	4b89      	ldr	r3, [pc, #548]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0302 	and.w	r3, r3, #2
 8006102:	2b00      	cmp	r3, #0
 8006104:	d005      	beq.n	8006112 <HAL_RCC_OscConfig+0x62>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e3a2      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1a      	ldr	r2, [r3, #32]
 8006116:	4b82      	ldr	r3, [pc, #520]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d004      	beq.n	800612c <HAL_RCC_OscConfig+0x7c>
 8006122:	4b7f      	ldr	r3, [pc, #508]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800612a:	e005      	b.n	8006138 <HAL_RCC_OscConfig+0x88>
 800612c:	4b7c      	ldr	r3, [pc, #496]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 800612e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006132:	091b      	lsrs	r3, r3, #4
 8006134:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006138:	4293      	cmp	r3, r2
 800613a:	d223      	bcs.n	8006184 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	4618      	mov	r0, r3
 8006142:	f000 fd55 	bl	8006bf0 <RCC_SetFlashLatencyFromMSIRange>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e383      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006150:	4b73      	ldr	r3, [pc, #460]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a72      	ldr	r2, [pc, #456]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006156:	f043 0308 	orr.w	r3, r3, #8
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	4b70      	ldr	r3, [pc, #448]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	496d      	ldr	r1, [pc, #436]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 800616a:	4313      	orrs	r3, r2
 800616c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800616e:	4b6c      	ldr	r3, [pc, #432]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	4968      	ldr	r1, [pc, #416]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 800617e:	4313      	orrs	r3, r2
 8006180:	604b      	str	r3, [r1, #4]
 8006182:	e025      	b.n	80061d0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006184:	4b66      	ldr	r3, [pc, #408]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a65      	ldr	r2, [pc, #404]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 800618a:	f043 0308 	orr.w	r3, r3, #8
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	4b63      	ldr	r3, [pc, #396]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	4960      	ldr	r1, [pc, #384]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80061a2:	4b5f      	ldr	r3, [pc, #380]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	021b      	lsls	r3, r3, #8
 80061b0:	495b      	ldr	r1, [pc, #364]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f000 fd15 	bl	8006bf0 <RCC_SetFlashLatencyFromMSIRange>
 80061c6:	4603      	mov	r3, r0
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d001      	beq.n	80061d0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e343      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80061d0:	f000 fc4a 	bl	8006a68 <HAL_RCC_GetSysClockFreq>
 80061d4:	4602      	mov	r2, r0
 80061d6:	4b52      	ldr	r3, [pc, #328]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	091b      	lsrs	r3, r3, #4
 80061dc:	f003 030f 	and.w	r3, r3, #15
 80061e0:	4950      	ldr	r1, [pc, #320]	; (8006324 <HAL_RCC_OscConfig+0x274>)
 80061e2:	5ccb      	ldrb	r3, [r1, r3]
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	fa22 f303 	lsr.w	r3, r2, r3
 80061ec:	4a4e      	ldr	r2, [pc, #312]	; (8006328 <HAL_RCC_OscConfig+0x278>)
 80061ee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80061f0:	4b4e      	ldr	r3, [pc, #312]	; (800632c <HAL_RCC_OscConfig+0x27c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fe fbc1 	bl	800497c <HAL_InitTick>
 80061fa:	4603      	mov	r3, r0
 80061fc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d052      	beq.n	80062aa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	e327      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d032      	beq.n	8006276 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006210:	4b43      	ldr	r3, [pc, #268]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a42      	ldr	r2, [pc, #264]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006216:	f043 0301 	orr.w	r3, r3, #1
 800621a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800621c:	f7fe fbfe 	bl	8004a1c <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006224:	f7fe fbfa 	bl	8004a1c <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e310      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006236:	4b3a      	ldr	r3, [pc, #232]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0302 	and.w	r3, r3, #2
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0f0      	beq.n	8006224 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006242:	4b37      	ldr	r3, [pc, #220]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a36      	ldr	r2, [pc, #216]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006248:	f043 0308 	orr.w	r3, r3, #8
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	4b34      	ldr	r3, [pc, #208]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	4931      	ldr	r1, [pc, #196]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 800625c:	4313      	orrs	r3, r2
 800625e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006260:	4b2f      	ldr	r3, [pc, #188]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	021b      	lsls	r3, r3, #8
 800626e:	492c      	ldr	r1, [pc, #176]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006270:	4313      	orrs	r3, r2
 8006272:	604b      	str	r3, [r1, #4]
 8006274:	e01a      	b.n	80062ac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006276:	4b2a      	ldr	r3, [pc, #168]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a29      	ldr	r2, [pc, #164]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 800627c:	f023 0301 	bic.w	r3, r3, #1
 8006280:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006282:	f7fe fbcb 	bl	8004a1c <HAL_GetTick>
 8006286:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006288:	e008      	b.n	800629c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800628a:	f7fe fbc7 	bl	8004a1c <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	2b02      	cmp	r3, #2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e2dd      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800629c:	4b20      	ldr	r3, [pc, #128]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1f0      	bne.n	800628a <HAL_RCC_OscConfig+0x1da>
 80062a8:	e000      	b.n	80062ac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80062aa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0301 	and.w	r3, r3, #1
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d074      	beq.n	80063a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	2b08      	cmp	r3, #8
 80062bc:	d005      	beq.n	80062ca <HAL_RCC_OscConfig+0x21a>
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	2b0c      	cmp	r3, #12
 80062c2:	d10e      	bne.n	80062e2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d10b      	bne.n	80062e2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ca:	4b15      	ldr	r3, [pc, #84]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d064      	beq.n	80063a0 <HAL_RCC_OscConfig+0x2f0>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d160      	bne.n	80063a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e2ba      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ea:	d106      	bne.n	80062fa <HAL_RCC_OscConfig+0x24a>
 80062ec:	4b0c      	ldr	r3, [pc, #48]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a0b      	ldr	r2, [pc, #44]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 80062f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	e026      	b.n	8006348 <HAL_RCC_OscConfig+0x298>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006302:	d115      	bne.n	8006330 <HAL_RCC_OscConfig+0x280>
 8006304:	4b06      	ldr	r3, [pc, #24]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a05      	ldr	r2, [pc, #20]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 800630a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	4b03      	ldr	r3, [pc, #12]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a02      	ldr	r2, [pc, #8]	; (8006320 <HAL_RCC_OscConfig+0x270>)
 8006316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800631a:	6013      	str	r3, [r2, #0]
 800631c:	e014      	b.n	8006348 <HAL_RCC_OscConfig+0x298>
 800631e:	bf00      	nop
 8006320:	40021000 	.word	0x40021000
 8006324:	0800f878 	.word	0x0800f878
 8006328:	20000000 	.word	0x20000000
 800632c:	20000008 	.word	0x20000008
 8006330:	4ba0      	ldr	r3, [pc, #640]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a9f      	ldr	r2, [pc, #636]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 8006336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	4b9d      	ldr	r3, [pc, #628]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a9c      	ldr	r2, [pc, #624]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 8006342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d013      	beq.n	8006378 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fe fb64 	bl	8004a1c <HAL_GetTick>
 8006354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006358:	f7fe fb60 	bl	8004a1c <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b64      	cmp	r3, #100	; 0x64
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e276      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800636a:	4b92      	ldr	r3, [pc, #584]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f0      	beq.n	8006358 <HAL_RCC_OscConfig+0x2a8>
 8006376:	e014      	b.n	80063a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006378:	f7fe fb50 	bl	8004a1c <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006380:	f7fe fb4c 	bl	8004a1c <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b64      	cmp	r3, #100	; 0x64
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e262      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006392:	4b88      	ldr	r3, [pc, #544]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1f0      	bne.n	8006380 <HAL_RCC_OscConfig+0x2d0>
 800639e:	e000      	b.n	80063a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d060      	beq.n	8006470 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d005      	beq.n	80063c0 <HAL_RCC_OscConfig+0x310>
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	2b0c      	cmp	r3, #12
 80063b8:	d119      	bne.n	80063ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2b02      	cmp	r3, #2
 80063be:	d116      	bne.n	80063ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063c0:	4b7c      	ldr	r3, [pc, #496]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d005      	beq.n	80063d8 <HAL_RCC_OscConfig+0x328>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e23f      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063d8:	4b76      	ldr	r3, [pc, #472]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	061b      	lsls	r3, r3, #24
 80063e6:	4973      	ldr	r1, [pc, #460]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063ec:	e040      	b.n	8006470 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d023      	beq.n	800643e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063f6:	4b6f      	ldr	r3, [pc, #444]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a6e      	ldr	r2, [pc, #440]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 80063fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006402:	f7fe fb0b 	bl	8004a1c <HAL_GetTick>
 8006406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006408:	e008      	b.n	800641c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800640a:	f7fe fb07 	bl	8004a1c <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e21d      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800641c:	4b65      	ldr	r3, [pc, #404]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0f0      	beq.n	800640a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006428:	4b62      	ldr	r3, [pc, #392]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	061b      	lsls	r3, r3, #24
 8006436:	495f      	ldr	r1, [pc, #380]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 8006438:	4313      	orrs	r3, r2
 800643a:	604b      	str	r3, [r1, #4]
 800643c:	e018      	b.n	8006470 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800643e:	4b5d      	ldr	r3, [pc, #372]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a5c      	ldr	r2, [pc, #368]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 8006444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644a:	f7fe fae7 	bl	8004a1c <HAL_GetTick>
 800644e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006450:	e008      	b.n	8006464 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006452:	f7fe fae3 	bl	8004a1c <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d901      	bls.n	8006464 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e1f9      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006464:	4b53      	ldr	r3, [pc, #332]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1f0      	bne.n	8006452 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0308 	and.w	r3, r3, #8
 8006478:	2b00      	cmp	r3, #0
 800647a:	d03c      	beq.n	80064f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d01c      	beq.n	80064be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006484:	4b4b      	ldr	r3, [pc, #300]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 8006486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800648a:	4a4a      	ldr	r2, [pc, #296]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 800648c:	f043 0301 	orr.w	r3, r3, #1
 8006490:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006494:	f7fe fac2 	bl	8004a1c <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800649c:	f7fe fabe 	bl	8004a1c <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e1d4      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80064ae:	4b41      	ldr	r3, [pc, #260]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 80064b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0ef      	beq.n	800649c <HAL_RCC_OscConfig+0x3ec>
 80064bc:	e01b      	b.n	80064f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064be:	4b3d      	ldr	r3, [pc, #244]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 80064c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064c4:	4a3b      	ldr	r2, [pc, #236]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 80064c6:	f023 0301 	bic.w	r3, r3, #1
 80064ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ce:	f7fe faa5 	bl	8004a1c <HAL_GetTick>
 80064d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064d4:	e008      	b.n	80064e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064d6:	f7fe faa1 	bl	8004a1c <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e1b7      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80064e8:	4b32      	ldr	r3, [pc, #200]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 80064ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d1ef      	bne.n	80064d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 0304 	and.w	r3, r3, #4
 80064fe:	2b00      	cmp	r3, #0
 8006500:	f000 80a6 	beq.w	8006650 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006504:	2300      	movs	r3, #0
 8006506:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006508:	4b2a      	ldr	r3, [pc, #168]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 800650a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10d      	bne.n	8006530 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006514:	4b27      	ldr	r3, [pc, #156]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 8006516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006518:	4a26      	ldr	r2, [pc, #152]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 800651a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800651e:	6593      	str	r3, [r2, #88]	; 0x58
 8006520:	4b24      	ldr	r3, [pc, #144]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 8006522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006528:	60bb      	str	r3, [r7, #8]
 800652a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800652c:	2301      	movs	r3, #1
 800652e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006530:	4b21      	ldr	r3, [pc, #132]	; (80065b8 <HAL_RCC_OscConfig+0x508>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006538:	2b00      	cmp	r3, #0
 800653a:	d118      	bne.n	800656e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800653c:	4b1e      	ldr	r3, [pc, #120]	; (80065b8 <HAL_RCC_OscConfig+0x508>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a1d      	ldr	r2, [pc, #116]	; (80065b8 <HAL_RCC_OscConfig+0x508>)
 8006542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006546:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006548:	f7fe fa68 	bl	8004a1c <HAL_GetTick>
 800654c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800654e:	e008      	b.n	8006562 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006550:	f7fe fa64 	bl	8004a1c <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d901      	bls.n	8006562 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e17a      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006562:	4b15      	ldr	r3, [pc, #84]	; (80065b8 <HAL_RCC_OscConfig+0x508>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0f0      	beq.n	8006550 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d108      	bne.n	8006588 <HAL_RCC_OscConfig+0x4d8>
 8006576:	4b0f      	ldr	r3, [pc, #60]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 8006578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657c:	4a0d      	ldr	r2, [pc, #52]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 800657e:	f043 0301 	orr.w	r3, r3, #1
 8006582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006586:	e029      	b.n	80065dc <HAL_RCC_OscConfig+0x52c>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	2b05      	cmp	r3, #5
 800658e:	d115      	bne.n	80065bc <HAL_RCC_OscConfig+0x50c>
 8006590:	4b08      	ldr	r3, [pc, #32]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 8006592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006596:	4a07      	ldr	r2, [pc, #28]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 8006598:	f043 0304 	orr.w	r3, r3, #4
 800659c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065a0:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 80065a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065a6:	4a03      	ldr	r2, [pc, #12]	; (80065b4 <HAL_RCC_OscConfig+0x504>)
 80065a8:	f043 0301 	orr.w	r3, r3, #1
 80065ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065b0:	e014      	b.n	80065dc <HAL_RCC_OscConfig+0x52c>
 80065b2:	bf00      	nop
 80065b4:	40021000 	.word	0x40021000
 80065b8:	40007000 	.word	0x40007000
 80065bc:	4b9c      	ldr	r3, [pc, #624]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 80065be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c2:	4a9b      	ldr	r2, [pc, #620]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 80065c4:	f023 0301 	bic.w	r3, r3, #1
 80065c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80065cc:	4b98      	ldr	r3, [pc, #608]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d2:	4a97      	ldr	r2, [pc, #604]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 80065d4:	f023 0304 	bic.w	r3, r3, #4
 80065d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d016      	beq.n	8006612 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065e4:	f7fe fa1a 	bl	8004a1c <HAL_GetTick>
 80065e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065ea:	e00a      	b.n	8006602 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ec:	f7fe fa16 	bl	8004a1c <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d901      	bls.n	8006602 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e12a      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006602:	4b8b      	ldr	r3, [pc, #556]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 8006604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0ed      	beq.n	80065ec <HAL_RCC_OscConfig+0x53c>
 8006610:	e015      	b.n	800663e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006612:	f7fe fa03 	bl	8004a1c <HAL_GetTick>
 8006616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006618:	e00a      	b.n	8006630 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800661a:	f7fe f9ff 	bl	8004a1c <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	f241 3288 	movw	r2, #5000	; 0x1388
 8006628:	4293      	cmp	r3, r2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e113      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006630:	4b7f      	ldr	r3, [pc, #508]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 8006632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1ed      	bne.n	800661a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800663e:	7ffb      	ldrb	r3, [r7, #31]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d105      	bne.n	8006650 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006644:	4b7a      	ldr	r3, [pc, #488]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 8006646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006648:	4a79      	ldr	r2, [pc, #484]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 800664a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800664e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 80fe 	beq.w	8006856 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665e:	2b02      	cmp	r3, #2
 8006660:	f040 80d0 	bne.w	8006804 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006664:	4b72      	ldr	r3, [pc, #456]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f003 0203 	and.w	r2, r3, #3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006674:	429a      	cmp	r2, r3
 8006676:	d130      	bne.n	80066da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	3b01      	subs	r3, #1
 8006684:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006686:	429a      	cmp	r2, r3
 8006688:	d127      	bne.n	80066da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006694:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006696:	429a      	cmp	r2, r3
 8006698:	d11f      	bne.n	80066da <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066a4:	2a07      	cmp	r2, #7
 80066a6:	bf14      	ite	ne
 80066a8:	2201      	movne	r2, #1
 80066aa:	2200      	moveq	r2, #0
 80066ac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d113      	bne.n	80066da <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066bc:	085b      	lsrs	r3, r3, #1
 80066be:	3b01      	subs	r3, #1
 80066c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d109      	bne.n	80066da <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d0:	085b      	lsrs	r3, r3, #1
 80066d2:	3b01      	subs	r3, #1
 80066d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d06e      	beq.n	80067b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	2b0c      	cmp	r3, #12
 80066de:	d069      	beq.n	80067b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80066e0:	4b53      	ldr	r3, [pc, #332]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d105      	bne.n	80066f8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80066ec:	4b50      	ldr	r3, [pc, #320]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d001      	beq.n	80066fc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e0ad      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80066fc:	4b4c      	ldr	r3, [pc, #304]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a4b      	ldr	r2, [pc, #300]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 8006702:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006706:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006708:	f7fe f988 	bl	8004a1c <HAL_GetTick>
 800670c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006710:	f7fe f984 	bl	8004a1c <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e09a      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006722:	4b43      	ldr	r3, [pc, #268]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1f0      	bne.n	8006710 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800672e:	4b40      	ldr	r3, [pc, #256]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	4b40      	ldr	r3, [pc, #256]	; (8006834 <HAL_RCC_OscConfig+0x784>)
 8006734:	4013      	ands	r3, r2
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800673e:	3a01      	subs	r2, #1
 8006740:	0112      	lsls	r2, r2, #4
 8006742:	4311      	orrs	r1, r2
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006748:	0212      	lsls	r2, r2, #8
 800674a:	4311      	orrs	r1, r2
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006750:	0852      	lsrs	r2, r2, #1
 8006752:	3a01      	subs	r2, #1
 8006754:	0552      	lsls	r2, r2, #21
 8006756:	4311      	orrs	r1, r2
 8006758:	687a      	ldr	r2, [r7, #4]
 800675a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800675c:	0852      	lsrs	r2, r2, #1
 800675e:	3a01      	subs	r2, #1
 8006760:	0652      	lsls	r2, r2, #25
 8006762:	4311      	orrs	r1, r2
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006768:	0912      	lsrs	r2, r2, #4
 800676a:	0452      	lsls	r2, r2, #17
 800676c:	430a      	orrs	r2, r1
 800676e:	4930      	ldr	r1, [pc, #192]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 8006770:	4313      	orrs	r3, r2
 8006772:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006774:	4b2e      	ldr	r3, [pc, #184]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a2d      	ldr	r2, [pc, #180]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 800677a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800677e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006780:	4b2b      	ldr	r3, [pc, #172]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	4a2a      	ldr	r2, [pc, #168]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 8006786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800678a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800678c:	f7fe f946 	bl	8004a1c <HAL_GetTick>
 8006790:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006792:	e008      	b.n	80067a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006794:	f7fe f942 	bl	8004a1c <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d901      	bls.n	80067a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e058      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067a6:	4b22      	ldr	r3, [pc, #136]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f0      	beq.n	8006794 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80067b2:	e050      	b.n	8006856 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e04f      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067b8:	4b1d      	ldr	r3, [pc, #116]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d148      	bne.n	8006856 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80067c4:	4b1a      	ldr	r3, [pc, #104]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a19      	ldr	r2, [pc, #100]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 80067ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80067d0:	4b17      	ldr	r3, [pc, #92]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	4a16      	ldr	r2, [pc, #88]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 80067d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80067dc:	f7fe f91e 	bl	8004a1c <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067e4:	f7fe f91a 	bl	8004a1c <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e030      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80067f6:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0f0      	beq.n	80067e4 <HAL_RCC_OscConfig+0x734>
 8006802:	e028      	b.n	8006856 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	2b0c      	cmp	r3, #12
 8006808:	d023      	beq.n	8006852 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800680a:	4b09      	ldr	r3, [pc, #36]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a08      	ldr	r2, [pc, #32]	; (8006830 <HAL_RCC_OscConfig+0x780>)
 8006810:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006816:	f7fe f901 	bl	8004a1c <HAL_GetTick>
 800681a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800681c:	e00c      	b.n	8006838 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800681e:	f7fe f8fd 	bl	8004a1c <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	2b02      	cmp	r3, #2
 800682a:	d905      	bls.n	8006838 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	e013      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
 8006830:	40021000 	.word	0x40021000
 8006834:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006838:	4b09      	ldr	r3, [pc, #36]	; (8006860 <HAL_RCC_OscConfig+0x7b0>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1ec      	bne.n	800681e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006844:	4b06      	ldr	r3, [pc, #24]	; (8006860 <HAL_RCC_OscConfig+0x7b0>)
 8006846:	68da      	ldr	r2, [r3, #12]
 8006848:	4905      	ldr	r1, [pc, #20]	; (8006860 <HAL_RCC_OscConfig+0x7b0>)
 800684a:	4b06      	ldr	r3, [pc, #24]	; (8006864 <HAL_RCC_OscConfig+0x7b4>)
 800684c:	4013      	ands	r3, r2
 800684e:	60cb      	str	r3, [r1, #12]
 8006850:	e001      	b.n	8006856 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e000      	b.n	8006858 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3720      	adds	r7, #32
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	40021000 	.word	0x40021000
 8006864:	feeefffc 	.word	0xfeeefffc

08006868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e0e7      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800687c:	4b75      	ldr	r3, [pc, #468]	; (8006a54 <HAL_RCC_ClockConfig+0x1ec>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d910      	bls.n	80068ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800688a:	4b72      	ldr	r3, [pc, #456]	; (8006a54 <HAL_RCC_ClockConfig+0x1ec>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f023 0207 	bic.w	r2, r3, #7
 8006892:	4970      	ldr	r1, [pc, #448]	; (8006a54 <HAL_RCC_ClockConfig+0x1ec>)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	4313      	orrs	r3, r2
 8006898:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800689a:	4b6e      	ldr	r3, [pc, #440]	; (8006a54 <HAL_RCC_ClockConfig+0x1ec>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0307 	and.w	r3, r3, #7
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d001      	beq.n	80068ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e0cf      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d010      	beq.n	80068da <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	4b66      	ldr	r3, [pc, #408]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d908      	bls.n	80068da <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068c8:	4b63      	ldr	r3, [pc, #396]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	4960      	ldr	r1, [pc, #384]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d04c      	beq.n	8006980 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	2b03      	cmp	r3, #3
 80068ec:	d107      	bne.n	80068fe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068ee:	4b5a      	ldr	r3, [pc, #360]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d121      	bne.n	800693e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80068fa:	2301      	movs	r3, #1
 80068fc:	e0a6      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d107      	bne.n	8006916 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006906:	4b54      	ldr	r3, [pc, #336]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d115      	bne.n	800693e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e09a      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d107      	bne.n	800692e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800691e:	4b4e      	ldr	r3, [pc, #312]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d109      	bne.n	800693e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e08e      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800692e:	4b4a      	ldr	r3, [pc, #296]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006936:	2b00      	cmp	r3, #0
 8006938:	d101      	bne.n	800693e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	e086      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800693e:	4b46      	ldr	r3, [pc, #280]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	f023 0203 	bic.w	r2, r3, #3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	4943      	ldr	r1, [pc, #268]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 800694c:	4313      	orrs	r3, r2
 800694e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006950:	f7fe f864 	bl	8004a1c <HAL_GetTick>
 8006954:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006956:	e00a      	b.n	800696e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006958:	f7fe f860 	bl	8004a1c <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	f241 3288 	movw	r2, #5000	; 0x1388
 8006966:	4293      	cmp	r3, r2
 8006968:	d901      	bls.n	800696e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e06e      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800696e:	4b3a      	ldr	r3, [pc, #232]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f003 020c 	and.w	r2, r3, #12
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	429a      	cmp	r2, r3
 800697e:	d1eb      	bne.n	8006958 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d010      	beq.n	80069ae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	4b31      	ldr	r3, [pc, #196]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006998:	429a      	cmp	r2, r3
 800699a:	d208      	bcs.n	80069ae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800699c:	4b2e      	ldr	r3, [pc, #184]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	492b      	ldr	r1, [pc, #172]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80069ae:	4b29      	ldr	r3, [pc, #164]	; (8006a54 <HAL_RCC_ClockConfig+0x1ec>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0307 	and.w	r3, r3, #7
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d210      	bcs.n	80069de <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069bc:	4b25      	ldr	r3, [pc, #148]	; (8006a54 <HAL_RCC_ClockConfig+0x1ec>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f023 0207 	bic.w	r2, r3, #7
 80069c4:	4923      	ldr	r1, [pc, #140]	; (8006a54 <HAL_RCC_ClockConfig+0x1ec>)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069cc:	4b21      	ldr	r3, [pc, #132]	; (8006a54 <HAL_RCC_ClockConfig+0x1ec>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d001      	beq.n	80069de <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e036      	b.n	8006a4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d008      	beq.n	80069fc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069ea:	4b1b      	ldr	r3, [pc, #108]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	4918      	ldr	r1, [pc, #96]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 80069f8:	4313      	orrs	r3, r2
 80069fa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d009      	beq.n	8006a1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a08:	4b13      	ldr	r3, [pc, #76]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	4910      	ldr	r1, [pc, #64]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a1c:	f000 f824 	bl	8006a68 <HAL_RCC_GetSysClockFreq>
 8006a20:	4602      	mov	r2, r0
 8006a22:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <HAL_RCC_ClockConfig+0x1f0>)
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	091b      	lsrs	r3, r3, #4
 8006a28:	f003 030f 	and.w	r3, r3, #15
 8006a2c:	490b      	ldr	r1, [pc, #44]	; (8006a5c <HAL_RCC_ClockConfig+0x1f4>)
 8006a2e:	5ccb      	ldrb	r3, [r1, r3]
 8006a30:	f003 031f 	and.w	r3, r3, #31
 8006a34:	fa22 f303 	lsr.w	r3, r2, r3
 8006a38:	4a09      	ldr	r2, [pc, #36]	; (8006a60 <HAL_RCC_ClockConfig+0x1f8>)
 8006a3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006a3c:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <HAL_RCC_ClockConfig+0x1fc>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7fd ff9b 	bl	800497c <HAL_InitTick>
 8006a46:	4603      	mov	r3, r0
 8006a48:	72fb      	strb	r3, [r7, #11]

  return status;
 8006a4a:	7afb      	ldrb	r3, [r7, #11]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40022000 	.word	0x40022000
 8006a58:	40021000 	.word	0x40021000
 8006a5c:	0800f878 	.word	0x0800f878
 8006a60:	20000000 	.word	0x20000000
 8006a64:	20000008 	.word	0x20000008

08006a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b089      	sub	sp, #36	; 0x24
 8006a6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	61fb      	str	r3, [r7, #28]
 8006a72:	2300      	movs	r3, #0
 8006a74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a76:	4b3e      	ldr	r3, [pc, #248]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 030c 	and.w	r3, r3, #12
 8006a7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a80:	4b3b      	ldr	r3, [pc, #236]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f003 0303 	and.w	r3, r3, #3
 8006a88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d005      	beq.n	8006a9c <HAL_RCC_GetSysClockFreq+0x34>
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	2b0c      	cmp	r3, #12
 8006a94:	d121      	bne.n	8006ada <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d11e      	bne.n	8006ada <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006a9c:	4b34      	ldr	r3, [pc, #208]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0308 	and.w	r3, r3, #8
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d107      	bne.n	8006ab8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006aa8:	4b31      	ldr	r3, [pc, #196]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006aaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aae:	0a1b      	lsrs	r3, r3, #8
 8006ab0:	f003 030f 	and.w	r3, r3, #15
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	e005      	b.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ab8:	4b2d      	ldr	r3, [pc, #180]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	091b      	lsrs	r3, r3, #4
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ac4:	4a2b      	ldr	r2, [pc, #172]	; (8006b74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006acc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10d      	bne.n	8006af0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ad8:	e00a      	b.n	8006af0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b04      	cmp	r3, #4
 8006ade:	d102      	bne.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ae0:	4b25      	ldr	r3, [pc, #148]	; (8006b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ae2:	61bb      	str	r3, [r7, #24]
 8006ae4:	e004      	b.n	8006af0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d101      	bne.n	8006af0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006aec:	4b23      	ldr	r3, [pc, #140]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8006aee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	2b0c      	cmp	r3, #12
 8006af4:	d134      	bne.n	8006b60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006af6:	4b1e      	ldr	r3, [pc, #120]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d003      	beq.n	8006b0e <HAL_RCC_GetSysClockFreq+0xa6>
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b03      	cmp	r3, #3
 8006b0a:	d003      	beq.n	8006b14 <HAL_RCC_GetSysClockFreq+0xac>
 8006b0c:	e005      	b.n	8006b1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006b0e:	4b1a      	ldr	r3, [pc, #104]	; (8006b78 <HAL_RCC_GetSysClockFreq+0x110>)
 8006b10:	617b      	str	r3, [r7, #20]
      break;
 8006b12:	e005      	b.n	8006b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006b14:	4b19      	ldr	r3, [pc, #100]	; (8006b7c <HAL_RCC_GetSysClockFreq+0x114>)
 8006b16:	617b      	str	r3, [r7, #20]
      break;
 8006b18:	e002      	b.n	8006b20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	617b      	str	r3, [r7, #20]
      break;
 8006b1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006b20:	4b13      	ldr	r3, [pc, #76]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	091b      	lsrs	r3, r3, #4
 8006b26:	f003 0307 	and.w	r3, r3, #7
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006b2e:	4b10      	ldr	r3, [pc, #64]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	0a1b      	lsrs	r3, r3, #8
 8006b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	fb03 f202 	mul.w	r2, r3, r2
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006b46:	4b0a      	ldr	r3, [pc, #40]	; (8006b70 <HAL_RCC_GetSysClockFreq+0x108>)
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	0e5b      	lsrs	r3, r3, #25
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	3301      	adds	r3, #1
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006b60:	69bb      	ldr	r3, [r7, #24]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3724      	adds	r7, #36	; 0x24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40021000 	.word	0x40021000
 8006b74:	0800f890 	.word	0x0800f890
 8006b78:	00f42400 	.word	0x00f42400
 8006b7c:	007a1200 	.word	0x007a1200

08006b80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b80:	b480      	push	{r7}
 8006b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b84:	4b03      	ldr	r3, [pc, #12]	; (8006b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b86:	681b      	ldr	r3, [r3, #0]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	20000000 	.word	0x20000000

08006b98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006b9c:	f7ff fff0 	bl	8006b80 <HAL_RCC_GetHCLKFreq>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	4b06      	ldr	r3, [pc, #24]	; (8006bbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	0a1b      	lsrs	r3, r3, #8
 8006ba8:	f003 0307 	and.w	r3, r3, #7
 8006bac:	4904      	ldr	r1, [pc, #16]	; (8006bc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bae:	5ccb      	ldrb	r3, [r1, r3]
 8006bb0:	f003 031f 	and.w	r3, r3, #31
 8006bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	40021000 	.word	0x40021000
 8006bc0:	0800f888 	.word	0x0800f888

08006bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006bc8:	f7ff ffda 	bl	8006b80 <HAL_RCC_GetHCLKFreq>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	4b06      	ldr	r3, [pc, #24]	; (8006be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	0adb      	lsrs	r3, r3, #11
 8006bd4:	f003 0307 	and.w	r3, r3, #7
 8006bd8:	4904      	ldr	r1, [pc, #16]	; (8006bec <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bda:	5ccb      	ldrb	r3, [r1, r3]
 8006bdc:	f003 031f 	and.w	r3, r3, #31
 8006be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	40021000 	.word	0x40021000
 8006bec:	0800f888 	.word	0x0800f888

08006bf0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006bfc:	4b2a      	ldr	r3, [pc, #168]	; (8006ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d003      	beq.n	8006c10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006c08:	f7ff f98a 	bl	8005f20 <HAL_PWREx_GetVoltageRange>
 8006c0c:	6178      	str	r0, [r7, #20]
 8006c0e:	e014      	b.n	8006c3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c10:	4b25      	ldr	r3, [pc, #148]	; (8006ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c14:	4a24      	ldr	r2, [pc, #144]	; (8006ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8006c1c:	4b22      	ldr	r3, [pc, #136]	; (8006ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006c28:	f7ff f97a 	bl	8005f20 <HAL_PWREx_GetVoltageRange>
 8006c2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006c2e:	4b1e      	ldr	r3, [pc, #120]	; (8006ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c32:	4a1d      	ldr	r2, [pc, #116]	; (8006ca8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c40:	d10b      	bne.n	8006c5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b80      	cmp	r3, #128	; 0x80
 8006c46:	d919      	bls.n	8006c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2ba0      	cmp	r3, #160	; 0xa0
 8006c4c:	d902      	bls.n	8006c54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c4e:	2302      	movs	r3, #2
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	e013      	b.n	8006c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c54:	2301      	movs	r3, #1
 8006c56:	613b      	str	r3, [r7, #16]
 8006c58:	e010      	b.n	8006c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b80      	cmp	r3, #128	; 0x80
 8006c5e:	d902      	bls.n	8006c66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006c60:	2303      	movs	r3, #3
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	e00a      	b.n	8006c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b80      	cmp	r3, #128	; 0x80
 8006c6a:	d102      	bne.n	8006c72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	e004      	b.n	8006c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b70      	cmp	r3, #112	; 0x70
 8006c76:	d101      	bne.n	8006c7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006c78:	2301      	movs	r3, #1
 8006c7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006c7c:	4b0b      	ldr	r3, [pc, #44]	; (8006cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f023 0207 	bic.w	r2, r3, #7
 8006c84:	4909      	ldr	r1, [pc, #36]	; (8006cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006c8c:	4b07      	ldr	r3, [pc, #28]	; (8006cac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0307 	and.w	r3, r3, #7
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d001      	beq.n	8006c9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e000      	b.n	8006ca0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	40021000 	.word	0x40021000
 8006cac:	40022000 	.word	0x40022000

08006cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cb8:	2300      	movs	r3, #0
 8006cba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d041      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cd0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006cd4:	d02a      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006cd6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006cda:	d824      	bhi.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006cdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ce0:	d008      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006ce2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ce6:	d81e      	bhi.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d00a      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006cec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cf0:	d010      	beq.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006cf2:	e018      	b.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006cf4:	4b86      	ldr	r3, [pc, #536]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	4a85      	ldr	r2, [pc, #532]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006cfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cfe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d00:	e015      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3304      	adds	r3, #4
 8006d06:	2100      	movs	r1, #0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 fabb 	bl	8007284 <RCCEx_PLLSAI1_Config>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d12:	e00c      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	3320      	adds	r3, #32
 8006d18:	2100      	movs	r1, #0
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 fba6 	bl	800746c <RCCEx_PLLSAI2_Config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006d24:	e003      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	74fb      	strb	r3, [r7, #19]
      break;
 8006d2a:	e000      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d2e:	7cfb      	ldrb	r3, [r7, #19]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10b      	bne.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d34:	4b76      	ldr	r3, [pc, #472]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d42:	4973      	ldr	r1, [pc, #460]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d44:	4313      	orrs	r3, r2
 8006d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006d4a:	e001      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d4c:	7cfb      	ldrb	r3, [r7, #19]
 8006d4e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d041      	beq.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d64:	d02a      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006d66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006d6a:	d824      	bhi.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006d6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d70:	d008      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006d72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d76:	d81e      	bhi.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00a      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d80:	d010      	beq.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006d82:	e018      	b.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006d84:	4b62      	ldr	r3, [pc, #392]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	4a61      	ldr	r2, [pc, #388]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006d90:	e015      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	3304      	adds	r3, #4
 8006d96:	2100      	movs	r1, #0
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fa73 	bl	8007284 <RCCEx_PLLSAI1_Config>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006da2:	e00c      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3320      	adds	r3, #32
 8006da8:	2100      	movs	r1, #0
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 fb5e 	bl	800746c <RCCEx_PLLSAI2_Config>
 8006db0:	4603      	mov	r3, r0
 8006db2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006db4:	e003      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	74fb      	strb	r3, [r7, #19]
      break;
 8006dba:	e000      	b.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006dbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dbe:	7cfb      	ldrb	r3, [r7, #19]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10b      	bne.n	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006dc4:	4b52      	ldr	r3, [pc, #328]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006dd2:	494f      	ldr	r1, [pc, #316]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006dda:	e001      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ddc:	7cfb      	ldrb	r3, [r7, #19]
 8006dde:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 80a0 	beq.w	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006dee:	2300      	movs	r3, #0
 8006df0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006df2:	4b47      	ldr	r3, [pc, #284]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006e02:	2300      	movs	r3, #0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00d      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e08:	4b41      	ldr	r3, [pc, #260]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0c:	4a40      	ldr	r2, [pc, #256]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e12:	6593      	str	r3, [r2, #88]	; 0x58
 8006e14:	4b3e      	ldr	r3, [pc, #248]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e1c:	60bb      	str	r3, [r7, #8]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e20:	2301      	movs	r3, #1
 8006e22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e24:	4b3b      	ldr	r3, [pc, #236]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a3a      	ldr	r2, [pc, #232]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e30:	f7fd fdf4 	bl	8004a1c <HAL_GetTick>
 8006e34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e36:	e009      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e38:	f7fd fdf0 	bl	8004a1c <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d902      	bls.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	74fb      	strb	r3, [r7, #19]
        break;
 8006e4a:	e005      	b.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006e4c:	4b31      	ldr	r3, [pc, #196]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d0ef      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006e58:	7cfb      	ldrb	r3, [r7, #19]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d15c      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e5e:	4b2c      	ldr	r3, [pc, #176]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01f      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d019      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e7c:	4b24      	ldr	r3, [pc, #144]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e88:	4b21      	ldr	r3, [pc, #132]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8e:	4a20      	ldr	r2, [pc, #128]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e98:	4b1d      	ldr	r3, [pc, #116]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9e:	4a1c      	ldr	r2, [pc, #112]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ea8:	4a19      	ldr	r2, [pc, #100]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d016      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006eba:	f7fd fdaf 	bl	8004a1c <HAL_GetTick>
 8006ebe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ec0:	e00b      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ec2:	f7fd fdab 	bl	8004a1c <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d902      	bls.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	74fb      	strb	r3, [r7, #19]
            break;
 8006ed8:	e006      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eda:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee0:	f003 0302 	and.w	r3, r3, #2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d0ec      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006ee8:	7cfb      	ldrb	r3, [r7, #19]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10c      	bne.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006eee:	4b08      	ldr	r3, [pc, #32]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006efe:	4904      	ldr	r1, [pc, #16]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f00:	4313      	orrs	r3, r2
 8006f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006f06:	e009      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f08:	7cfb      	ldrb	r3, [r7, #19]
 8006f0a:	74bb      	strb	r3, [r7, #18]
 8006f0c:	e006      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006f0e:	bf00      	nop
 8006f10:	40021000 	.word	0x40021000
 8006f14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f18:	7cfb      	ldrb	r3, [r7, #19]
 8006f1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f1c:	7c7b      	ldrb	r3, [r7, #17]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d105      	bne.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f22:	4b9e      	ldr	r3, [pc, #632]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f26:	4a9d      	ldr	r2, [pc, #628]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00a      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f3a:	4b98      	ldr	r3, [pc, #608]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f40:	f023 0203 	bic.w	r2, r3, #3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f48:	4994      	ldr	r1, [pc, #592]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00a      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f5c:	4b8f      	ldr	r3, [pc, #572]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f62:	f023 020c 	bic.w	r2, r3, #12
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6a:	498c      	ldr	r1, [pc, #560]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0304 	and.w	r3, r3, #4
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00a      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f7e:	4b87      	ldr	r3, [pc, #540]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	4983      	ldr	r1, [pc, #524]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0308 	and.w	r3, r3, #8
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00a      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006fa0:	4b7e      	ldr	r3, [pc, #504]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fae:	497b      	ldr	r1, [pc, #492]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0310 	and.w	r3, r3, #16
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00a      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006fc2:	4b76      	ldr	r3, [pc, #472]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fd0:	4972      	ldr	r1, [pc, #456]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0320 	and.w	r3, r3, #32
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00a      	beq.n	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fe4:	4b6d      	ldr	r3, [pc, #436]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff2:	496a      	ldr	r1, [pc, #424]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007006:	4b65      	ldr	r3, [pc, #404]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800700c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007014:	4961      	ldr	r1, [pc, #388]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007016:	4313      	orrs	r3, r2
 8007018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007028:	4b5c      	ldr	r3, [pc, #368]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800702a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800702e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007036:	4959      	ldr	r1, [pc, #356]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007038:	4313      	orrs	r3, r2
 800703a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00a      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800704a:	4b54      	ldr	r3, [pc, #336]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800704c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007050:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007058:	4950      	ldr	r1, [pc, #320]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800705a:	4313      	orrs	r3, r2
 800705c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00a      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800706c:	4b4b      	ldr	r3, [pc, #300]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800706e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007072:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707a:	4948      	ldr	r1, [pc, #288]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800707c:	4313      	orrs	r3, r2
 800707e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00a      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800708e:	4b43      	ldr	r3, [pc, #268]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007094:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709c:	493f      	ldr	r1, [pc, #252]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d028      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80070b0:	4b3a      	ldr	r3, [pc, #232]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070be:	4937      	ldr	r1, [pc, #220]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070ce:	d106      	bne.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80070d0:	4b32      	ldr	r3, [pc, #200]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	4a31      	ldr	r2, [pc, #196]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80070d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070da:	60d3      	str	r3, [r2, #12]
 80070dc:	e011      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070e6:	d10c      	bne.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	3304      	adds	r3, #4
 80070ec:	2101      	movs	r1, #1
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 f8c8 	bl	8007284 <RCCEx_PLLSAI1_Config>
 80070f4:	4603      	mov	r3, r0
 80070f6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80070f8:	7cfb      	ldrb	r3, [r7, #19]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80070fe:	7cfb      	ldrb	r3, [r7, #19]
 8007100:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d028      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800710e:	4b23      	ldr	r3, [pc, #140]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007114:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711c:	491f      	ldr	r1, [pc, #124]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800711e:	4313      	orrs	r3, r2
 8007120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800712c:	d106      	bne.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800712e:	4b1b      	ldr	r3, [pc, #108]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	4a1a      	ldr	r2, [pc, #104]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007138:	60d3      	str	r3, [r2, #12]
 800713a:	e011      	b.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007144:	d10c      	bne.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	3304      	adds	r3, #4
 800714a:	2101      	movs	r1, #1
 800714c:	4618      	mov	r0, r3
 800714e:	f000 f899 	bl	8007284 <RCCEx_PLLSAI1_Config>
 8007152:	4603      	mov	r3, r0
 8007154:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007156:	7cfb      	ldrb	r3, [r7, #19]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800715c:	7cfb      	ldrb	r3, [r7, #19]
 800715e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007168:	2b00      	cmp	r3, #0
 800716a:	d02b      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800716c:	4b0b      	ldr	r3, [pc, #44]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800716e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007172:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800717a:	4908      	ldr	r1, [pc, #32]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800717c:	4313      	orrs	r3, r2
 800717e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007186:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800718a:	d109      	bne.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800718c:	4b03      	ldr	r3, [pc, #12]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	4a02      	ldr	r2, [pc, #8]	; (800719c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007196:	60d3      	str	r3, [r2, #12]
 8007198:	e014      	b.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800719a:	bf00      	nop
 800719c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80071a8:	d10c      	bne.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	3304      	adds	r3, #4
 80071ae:	2101      	movs	r1, #1
 80071b0:	4618      	mov	r0, r3
 80071b2:	f000 f867 	bl	8007284 <RCCEx_PLLSAI1_Config>
 80071b6:	4603      	mov	r3, r0
 80071b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80071ba:	7cfb      	ldrb	r3, [r7, #19]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d001      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80071c0:	7cfb      	ldrb	r3, [r7, #19]
 80071c2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d02f      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80071d0:	4b2b      	ldr	r3, [pc, #172]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80071d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071de:	4928      	ldr	r1, [pc, #160]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80071ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071ee:	d10d      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	3304      	adds	r3, #4
 80071f4:	2102      	movs	r1, #2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 f844 	bl	8007284 <RCCEx_PLLSAI1_Config>
 80071fc:	4603      	mov	r3, r0
 80071fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007200:	7cfb      	ldrb	r3, [r7, #19]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d014      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007206:	7cfb      	ldrb	r3, [r7, #19]
 8007208:	74bb      	strb	r3, [r7, #18]
 800720a:	e011      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007214:	d10c      	bne.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	3320      	adds	r3, #32
 800721a:	2102      	movs	r1, #2
 800721c:	4618      	mov	r0, r3
 800721e:	f000 f925 	bl	800746c <RCCEx_PLLSAI2_Config>
 8007222:	4603      	mov	r3, r0
 8007224:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007226:	7cfb      	ldrb	r3, [r7, #19]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800722c:	7cfb      	ldrb	r3, [r7, #19]
 800722e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800723c:	4b10      	ldr	r3, [pc, #64]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800723e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007242:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800724a:	490d      	ldr	r1, [pc, #52]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800724c:	4313      	orrs	r3, r2
 800724e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00b      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800725e:	4b08      	ldr	r3, [pc, #32]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007264:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800726e:	4904      	ldr	r1, [pc, #16]	; (8007280 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007270:	4313      	orrs	r3, r2
 8007272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007276:	7cbb      	ldrb	r3, [r7, #18]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40021000 	.word	0x40021000

08007284 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007292:	4b75      	ldr	r3, [pc, #468]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f003 0303 	and.w	r3, r3, #3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d018      	beq.n	80072d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800729e:	4b72      	ldr	r3, [pc, #456]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	f003 0203 	and.w	r2, r3, #3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d10d      	bne.n	80072ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
       ||
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d009      	beq.n	80072ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80072b6:	4b6c      	ldr	r3, [pc, #432]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	091b      	lsrs	r3, r3, #4
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
       ||
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d047      	beq.n	800735a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	73fb      	strb	r3, [r7, #15]
 80072ce:	e044      	b.n	800735a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	d018      	beq.n	800730a <RCCEx_PLLSAI1_Config+0x86>
 80072d8:	2b03      	cmp	r3, #3
 80072da:	d825      	bhi.n	8007328 <RCCEx_PLLSAI1_Config+0xa4>
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d002      	beq.n	80072e6 <RCCEx_PLLSAI1_Config+0x62>
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d009      	beq.n	80072f8 <RCCEx_PLLSAI1_Config+0x74>
 80072e4:	e020      	b.n	8007328 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80072e6:	4b60      	ldr	r3, [pc, #384]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d11d      	bne.n	800732e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80072f6:	e01a      	b.n	800732e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80072f8:	4b5b      	ldr	r3, [pc, #364]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007300:	2b00      	cmp	r3, #0
 8007302:	d116      	bne.n	8007332 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007308:	e013      	b.n	8007332 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800730a:	4b57      	ldr	r3, [pc, #348]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10f      	bne.n	8007336 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007316:	4b54      	ldr	r3, [pc, #336]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d109      	bne.n	8007336 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007326:	e006      	b.n	8007336 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	73fb      	strb	r3, [r7, #15]
      break;
 800732c:	e004      	b.n	8007338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800732e:	bf00      	nop
 8007330:	e002      	b.n	8007338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007332:	bf00      	nop
 8007334:	e000      	b.n	8007338 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007336:	bf00      	nop
    }

    if(status == HAL_OK)
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10d      	bne.n	800735a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800733e:	4b4a      	ldr	r3, [pc, #296]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6819      	ldr	r1, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	3b01      	subs	r3, #1
 8007350:	011b      	lsls	r3, r3, #4
 8007352:	430b      	orrs	r3, r1
 8007354:	4944      	ldr	r1, [pc, #272]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007356:	4313      	orrs	r3, r2
 8007358:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d17d      	bne.n	800745c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007360:	4b41      	ldr	r3, [pc, #260]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a40      	ldr	r2, [pc, #256]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007366:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800736a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800736c:	f7fd fb56 	bl	8004a1c <HAL_GetTick>
 8007370:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007372:	e009      	b.n	8007388 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007374:	f7fd fb52 	bl	8004a1c <HAL_GetTick>
 8007378:	4602      	mov	r2, r0
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	2b02      	cmp	r3, #2
 8007380:	d902      	bls.n	8007388 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	73fb      	strb	r3, [r7, #15]
        break;
 8007386:	e005      	b.n	8007394 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007388:	4b37      	ldr	r3, [pc, #220]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1ef      	bne.n	8007374 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d160      	bne.n	800745c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d111      	bne.n	80073c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073a0:	4b31      	ldr	r3, [pc, #196]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80073a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6892      	ldr	r2, [r2, #8]
 80073b0:	0211      	lsls	r1, r2, #8
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	68d2      	ldr	r2, [r2, #12]
 80073b6:	0912      	lsrs	r2, r2, #4
 80073b8:	0452      	lsls	r2, r2, #17
 80073ba:	430a      	orrs	r2, r1
 80073bc:	492a      	ldr	r1, [pc, #168]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	610b      	str	r3, [r1, #16]
 80073c2:	e027      	b.n	8007414 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d112      	bne.n	80073f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073ca:	4b27      	ldr	r3, [pc, #156]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80073d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	6892      	ldr	r2, [r2, #8]
 80073da:	0211      	lsls	r1, r2, #8
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6912      	ldr	r2, [r2, #16]
 80073e0:	0852      	lsrs	r2, r2, #1
 80073e2:	3a01      	subs	r2, #1
 80073e4:	0552      	lsls	r2, r2, #21
 80073e6:	430a      	orrs	r2, r1
 80073e8:	491f      	ldr	r1, [pc, #124]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	610b      	str	r3, [r1, #16]
 80073ee:	e011      	b.n	8007414 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80073f0:	4b1d      	ldr	r3, [pc, #116]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80073f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6892      	ldr	r2, [r2, #8]
 8007400:	0211      	lsls	r1, r2, #8
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	6952      	ldr	r2, [r2, #20]
 8007406:	0852      	lsrs	r2, r2, #1
 8007408:	3a01      	subs	r2, #1
 800740a:	0652      	lsls	r2, r2, #25
 800740c:	430a      	orrs	r2, r1
 800740e:	4916      	ldr	r1, [pc, #88]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007410:	4313      	orrs	r3, r2
 8007412:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007414:	4b14      	ldr	r3, [pc, #80]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a13      	ldr	r2, [pc, #76]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 800741a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800741e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007420:	f7fd fafc 	bl	8004a1c <HAL_GetTick>
 8007424:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007426:	e009      	b.n	800743c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007428:	f7fd faf8 	bl	8004a1c <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	2b02      	cmp	r3, #2
 8007434:	d902      	bls.n	800743c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007436:	2303      	movs	r3, #3
 8007438:	73fb      	strb	r3, [r7, #15]
          break;
 800743a:	e005      	b.n	8007448 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800743c:	4b0a      	ldr	r3, [pc, #40]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d0ef      	beq.n	8007428 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d106      	bne.n	800745c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800744e:	4b06      	ldr	r3, [pc, #24]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007450:	691a      	ldr	r2, [r3, #16]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	4904      	ldr	r1, [pc, #16]	; (8007468 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007458:	4313      	orrs	r3, r2
 800745a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800745c:	7bfb      	ldrb	r3, [r7, #15]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	40021000 	.word	0x40021000

0800746c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800747a:	4b6a      	ldr	r3, [pc, #424]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f003 0303 	and.w	r3, r3, #3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d018      	beq.n	80074b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007486:	4b67      	ldr	r3, [pc, #412]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f003 0203 	and.w	r2, r3, #3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	429a      	cmp	r2, r3
 8007494:	d10d      	bne.n	80074b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
       ||
 800749a:	2b00      	cmp	r3, #0
 800749c:	d009      	beq.n	80074b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800749e:	4b61      	ldr	r3, [pc, #388]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	091b      	lsrs	r3, r3, #4
 80074a4:	f003 0307 	and.w	r3, r3, #7
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
       ||
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d047      	beq.n	8007542 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80074b2:	2301      	movs	r3, #1
 80074b4:	73fb      	strb	r3, [r7, #15]
 80074b6:	e044      	b.n	8007542 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d018      	beq.n	80074f2 <RCCEx_PLLSAI2_Config+0x86>
 80074c0:	2b03      	cmp	r3, #3
 80074c2:	d825      	bhi.n	8007510 <RCCEx_PLLSAI2_Config+0xa4>
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d002      	beq.n	80074ce <RCCEx_PLLSAI2_Config+0x62>
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d009      	beq.n	80074e0 <RCCEx_PLLSAI2_Config+0x74>
 80074cc:	e020      	b.n	8007510 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80074ce:	4b55      	ldr	r3, [pc, #340]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0302 	and.w	r3, r3, #2
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d11d      	bne.n	8007516 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074de:	e01a      	b.n	8007516 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80074e0:	4b50      	ldr	r3, [pc, #320]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d116      	bne.n	800751a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074f0:	e013      	b.n	800751a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80074f2:	4b4c      	ldr	r3, [pc, #304]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10f      	bne.n	800751e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80074fe:	4b49      	ldr	r3, [pc, #292]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d109      	bne.n	800751e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800750e:	e006      	b.n	800751e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	73fb      	strb	r3, [r7, #15]
      break;
 8007514:	e004      	b.n	8007520 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007516:	bf00      	nop
 8007518:	e002      	b.n	8007520 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800751a:	bf00      	nop
 800751c:	e000      	b.n	8007520 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800751e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007520:	7bfb      	ldrb	r3, [r7, #15]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10d      	bne.n	8007542 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007526:	4b3f      	ldr	r3, [pc, #252]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6819      	ldr	r1, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	3b01      	subs	r3, #1
 8007538:	011b      	lsls	r3, r3, #4
 800753a:	430b      	orrs	r3, r1
 800753c:	4939      	ldr	r1, [pc, #228]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800753e:	4313      	orrs	r3, r2
 8007540:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007542:	7bfb      	ldrb	r3, [r7, #15]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d167      	bne.n	8007618 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007548:	4b36      	ldr	r3, [pc, #216]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a35      	ldr	r2, [pc, #212]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800754e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007552:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007554:	f7fd fa62 	bl	8004a1c <HAL_GetTick>
 8007558:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800755a:	e009      	b.n	8007570 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800755c:	f7fd fa5e 	bl	8004a1c <HAL_GetTick>
 8007560:	4602      	mov	r2, r0
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	2b02      	cmp	r3, #2
 8007568:	d902      	bls.n	8007570 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	73fb      	strb	r3, [r7, #15]
        break;
 800756e:	e005      	b.n	800757c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007570:	4b2c      	ldr	r3, [pc, #176]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1ef      	bne.n	800755c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d14a      	bne.n	8007618 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d111      	bne.n	80075ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007588:	4b26      	ldr	r3, [pc, #152]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	6892      	ldr	r2, [r2, #8]
 8007598:	0211      	lsls	r1, r2, #8
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	68d2      	ldr	r2, [r2, #12]
 800759e:	0912      	lsrs	r2, r2, #4
 80075a0:	0452      	lsls	r2, r2, #17
 80075a2:	430a      	orrs	r2, r1
 80075a4:	491f      	ldr	r1, [pc, #124]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	614b      	str	r3, [r1, #20]
 80075aa:	e011      	b.n	80075d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80075ac:	4b1d      	ldr	r3, [pc, #116]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80075b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	6892      	ldr	r2, [r2, #8]
 80075bc:	0211      	lsls	r1, r2, #8
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6912      	ldr	r2, [r2, #16]
 80075c2:	0852      	lsrs	r2, r2, #1
 80075c4:	3a01      	subs	r2, #1
 80075c6:	0652      	lsls	r2, r2, #25
 80075c8:	430a      	orrs	r2, r1
 80075ca:	4916      	ldr	r1, [pc, #88]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80075d0:	4b14      	ldr	r3, [pc, #80]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a13      	ldr	r2, [pc, #76]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075dc:	f7fd fa1e 	bl	8004a1c <HAL_GetTick>
 80075e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80075e2:	e009      	b.n	80075f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80075e4:	f7fd fa1a 	bl	8004a1c <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d902      	bls.n	80075f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	73fb      	strb	r3, [r7, #15]
          break;
 80075f6:	e005      	b.n	8007604 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80075f8:	4b0a      	ldr	r3, [pc, #40]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d0ef      	beq.n	80075e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d106      	bne.n	8007618 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800760a:	4b06      	ldr	r3, [pc, #24]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 800760c:	695a      	ldr	r2, [r3, #20]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	695b      	ldr	r3, [r3, #20]
 8007612:	4904      	ldr	r1, [pc, #16]	; (8007624 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007614:	4313      	orrs	r3, r2
 8007616:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007618:	7bfb      	ldrb	r3, [r7, #15]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	40021000 	.word	0x40021000

08007628 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b084      	sub	sp, #16
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d06c      	beq.n	8007714 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d106      	bne.n	8007654 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7f9 ff30 	bl	80014b4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	22ca      	movs	r2, #202	; 0xca
 8007662:	625a      	str	r2, [r3, #36]	; 0x24
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2253      	movs	r2, #83	; 0x53
 800766a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f87c 	bl	800776a <RTC_EnterInitMode>
 8007672:	4603      	mov	r3, r0
 8007674:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d14b      	bne.n	8007714 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6812      	ldr	r2, [r2, #0]
 8007686:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800768a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800768e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	6899      	ldr	r1, [r3, #8]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	431a      	orrs	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	430a      	orrs	r2, r1
 80076ac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	68d2      	ldr	r2, [r2, #12]
 80076b6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	6919      	ldr	r1, [r3, #16]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	041a      	lsls	r2, r3, #16
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	430a      	orrs	r2, r1
 80076ca:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f87f 	bl	80077d0 <RTC_ExitInitMode>
 80076d2:	4603      	mov	r3, r0
 80076d4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d11b      	bne.n	8007714 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0203 	bic.w	r2, r2, #3
 80076ea:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	69da      	ldr	r2, [r3, #28]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	431a      	orrs	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	22ff      	movs	r2, #255	; 0xff
 800770a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007714:	7bfb      	ldrb	r3, [r7, #15]
}
 8007716:	4618      	mov	r0, r3
 8007718:	3710      	adds	r7, #16
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68da      	ldr	r2, [r3, #12]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007734:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007736:	f7fd f971 	bl	8004a1c <HAL_GetTick>
 800773a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800773c:	e009      	b.n	8007752 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800773e:	f7fd f96d 	bl	8004a1c <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800774c:	d901      	bls.n	8007752 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e007      	b.n	8007762 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f003 0320 	and.w	r3, r3, #32
 800775c:	2b00      	cmp	r3, #0
 800775e:	d0ee      	beq.n	800773e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007780:	2b00      	cmp	r3, #0
 8007782:	d120      	bne.n	80077c6 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f04f 32ff 	mov.w	r2, #4294967295
 800778c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800778e:	f7fd f945 	bl	8004a1c <HAL_GetTick>
 8007792:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007794:	e00d      	b.n	80077b2 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007796:	f7fd f941 	bl	8004a1c <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077a4:	d905      	bls.n	80077b2 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80077a6:	2303      	movs	r3, #3
 80077a8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2203      	movs	r2, #3
 80077ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <RTC_EnterInitMode+0x5c>
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d1e7      	bne.n	8007796 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077d8:	2300      	movs	r3, #0
 80077da:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80077dc:	4b1a      	ldr	r3, [pc, #104]	; (8007848 <RTC_ExitInitMode+0x78>)
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	4a19      	ldr	r2, [pc, #100]	; (8007848 <RTC_ExitInitMode+0x78>)
 80077e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077e6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80077e8:	4b17      	ldr	r3, [pc, #92]	; (8007848 <RTC_ExitInitMode+0x78>)
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f003 0320 	and.w	r3, r3, #32
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10c      	bne.n	800780e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff ff92 	bl	800771e <HAL_RTC_WaitForSynchro>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d01e      	beq.n	800783e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2203      	movs	r2, #3
 8007804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007808:	2303      	movs	r3, #3
 800780a:	73fb      	strb	r3, [r7, #15]
 800780c:	e017      	b.n	800783e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800780e:	4b0e      	ldr	r3, [pc, #56]	; (8007848 <RTC_ExitInitMode+0x78>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	4a0d      	ldr	r2, [pc, #52]	; (8007848 <RTC_ExitInitMode+0x78>)
 8007814:	f023 0320 	bic.w	r3, r3, #32
 8007818:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff ff7f 	bl	800771e <HAL_RTC_WaitForSynchro>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d005      	beq.n	8007832 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2203      	movs	r2, #3
 800782a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007832:	4b05      	ldr	r3, [pc, #20]	; (8007848 <RTC_ExitInitMode+0x78>)
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	4a04      	ldr	r2, [pc, #16]	; (8007848 <RTC_ExitInitMode+0x78>)
 8007838:	f043 0320 	orr.w	r3, r3, #32
 800783c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800783e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007840:	4618      	mov	r0, r3
 8007842:	3710      	adds	r7, #16
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	40002800 	.word	0x40002800

0800784c <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d101      	bne.n	8007866 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007862:	2302      	movs	r3, #2
 8007864:	e07f      	b.n	8007966 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2202      	movs	r2, #2
 8007872:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	22ca      	movs	r2, #202	; 0xca
 800787c:	625a      	str	r2, [r3, #36]	; 0x24
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2253      	movs	r2, #83	; 0x53
 8007884:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007894:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	b2da      	uxtb	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80078a6:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d120      	bne.n	80078f8 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 80078b6:	f7fd f8b1 	bl	8004a1c <HAL_GetTick>
 80078ba:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80078bc:	e015      	b.n	80078ea <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80078be:	f7fd f8ad 	bl	8004a1c <HAL_GetTick>
 80078c2:	4602      	mov	r2, r0
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	1ad3      	subs	r3, r2, r3
 80078c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80078cc:	d90d      	bls.n	80078ea <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	22ff      	movs	r2, #255	; 0xff
 80078d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2203      	movs	r2, #3
 80078da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e03d      	b.n	8007966 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f003 0304 	and.w	r3, r3, #4
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d0e2      	beq.n	80078be <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f023 0107 	bic.w	r1, r3, #7
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	430a      	orrs	r2, r1
 8007912:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007914:	4b16      	ldr	r3, [pc, #88]	; (8007970 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a15      	ldr	r2, [pc, #84]	; (8007970 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800791a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800791e:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007920:	4b13      	ldr	r3, [pc, #76]	; (8007970 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	4a12      	ldr	r2, [pc, #72]	; (8007970 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007926:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800792a:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689a      	ldr	r2, [r3, #8]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800793a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	689a      	ldr	r2, [r3, #8]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800794a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	22ff      	movs	r2, #255	; 0xff
 8007952:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	40010400 	.word	0x40010400

08007974 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d101      	bne.n	800798a <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8007986:	2302      	movs	r3, #2
 8007988:	e04d      	b.n	8007a26 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2202      	movs	r2, #2
 8007996:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	22ca      	movs	r2, #202	; 0xca
 80079a0:	625a      	str	r2, [r3, #36]	; 0x24
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2253      	movs	r2, #83	; 0x53
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689a      	ldr	r2, [r3, #8]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079b8:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689a      	ldr	r2, [r3, #8]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80079c8:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80079ca:	f7fd f827 	bl	8004a1c <HAL_GetTick>
 80079ce:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80079d0:	e015      	b.n	80079fe <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80079d2:	f7fd f823 	bl	8004a1c <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079e0:	d90d      	bls.n	80079fe <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	22ff      	movs	r2, #255	; 0xff
 80079e8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2203      	movs	r2, #3
 80079ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e013      	b.n	8007a26 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	f003 0304 	and.w	r3, r3, #4
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d0e2      	beq.n	80079d2 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	22ff      	movs	r2, #255	; 0xff
 8007a12:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
	...

08007a30 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8007a38:	4b0f      	ldr	r3, [pc, #60]	; (8007a78 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8007a3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a3e:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d00b      	beq.n	8007a66 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007a5e:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7fb ffbb 	bl	80039dc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8007a6e:	bf00      	nop
 8007a70:	3708      	adds	r7, #8
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	40010400 	.word	0x40010400

08007a7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e095      	b.n	8007bba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d108      	bne.n	8007aa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a9e:	d009      	beq.n	8007ab4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	61da      	str	r2, [r3, #28]
 8007aa6:	e005      	b.n	8007ab4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d106      	bne.n	8007ad4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7f9 fd68 	bl	80015a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007aea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007af4:	d902      	bls.n	8007afc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007af6:	2300      	movs	r3, #0
 8007af8:	60fb      	str	r3, [r7, #12]
 8007afa:	e002      	b.n	8007b02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007b0a:	d007      	beq.n	8007b1c <HAL_SPI_Init+0xa0>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b14:	d002      	beq.n	8007b1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	f003 0302 	and.w	r3, r3, #2
 8007b36:	431a      	orrs	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	431a      	orrs	r2, r3
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b5e:	ea42 0103 	orr.w	r1, r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	699b      	ldr	r3, [r3, #24]
 8007b76:	0c1b      	lsrs	r3, r3, #16
 8007b78:	f003 0204 	and.w	r2, r3, #4
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b80:	f003 0310 	and.w	r3, r3, #16
 8007b84:	431a      	orrs	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8a:	f003 0308 	and.w	r3, r3, #8
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007b98:	ea42 0103 	orr.w	r1, r2, r3
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007bb8:	2300      	movs	r3, #0
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b082      	sub	sp, #8
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e01a      	b.n	8007c0a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2202      	movs	r2, #2
 8007bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bea:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7f9 fd1b 	bl	8001628 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b088      	sub	sp, #32
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	60f8      	str	r0, [r7, #12]
 8007c1a:	60b9      	str	r1, [r7, #8]
 8007c1c:	603b      	str	r3, [r7, #0]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d101      	bne.n	8007c34 <HAL_SPI_Transmit+0x22>
 8007c30:	2302      	movs	r3, #2
 8007c32:	e158      	b.n	8007ee6 <HAL_SPI_Transmit+0x2d4>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c3c:	f7fc feee 	bl	8004a1c <HAL_GetTick>
 8007c40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007c42:	88fb      	ldrh	r3, [r7, #6]
 8007c44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d002      	beq.n	8007c58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007c52:	2302      	movs	r3, #2
 8007c54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c56:	e13d      	b.n	8007ed4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d002      	beq.n	8007c64 <HAL_SPI_Transmit+0x52>
 8007c5e:	88fb      	ldrh	r3, [r7, #6]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d102      	bne.n	8007c6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c68:	e134      	b.n	8007ed4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2203      	movs	r2, #3
 8007c6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	88fa      	ldrh	r2, [r7, #6]
 8007c82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	88fa      	ldrh	r2, [r7, #6]
 8007c88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb4:	d10f      	bne.n	8007cd6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	681a      	ldr	r2, [r3, #0]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce0:	2b40      	cmp	r3, #64	; 0x40
 8007ce2:	d007      	beq.n	8007cf4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007cf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007cfc:	d94b      	bls.n	8007d96 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <HAL_SPI_Transmit+0xfa>
 8007d06:	8afb      	ldrh	r3, [r7, #22]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d13e      	bne.n	8007d8a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	881a      	ldrh	r2, [r3, #0]
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d1c:	1c9a      	adds	r2, r3, #2
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d30:	e02b      	b.n	8007d8a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	f003 0302 	and.w	r3, r3, #2
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d112      	bne.n	8007d66 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	881a      	ldrh	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d50:	1c9a      	adds	r2, r3, #2
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007d64:	e011      	b.n	8007d8a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007d66:	f7fc fe59 	bl	8004a1c <HAL_GetTick>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d803      	bhi.n	8007d7e <HAL_SPI_Transmit+0x16c>
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7c:	d102      	bne.n	8007d84 <HAL_SPI_Transmit+0x172>
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d102      	bne.n	8007d8a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007d88:	e0a4      	b.n	8007ed4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1ce      	bne.n	8007d32 <HAL_SPI_Transmit+0x120>
 8007d94:	e07c      	b.n	8007e90 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <HAL_SPI_Transmit+0x192>
 8007d9e:	8afb      	ldrh	r3, [r7, #22]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d170      	bne.n	8007e86 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d912      	bls.n	8007dd4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db2:	881a      	ldrh	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dbe:	1c9a      	adds	r2, r3, #2
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3b02      	subs	r3, #2
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007dd2:	e058      	b.n	8007e86 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	7812      	ldrb	r2, [r2, #0]
 8007de0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007dfa:	e044      	b.n	8007e86 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	f003 0302 	and.w	r3, r3, #2
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d12b      	bne.n	8007e62 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d912      	bls.n	8007e3a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e18:	881a      	ldrh	r2, [r3, #0]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e24:	1c9a      	adds	r2, r3, #2
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	3b02      	subs	r3, #2
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e38:	e025      	b.n	8007e86 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	330c      	adds	r3, #12
 8007e44:	7812      	ldrb	r2, [r2, #0]
 8007e46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4c:	1c5a      	adds	r2, r3, #1
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007e60:	e011      	b.n	8007e86 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e62:	f7fc fddb 	bl	8004a1c <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d803      	bhi.n	8007e7a <HAL_SPI_Transmit+0x268>
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e78:	d102      	bne.n	8007e80 <HAL_SPI_Transmit+0x26e>
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d102      	bne.n	8007e86 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007e84:	e026      	b.n	8007ed4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1b5      	bne.n	8007dfc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e90:	69ba      	ldr	r2, [r7, #24]
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	68f8      	ldr	r0, [r7, #12]
 8007e96:	f000 fb5b 	bl	8008550 <SPI_EndRxTxTransaction>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d002      	beq.n	8007ea6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2220      	movs	r2, #32
 8007ea4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10a      	bne.n	8007ec4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007eae:	2300      	movs	r3, #0
 8007eb0:	613b      	str	r3, [r7, #16]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	613b      	str	r3, [r7, #16]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	613b      	str	r3, [r7, #16]
 8007ec2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	77fb      	strb	r3, [r7, #31]
 8007ed0:	e000      	b.n	8007ed4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8007ed2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007ee4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3720      	adds	r7, #32
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b08a      	sub	sp, #40	; 0x28
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	607a      	str	r2, [r7, #4]
 8007efa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007efc:	2301      	movs	r3, #1
 8007efe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d101      	bne.n	8007f14 <HAL_SPI_TransmitReceive+0x26>
 8007f10:	2302      	movs	r3, #2
 8007f12:	e1fb      	b.n	800830c <HAL_SPI_TransmitReceive+0x41e>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f1c:	f7fc fd7e 	bl	8004a1c <HAL_GetTick>
 8007f20:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f28:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007f30:	887b      	ldrh	r3, [r7, #2]
 8007f32:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007f34:	887b      	ldrh	r3, [r7, #2]
 8007f36:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007f38:	7efb      	ldrb	r3, [r7, #27]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d00e      	beq.n	8007f5c <HAL_SPI_TransmitReceive+0x6e>
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f44:	d106      	bne.n	8007f54 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d102      	bne.n	8007f54 <HAL_SPI_TransmitReceive+0x66>
 8007f4e:	7efb      	ldrb	r3, [r7, #27]
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d003      	beq.n	8007f5c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007f54:	2302      	movs	r3, #2
 8007f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007f5a:	e1cd      	b.n	80082f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d005      	beq.n	8007f6e <HAL_SPI_TransmitReceive+0x80>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d002      	beq.n	8007f6e <HAL_SPI_TransmitReceive+0x80>
 8007f68:	887b      	ldrh	r3, [r7, #2]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d103      	bne.n	8007f76 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007f74:	e1c0      	b.n	80082f8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b04      	cmp	r3, #4
 8007f80:	d003      	beq.n	8007f8a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2205      	movs	r2, #5
 8007f86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	887a      	ldrh	r2, [r7, #2]
 8007f9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	887a      	ldrh	r2, [r7, #2]
 8007fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	887a      	ldrh	r2, [r7, #2]
 8007fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	887a      	ldrh	r2, [r7, #2]
 8007fb6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007fcc:	d802      	bhi.n	8007fd4 <HAL_SPI_TransmitReceive+0xe6>
 8007fce:	8a3b      	ldrh	r3, [r7, #16]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d908      	bls.n	8007fe6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	685a      	ldr	r2, [r3, #4]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007fe2:	605a      	str	r2, [r3, #4]
 8007fe4:	e007      	b.n	8007ff6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685a      	ldr	r2, [r3, #4]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ff4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008000:	2b40      	cmp	r3, #64	; 0x40
 8008002:	d007      	beq.n	8008014 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008012:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800801c:	d97c      	bls.n	8008118 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d002      	beq.n	800802c <HAL_SPI_TransmitReceive+0x13e>
 8008026:	8a7b      	ldrh	r3, [r7, #18]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d169      	bne.n	8008100 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008030:	881a      	ldrh	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803c:	1c9a      	adds	r2, r3, #2
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008046:	b29b      	uxth	r3, r3
 8008048:	3b01      	subs	r3, #1
 800804a:	b29a      	uxth	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008050:	e056      	b.n	8008100 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f003 0302 	and.w	r3, r3, #2
 800805c:	2b02      	cmp	r3, #2
 800805e:	d11b      	bne.n	8008098 <HAL_SPI_TransmitReceive+0x1aa>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008064:	b29b      	uxth	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d016      	beq.n	8008098 <HAL_SPI_TransmitReceive+0x1aa>
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	2b01      	cmp	r3, #1
 800806e:	d113      	bne.n	8008098 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008074:	881a      	ldrh	r2, [r3, #0]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	1c9a      	adds	r2, r3, #2
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800808a:	b29b      	uxth	r3, r3
 800808c:	3b01      	subs	r3, #1
 800808e:	b29a      	uxth	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008094:	2300      	movs	r3, #0
 8008096:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d11c      	bne.n	80080e0 <HAL_SPI_TransmitReceive+0x1f2>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d016      	beq.n	80080e0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080bc:	b292      	uxth	r2, r2
 80080be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	1c9a      	adds	r2, r3, #2
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	3b01      	subs	r3, #1
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80080dc:	2301      	movs	r3, #1
 80080de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80080e0:	f7fc fc9c 	bl	8004a1c <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d807      	bhi.n	8008100 <HAL_SPI_TransmitReceive+0x212>
 80080f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f6:	d003      	beq.n	8008100 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80080fe:	e0fb      	b.n	80082f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008104:	b29b      	uxth	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d1a3      	bne.n	8008052 <HAL_SPI_TransmitReceive+0x164>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008110:	b29b      	uxth	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d19d      	bne.n	8008052 <HAL_SPI_TransmitReceive+0x164>
 8008116:	e0df      	b.n	80082d8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <HAL_SPI_TransmitReceive+0x23a>
 8008120:	8a7b      	ldrh	r3, [r7, #18]
 8008122:	2b01      	cmp	r3, #1
 8008124:	f040 80cb 	bne.w	80082be <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800812c:	b29b      	uxth	r3, r3
 800812e:	2b01      	cmp	r3, #1
 8008130:	d912      	bls.n	8008158 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008136:	881a      	ldrh	r2, [r3, #0]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008142:	1c9a      	adds	r2, r3, #2
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800814c:	b29b      	uxth	r3, r3
 800814e:	3b02      	subs	r3, #2
 8008150:	b29a      	uxth	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008156:	e0b2      	b.n	80082be <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	330c      	adds	r3, #12
 8008162:	7812      	ldrb	r2, [r2, #0]
 8008164:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008174:	b29b      	uxth	r3, r3
 8008176:	3b01      	subs	r3, #1
 8008178:	b29a      	uxth	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800817e:	e09e      	b.n	80082be <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f003 0302 	and.w	r3, r3, #2
 800818a:	2b02      	cmp	r3, #2
 800818c:	d134      	bne.n	80081f8 <HAL_SPI_TransmitReceive+0x30a>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008192:	b29b      	uxth	r3, r3
 8008194:	2b00      	cmp	r3, #0
 8008196:	d02f      	beq.n	80081f8 <HAL_SPI_TransmitReceive+0x30a>
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	2b01      	cmp	r3, #1
 800819c:	d12c      	bne.n	80081f8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d912      	bls.n	80081ce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ac:	881a      	ldrh	r2, [r3, #0]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081b8:	1c9a      	adds	r2, r3, #2
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	3b02      	subs	r3, #2
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081cc:	e012      	b.n	80081f4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	330c      	adds	r3, #12
 80081d8:	7812      	ldrb	r2, [r2, #0]
 80081da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	3b01      	subs	r3, #1
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b01      	cmp	r3, #1
 8008204:	d148      	bne.n	8008298 <HAL_SPI_TransmitReceive+0x3aa>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800820c:	b29b      	uxth	r3, r3
 800820e:	2b00      	cmp	r3, #0
 8008210:	d042      	beq.n	8008298 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008218:	b29b      	uxth	r3, r3
 800821a:	2b01      	cmp	r3, #1
 800821c:	d923      	bls.n	8008266 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68da      	ldr	r2, [r3, #12]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008228:	b292      	uxth	r2, r2
 800822a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008230:	1c9a      	adds	r2, r3, #2
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800823c:	b29b      	uxth	r3, r3
 800823e:	3b02      	subs	r3, #2
 8008240:	b29a      	uxth	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800824e:	b29b      	uxth	r3, r3
 8008250:	2b01      	cmp	r3, #1
 8008252:	d81f      	bhi.n	8008294 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008262:	605a      	str	r2, [r3, #4]
 8008264:	e016      	b.n	8008294 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f103 020c 	add.w	r2, r3, #12
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008272:	7812      	ldrb	r2, [r2, #0]
 8008274:	b2d2      	uxtb	r2, r2
 8008276:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827c:	1c5a      	adds	r2, r3, #1
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008288:	b29b      	uxth	r3, r3
 800828a:	3b01      	subs	r3, #1
 800828c:	b29a      	uxth	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008294:	2301      	movs	r3, #1
 8008296:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008298:	f7fc fbc0 	bl	8004a1c <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d803      	bhi.n	80082b0 <HAL_SPI_TransmitReceive+0x3c2>
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ae:	d102      	bne.n	80082b6 <HAL_SPI_TransmitReceive+0x3c8>
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d103      	bne.n	80082be <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80082b6:	2303      	movs	r3, #3
 80082b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80082bc:	e01c      	b.n	80082f8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f47f af5b 	bne.w	8008180 <HAL_SPI_TransmitReceive+0x292>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f47f af54 	bne.w	8008180 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80082d8:	69fa      	ldr	r2, [r7, #28]
 80082da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 f937 	bl	8008550 <SPI_EndRxTxTransaction>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d006      	beq.n	80082f6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2220      	movs	r2, #32
 80082f2:	661a      	str	r2, [r3, #96]	; 0x60
 80082f4:	e000      	b.n	80082f8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80082f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008308:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800830c:	4618      	mov	r0, r3
 800830e:	3728      	adds	r7, #40	; 0x28
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b088      	sub	sp, #32
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	603b      	str	r3, [r7, #0]
 8008320:	4613      	mov	r3, r2
 8008322:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008324:	f7fc fb7a 	bl	8004a1c <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832c:	1a9b      	subs	r3, r3, r2
 800832e:	683a      	ldr	r2, [r7, #0]
 8008330:	4413      	add	r3, r2
 8008332:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008334:	f7fc fb72 	bl	8004a1c <HAL_GetTick>
 8008338:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800833a:	4b39      	ldr	r3, [pc, #228]	; (8008420 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	015b      	lsls	r3, r3, #5
 8008340:	0d1b      	lsrs	r3, r3, #20
 8008342:	69fa      	ldr	r2, [r7, #28]
 8008344:	fb02 f303 	mul.w	r3, r2, r3
 8008348:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800834a:	e054      	b.n	80083f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008352:	d050      	beq.n	80083f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008354:	f7fc fb62 	bl	8004a1c <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	69fa      	ldr	r2, [r7, #28]
 8008360:	429a      	cmp	r2, r3
 8008362:	d902      	bls.n	800836a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d13d      	bne.n	80083e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008378:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008382:	d111      	bne.n	80083a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800838c:	d004      	beq.n	8008398 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008396:	d107      	bne.n	80083a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083b0:	d10f      	bne.n	80083d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083c0:	601a      	str	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e017      	b.n	8008416 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	3b01      	subs	r3, #1
 80083f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	689a      	ldr	r2, [r3, #8]
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	4013      	ands	r3, r2
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	429a      	cmp	r2, r3
 8008404:	bf0c      	ite	eq
 8008406:	2301      	moveq	r3, #1
 8008408:	2300      	movne	r3, #0
 800840a:	b2db      	uxtb	r3, r3
 800840c:	461a      	mov	r2, r3
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	429a      	cmp	r2, r3
 8008412:	d19b      	bne.n	800834c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008414:	2300      	movs	r3, #0
}
 8008416:	4618      	mov	r0, r3
 8008418:	3720      	adds	r7, #32
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20000000 	.word	0x20000000

08008424 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b08a      	sub	sp, #40	; 0x28
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
 8008430:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008432:	2300      	movs	r3, #0
 8008434:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008436:	f7fc faf1 	bl	8004a1c <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843e:	1a9b      	subs	r3, r3, r2
 8008440:	683a      	ldr	r2, [r7, #0]
 8008442:	4413      	add	r3, r2
 8008444:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008446:	f7fc fae9 	bl	8004a1c <HAL_GetTick>
 800844a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	330c      	adds	r3, #12
 8008452:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008454:	4b3d      	ldr	r3, [pc, #244]	; (800854c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	4613      	mov	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4413      	add	r3, r2
 800845e:	00da      	lsls	r2, r3, #3
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	0d1b      	lsrs	r3, r3, #20
 8008464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008466:	fb02 f303 	mul.w	r3, r2, r3
 800846a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800846c:	e060      	b.n	8008530 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008474:	d107      	bne.n	8008486 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008484:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800848c:	d050      	beq.n	8008530 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800848e:	f7fc fac5 	bl	8004a1c <HAL_GetTick>
 8008492:	4602      	mov	r2, r0
 8008494:	6a3b      	ldr	r3, [r7, #32]
 8008496:	1ad3      	subs	r3, r2, r3
 8008498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800849a:	429a      	cmp	r2, r3
 800849c:	d902      	bls.n	80084a4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d13d      	bne.n	8008520 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80084b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084bc:	d111      	bne.n	80084e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084c6:	d004      	beq.n	80084d2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d0:	d107      	bne.n	80084e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084ea:	d10f      	bne.n	800850c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800850a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800851c:	2303      	movs	r3, #3
 800851e:	e010      	b.n	8008542 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008526:	2300      	movs	r3, #0
 8008528:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	3b01      	subs	r3, #1
 800852e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689a      	ldr	r2, [r3, #8]
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	4013      	ands	r3, r2
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	429a      	cmp	r2, r3
 800853e:	d196      	bne.n	800846e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3728      	adds	r7, #40	; 0x28
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20000000 	.word	0x20000000

08008550 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af02      	add	r7, sp, #8
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	9300      	str	r3, [sp, #0]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	2200      	movs	r2, #0
 8008564:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f7ff ff5b 	bl	8008424 <SPI_WaitFifoStateUntilTimeout>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d007      	beq.n	8008584 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008578:	f043 0220 	orr.w	r2, r3, #32
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e027      	b.n	80085d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2200      	movs	r2, #0
 800858c:	2180      	movs	r1, #128	; 0x80
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f7ff fec0 	bl	8008314 <SPI_WaitFlagStateUntilTimeout>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d007      	beq.n	80085aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800859e:	f043 0220 	orr.w	r2, r3, #32
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e014      	b.n	80085d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f7ff ff34 	bl	8008424 <SPI_WaitFifoStateUntilTimeout>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d007      	beq.n	80085d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085c6:	f043 0220 	orr.w	r2, r3, #32
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e000      	b.n	80085d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d101      	bne.n	80085ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e049      	b.n	8008682 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d106      	bne.n	8008608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7f9 fa40 	bl	8001a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2202      	movs	r2, #2
 800860c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	3304      	adds	r3, #4
 8008618:	4619      	mov	r1, r3
 800861a:	4610      	mov	r0, r2
 800861c:	f000 fd7e 	bl	800911c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2201      	movs	r2, #1
 800863c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3708      	adds	r7, #8
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}

0800868a <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800868a:	b580      	push	{r7, lr}
 800868c:	b082      	sub	sp, #8
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2202      	movs	r2, #2
 8008696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6a1a      	ldr	r2, [r3, #32]
 80086a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80086a4:	4013      	ands	r3, r2
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10f      	bne.n	80086ca <HAL_TIM_Base_DeInit+0x40>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6a1a      	ldr	r2, [r3, #32]
 80086b0:	f240 4344 	movw	r3, #1092	; 0x444
 80086b4:	4013      	ands	r3, r2
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d107      	bne.n	80086ca <HAL_TIM_Base_DeInit+0x40>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f022 0201 	bic.w	r2, r2, #1
 80086c8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7f9 fa30 	bl	8001b30 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
	...

08008744 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b01      	cmp	r3, #1
 8008756:	d001      	beq.n	800875c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e047      	b.n	80087ec <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2202      	movs	r2, #2
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a23      	ldr	r2, [pc, #140]	; (80087f8 <HAL_TIM_Base_Start+0xb4>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d01d      	beq.n	80087aa <HAL_TIM_Base_Start+0x66>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008776:	d018      	beq.n	80087aa <HAL_TIM_Base_Start+0x66>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a1f      	ldr	r2, [pc, #124]	; (80087fc <HAL_TIM_Base_Start+0xb8>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d013      	beq.n	80087aa <HAL_TIM_Base_Start+0x66>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a1e      	ldr	r2, [pc, #120]	; (8008800 <HAL_TIM_Base_Start+0xbc>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d00e      	beq.n	80087aa <HAL_TIM_Base_Start+0x66>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a1c      	ldr	r2, [pc, #112]	; (8008804 <HAL_TIM_Base_Start+0xc0>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d009      	beq.n	80087aa <HAL_TIM_Base_Start+0x66>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a1b      	ldr	r2, [pc, #108]	; (8008808 <HAL_TIM_Base_Start+0xc4>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d004      	beq.n	80087aa <HAL_TIM_Base_Start+0x66>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a19      	ldr	r2, [pc, #100]	; (800880c <HAL_TIM_Base_Start+0xc8>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d115      	bne.n	80087d6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	689a      	ldr	r2, [r3, #8]
 80087b0:	4b17      	ldr	r3, [pc, #92]	; (8008810 <HAL_TIM_Base_Start+0xcc>)
 80087b2:	4013      	ands	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2b06      	cmp	r3, #6
 80087ba:	d015      	beq.n	80087e8 <HAL_TIM_Base_Start+0xa4>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087c2:	d011      	beq.n	80087e8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f042 0201 	orr.w	r2, r2, #1
 80087d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087d4:	e008      	b.n	80087e8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f042 0201 	orr.w	r2, r2, #1
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	e000      	b.n	80087ea <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	40012c00 	.word	0x40012c00
 80087fc:	40000400 	.word	0x40000400
 8008800:	40000800 	.word	0x40000800
 8008804:	40000c00 	.word	0x40000c00
 8008808:	40013400 	.word	0x40013400
 800880c:	40014000 	.word	0x40014000
 8008810:	00010007 	.word	0x00010007

08008814 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6a1a      	ldr	r2, [r3, #32]
 8008822:	f241 1311 	movw	r3, #4369	; 0x1111
 8008826:	4013      	ands	r3, r2
 8008828:	2b00      	cmp	r3, #0
 800882a:	d10f      	bne.n	800884c <HAL_TIM_Base_Stop+0x38>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6a1a      	ldr	r2, [r3, #32]
 8008832:	f240 4344 	movw	r3, #1092	; 0x444
 8008836:	4013      	ands	r3, r2
 8008838:	2b00      	cmp	r3, #0
 800883a:	d107      	bne.n	800884c <HAL_TIM_Base_Stop+0x38>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f022 0201 	bic.w	r2, r2, #1
 800884a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68da      	ldr	r2, [r3, #12]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f022 0201 	bic.w	r2, r2, #1
 8008878:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6a1a      	ldr	r2, [r3, #32]
 8008880:	f241 1311 	movw	r3, #4369	; 0x1111
 8008884:	4013      	ands	r3, r2
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10f      	bne.n	80088aa <HAL_TIM_Base_Stop_IT+0x48>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6a1a      	ldr	r2, [r3, #32]
 8008890:	f240 4344 	movw	r3, #1092	; 0x444
 8008894:	4013      	ands	r3, r2
 8008896:	2b00      	cmp	r3, #0
 8008898:	d107      	bne.n	80088aa <HAL_TIM_Base_Stop_IT+0x48>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f022 0201 	bic.w	r2, r2, #1
 80088a8:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e049      	b.n	8008966 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d106      	bne.n	80088ec <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f89d 	bl	8008a26 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2202      	movs	r2, #2
 80088f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3304      	adds	r3, #4
 80088fc:	4619      	mov	r1, r3
 80088fe:	4610      	mov	r0, r2
 8008900:	f000 fc0c 	bl	800911c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <HAL_TIM_OC_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_DeInit(TIM_HandleTypeDef *htim)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b082      	sub	sp, #8
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2202      	movs	r2, #2
 800897a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	6a1a      	ldr	r2, [r3, #32]
 8008984:	f241 1311 	movw	r3, #4369	; 0x1111
 8008988:	4013      	ands	r3, r2
 800898a:	2b00      	cmp	r3, #0
 800898c:	d10f      	bne.n	80089ae <HAL_TIM_OC_DeInit+0x40>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	6a1a      	ldr	r2, [r3, #32]
 8008994:	f240 4344 	movw	r3, #1092	; 0x444
 8008998:	4013      	ands	r3, r2
 800899a:	2b00      	cmp	r3, #0
 800899c:	d107      	bne.n	80089ae <HAL_TIM_OC_DeInit+0x40>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0201 	bic.w	r2, r2, #1
 80089ac:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->OC_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_OC_MspDeInit(htim);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f000 f843 	bl	8008a3a <HAL_TIM_OC_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008a2e:	bf00      	nop
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <HAL_TIM_OC_MspDeInit>:
  * @brief  DeInitializes TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspDeInit(TIM_HandleTypeDef *htim)
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspDeInit could be implemented in the user file
   */
}
 8008a42:	bf00      	nop
 8008a44:	370c      	adds	r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
	...

08008a50 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	2b0c      	cmp	r3, #12
 8008a62:	d841      	bhi.n	8008ae8 <HAL_TIM_OC_Stop_IT+0x98>
 8008a64:	a201      	add	r2, pc, #4	; (adr r2, 8008a6c <HAL_TIM_OC_Stop_IT+0x1c>)
 8008a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a6a:	bf00      	nop
 8008a6c:	08008aa1 	.word	0x08008aa1
 8008a70:	08008ae9 	.word	0x08008ae9
 8008a74:	08008ae9 	.word	0x08008ae9
 8008a78:	08008ae9 	.word	0x08008ae9
 8008a7c:	08008ab3 	.word	0x08008ab3
 8008a80:	08008ae9 	.word	0x08008ae9
 8008a84:	08008ae9 	.word	0x08008ae9
 8008a88:	08008ae9 	.word	0x08008ae9
 8008a8c:	08008ac5 	.word	0x08008ac5
 8008a90:	08008ae9 	.word	0x08008ae9
 8008a94:	08008ae9 	.word	0x08008ae9
 8008a98:	08008ae9 	.word	0x08008ae9
 8008a9c:	08008ad7 	.word	0x08008ad7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	68da      	ldr	r2, [r3, #12]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f022 0202 	bic.w	r2, r2, #2
 8008aae:	60da      	str	r2, [r3, #12]
      break;
 8008ab0:	e01d      	b.n	8008aee <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68da      	ldr	r2, [r3, #12]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f022 0204 	bic.w	r2, r2, #4
 8008ac0:	60da      	str	r2, [r3, #12]
      break;
 8008ac2:	e014      	b.n	8008aee <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68da      	ldr	r2, [r3, #12]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f022 0208 	bic.w	r2, r2, #8
 8008ad2:	60da      	str	r2, [r3, #12]
      break;
 8008ad4:	e00b      	b.n	8008aee <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68da      	ldr	r2, [r3, #12]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f022 0210 	bic.w	r2, r2, #16
 8008ae4:	60da      	str	r2, [r3, #12]
      break;
 8008ae6:	e002      	b.n	8008aee <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	73fb      	strb	r3, [r7, #15]
      break;
 8008aec:	bf00      	nop
  }

  if (status == HAL_OK)
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f040 8081 	bne.w	8008bf8 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2200      	movs	r2, #0
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 ff16 	bl	8009930 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a3e      	ldr	r2, [pc, #248]	; (8008c04 <HAL_TIM_OC_Stop_IT+0x1b4>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d013      	beq.n	8008b36 <HAL_TIM_OC_Stop_IT+0xe6>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a3d      	ldr	r2, [pc, #244]	; (8008c08 <HAL_TIM_OC_Stop_IT+0x1b8>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d00e      	beq.n	8008b36 <HAL_TIM_OC_Stop_IT+0xe6>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a3b      	ldr	r2, [pc, #236]	; (8008c0c <HAL_TIM_OC_Stop_IT+0x1bc>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d009      	beq.n	8008b36 <HAL_TIM_OC_Stop_IT+0xe6>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a3a      	ldr	r2, [pc, #232]	; (8008c10 <HAL_TIM_OC_Stop_IT+0x1c0>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d004      	beq.n	8008b36 <HAL_TIM_OC_Stop_IT+0xe6>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a38      	ldr	r2, [pc, #224]	; (8008c14 <HAL_TIM_OC_Stop_IT+0x1c4>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d101      	bne.n	8008b3a <HAL_TIM_OC_Stop_IT+0xea>
 8008b36:	2301      	movs	r3, #1
 8008b38:	e000      	b.n	8008b3c <HAL_TIM_OC_Stop_IT+0xec>
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d017      	beq.n	8008b70 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	6a1a      	ldr	r2, [r3, #32]
 8008b46:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10f      	bne.n	8008b70 <HAL_TIM_OC_Stop_IT+0x120>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6a1a      	ldr	r2, [r3, #32]
 8008b56:	f240 4344 	movw	r3, #1092	; 0x444
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d107      	bne.n	8008b70 <HAL_TIM_OC_Stop_IT+0x120>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008b6e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6a1a      	ldr	r2, [r3, #32]
 8008b76:	f241 1311 	movw	r3, #4369	; 0x1111
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10f      	bne.n	8008ba0 <HAL_TIM_OC_Stop_IT+0x150>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6a1a      	ldr	r2, [r3, #32]
 8008b86:	f240 4344 	movw	r3, #1092	; 0x444
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d107      	bne.n	8008ba0 <HAL_TIM_OC_Stop_IT+0x150>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0201 	bic.w	r2, r2, #1
 8008b9e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d104      	bne.n	8008bb0 <HAL_TIM_OC_Stop_IT+0x160>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bae:	e023      	b.n	8008bf8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	2b04      	cmp	r3, #4
 8008bb4:	d104      	bne.n	8008bc0 <HAL_TIM_OC_Stop_IT+0x170>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2201      	movs	r2, #1
 8008bba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bbe:	e01b      	b.n	8008bf8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2b08      	cmp	r3, #8
 8008bc4:	d104      	bne.n	8008bd0 <HAL_TIM_OC_Stop_IT+0x180>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bce:	e013      	b.n	8008bf8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	2b0c      	cmp	r3, #12
 8008bd4:	d104      	bne.n	8008be0 <HAL_TIM_OC_Stop_IT+0x190>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2201      	movs	r2, #1
 8008bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bde:	e00b      	b.n	8008bf8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	2b10      	cmp	r3, #16
 8008be4:	d104      	bne.n	8008bf0 <HAL_TIM_OC_Stop_IT+0x1a0>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2201      	movs	r2, #1
 8008bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bee:	e003      	b.n	8008bf8 <HAL_TIM_OC_Stop_IT+0x1a8>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	40012c00 	.word	0x40012c00
 8008c08:	40013400 	.word	0x40013400
 8008c0c:	40014000 	.word	0x40014000
 8008c10:	40014400 	.word	0x40014400
 8008c14:	40014800 	.word	0x40014800

08008c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	f003 0302 	and.w	r3, r3, #2
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d122      	bne.n	8008c74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f003 0302 	and.w	r3, r3, #2
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d11b      	bne.n	8008c74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f06f 0202 	mvn.w	r2, #2
 8008c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	699b      	ldr	r3, [r3, #24]
 8008c52:	f003 0303 	and.w	r3, r3, #3
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fa3f 	bl	80090de <HAL_TIM_IC_CaptureCallback>
 8008c60:	e005      	b.n	8008c6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7fb fd60 	bl	8004728 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 fa42 	bl	80090f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	f003 0304 	and.w	r3, r3, #4
 8008c7e:	2b04      	cmp	r3, #4
 8008c80:	d122      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f003 0304 	and.w	r3, r3, #4
 8008c8c:	2b04      	cmp	r3, #4
 8008c8e:	d11b      	bne.n	8008cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f06f 0204 	mvn.w	r2, #4
 8008c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2202      	movs	r2, #2
 8008c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fa15 	bl	80090de <HAL_TIM_IC_CaptureCallback>
 8008cb4:	e005      	b.n	8008cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f7fb fd36 	bl	8004728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fa18 	bl	80090f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	f003 0308 	and.w	r3, r3, #8
 8008cd2:	2b08      	cmp	r3, #8
 8008cd4:	d122      	bne.n	8008d1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f003 0308 	and.w	r3, r3, #8
 8008ce0:	2b08      	cmp	r3, #8
 8008ce2:	d11b      	bne.n	8008d1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f06f 0208 	mvn.w	r2, #8
 8008cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2204      	movs	r2, #4
 8008cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	69db      	ldr	r3, [r3, #28]
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d003      	beq.n	8008d0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f9eb 	bl	80090de <HAL_TIM_IC_CaptureCallback>
 8008d08:	e005      	b.n	8008d16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7fb fd0c 	bl	8004728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f000 f9ee 	bl	80090f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	f003 0310 	and.w	r3, r3, #16
 8008d26:	2b10      	cmp	r3, #16
 8008d28:	d122      	bne.n	8008d70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f003 0310 	and.w	r3, r3, #16
 8008d34:	2b10      	cmp	r3, #16
 8008d36:	d11b      	bne.n	8008d70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f06f 0210 	mvn.w	r2, #16
 8008d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2208      	movs	r2, #8
 8008d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f9c1 	bl	80090de <HAL_TIM_IC_CaptureCallback>
 8008d5c:	e005      	b.n	8008d6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f7fb fce2 	bl	8004728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f9c4 	bl	80090f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	691b      	ldr	r3, [r3, #16]
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d10e      	bne.n	8008d9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f003 0301 	and.w	r3, r3, #1
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d107      	bne.n	8008d9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f06f 0201 	mvn.w	r2, #1
 8008d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f7f9 f85c 	bl	8001e54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	691b      	ldr	r3, [r3, #16]
 8008da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da6:	2b80      	cmp	r3, #128	; 0x80
 8008da8:	d10e      	bne.n	8008dc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db4:	2b80      	cmp	r3, #128	; 0x80
 8008db6:	d107      	bne.n	8008dc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fe6c 	bl	8009aa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	691b      	ldr	r3, [r3, #16]
 8008dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd6:	d10e      	bne.n	8008df6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008de2:	2b80      	cmp	r3, #128	; 0x80
 8008de4:	d107      	bne.n	8008df6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fe5f 	bl	8009ab4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	691b      	ldr	r3, [r3, #16]
 8008dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e00:	2b40      	cmp	r3, #64	; 0x40
 8008e02:	d10e      	bne.n	8008e22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e0e:	2b40      	cmp	r3, #64	; 0x40
 8008e10:	d107      	bne.n	8008e22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f972 	bl	8009106 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	f003 0320 	and.w	r3, r3, #32
 8008e2c:	2b20      	cmp	r3, #32
 8008e2e:	d10e      	bne.n	8008e4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	f003 0320 	and.w	r3, r3, #32
 8008e3a:	2b20      	cmp	r3, #32
 8008e3c:	d107      	bne.n	8008e4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f06f 0220 	mvn.w	r2, #32
 8008e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fe1f 	bl	8009a8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e4e:	bf00      	nop
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b086      	sub	sp, #24
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d101      	bne.n	8008e76 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008e72:	2302      	movs	r3, #2
 8008e74:	e066      	b.n	8008f44 <HAL_TIM_OC_ConfigChannel+0xec>
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b14      	cmp	r3, #20
 8008e82:	d857      	bhi.n	8008f34 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008e84:	a201      	add	r2, pc, #4	; (adr r2, 8008e8c <HAL_TIM_OC_ConfigChannel+0x34>)
 8008e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8a:	bf00      	nop
 8008e8c:	08008ee1 	.word	0x08008ee1
 8008e90:	08008f35 	.word	0x08008f35
 8008e94:	08008f35 	.word	0x08008f35
 8008e98:	08008f35 	.word	0x08008f35
 8008e9c:	08008eef 	.word	0x08008eef
 8008ea0:	08008f35 	.word	0x08008f35
 8008ea4:	08008f35 	.word	0x08008f35
 8008ea8:	08008f35 	.word	0x08008f35
 8008eac:	08008efd 	.word	0x08008efd
 8008eb0:	08008f35 	.word	0x08008f35
 8008eb4:	08008f35 	.word	0x08008f35
 8008eb8:	08008f35 	.word	0x08008f35
 8008ebc:	08008f0b 	.word	0x08008f0b
 8008ec0:	08008f35 	.word	0x08008f35
 8008ec4:	08008f35 	.word	0x08008f35
 8008ec8:	08008f35 	.word	0x08008f35
 8008ecc:	08008f19 	.word	0x08008f19
 8008ed0:	08008f35 	.word	0x08008f35
 8008ed4:	08008f35 	.word	0x08008f35
 8008ed8:	08008f35 	.word	0x08008f35
 8008edc:	08008f27 	.word	0x08008f27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68b9      	ldr	r1, [r7, #8]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 f9b2 	bl	8009250 <TIM_OC1_SetConfig>
      break;
 8008eec:	e025      	b.n	8008f3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68b9      	ldr	r1, [r7, #8]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 fa3b 	bl	8009370 <TIM_OC2_SetConfig>
      break;
 8008efa:	e01e      	b.n	8008f3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68b9      	ldr	r1, [r7, #8]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 fabe 	bl	8009484 <TIM_OC3_SetConfig>
      break;
 8008f08:	e017      	b.n	8008f3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68b9      	ldr	r1, [r7, #8]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 fb3f 	bl	8009594 <TIM_OC4_SetConfig>
      break;
 8008f16:	e010      	b.n	8008f3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68b9      	ldr	r1, [r7, #8]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f000 fba2 	bl	8009668 <TIM_OC5_SetConfig>
      break;
 8008f24:	e009      	b.n	8008f3a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68b9      	ldr	r1, [r7, #8]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 fbff 	bl	8009730 <TIM_OC6_SetConfig>
      break;
 8008f32:	e002      	b.n	8008f3a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	75fb      	strb	r3, [r7, #23]
      break;
 8008f38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3718      	adds	r7, #24
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d101      	bne.n	8008f68 <HAL_TIM_ConfigClockSource+0x1c>
 8008f64:	2302      	movs	r3, #2
 8008f66:	e0b6      	b.n	80090d6 <HAL_TIM_ConfigClockSource+0x18a>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2202      	movs	r2, #2
 8008f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fa4:	d03e      	beq.n	8009024 <HAL_TIM_ConfigClockSource+0xd8>
 8008fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008faa:	f200 8087 	bhi.w	80090bc <HAL_TIM_ConfigClockSource+0x170>
 8008fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fb2:	f000 8086 	beq.w	80090c2 <HAL_TIM_ConfigClockSource+0x176>
 8008fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fba:	d87f      	bhi.n	80090bc <HAL_TIM_ConfigClockSource+0x170>
 8008fbc:	2b70      	cmp	r3, #112	; 0x70
 8008fbe:	d01a      	beq.n	8008ff6 <HAL_TIM_ConfigClockSource+0xaa>
 8008fc0:	2b70      	cmp	r3, #112	; 0x70
 8008fc2:	d87b      	bhi.n	80090bc <HAL_TIM_ConfigClockSource+0x170>
 8008fc4:	2b60      	cmp	r3, #96	; 0x60
 8008fc6:	d050      	beq.n	800906a <HAL_TIM_ConfigClockSource+0x11e>
 8008fc8:	2b60      	cmp	r3, #96	; 0x60
 8008fca:	d877      	bhi.n	80090bc <HAL_TIM_ConfigClockSource+0x170>
 8008fcc:	2b50      	cmp	r3, #80	; 0x50
 8008fce:	d03c      	beq.n	800904a <HAL_TIM_ConfigClockSource+0xfe>
 8008fd0:	2b50      	cmp	r3, #80	; 0x50
 8008fd2:	d873      	bhi.n	80090bc <HAL_TIM_ConfigClockSource+0x170>
 8008fd4:	2b40      	cmp	r3, #64	; 0x40
 8008fd6:	d058      	beq.n	800908a <HAL_TIM_ConfigClockSource+0x13e>
 8008fd8:	2b40      	cmp	r3, #64	; 0x40
 8008fda:	d86f      	bhi.n	80090bc <HAL_TIM_ConfigClockSource+0x170>
 8008fdc:	2b30      	cmp	r3, #48	; 0x30
 8008fde:	d064      	beq.n	80090aa <HAL_TIM_ConfigClockSource+0x15e>
 8008fe0:	2b30      	cmp	r3, #48	; 0x30
 8008fe2:	d86b      	bhi.n	80090bc <HAL_TIM_ConfigClockSource+0x170>
 8008fe4:	2b20      	cmp	r3, #32
 8008fe6:	d060      	beq.n	80090aa <HAL_TIM_ConfigClockSource+0x15e>
 8008fe8:	2b20      	cmp	r3, #32
 8008fea:	d867      	bhi.n	80090bc <HAL_TIM_ConfigClockSource+0x170>
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d05c      	beq.n	80090aa <HAL_TIM_ConfigClockSource+0x15e>
 8008ff0:	2b10      	cmp	r3, #16
 8008ff2:	d05a      	beq.n	80090aa <HAL_TIM_ConfigClockSource+0x15e>
 8008ff4:	e062      	b.n	80090bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6818      	ldr	r0, [r3, #0]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	6899      	ldr	r1, [r3, #8]
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	f000 fc73 	bl	80098f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009018:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	609a      	str	r2, [r3, #8]
      break;
 8009022:	e04f      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6818      	ldr	r0, [r3, #0]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	6899      	ldr	r1, [r3, #8]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f000 fc5c 	bl	80098f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689a      	ldr	r2, [r3, #8]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009046:	609a      	str	r2, [r3, #8]
      break;
 8009048:	e03c      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6818      	ldr	r0, [r3, #0]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	6859      	ldr	r1, [r3, #4]
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	461a      	mov	r2, r3
 8009058:	f000 fbd0 	bl	80097fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2150      	movs	r1, #80	; 0x50
 8009062:	4618      	mov	r0, r3
 8009064:	f000 fc29 	bl	80098ba <TIM_ITRx_SetConfig>
      break;
 8009068:	e02c      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6818      	ldr	r0, [r3, #0]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	6859      	ldr	r1, [r3, #4]
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	461a      	mov	r2, r3
 8009078:	f000 fbef 	bl	800985a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2160      	movs	r1, #96	; 0x60
 8009082:	4618      	mov	r0, r3
 8009084:	f000 fc19 	bl	80098ba <TIM_ITRx_SetConfig>
      break;
 8009088:	e01c      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6818      	ldr	r0, [r3, #0]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	6859      	ldr	r1, [r3, #4]
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	461a      	mov	r2, r3
 8009098:	f000 fbb0 	bl	80097fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	2140      	movs	r1, #64	; 0x40
 80090a2:	4618      	mov	r0, r3
 80090a4:	f000 fc09 	bl	80098ba <TIM_ITRx_SetConfig>
      break;
 80090a8:	e00c      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4619      	mov	r1, r3
 80090b4:	4610      	mov	r0, r2
 80090b6:	f000 fc00 	bl	80098ba <TIM_ITRx_SetConfig>
      break;
 80090ba:	e003      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80090bc:	2301      	movs	r3, #1
 80090be:	73fb      	strb	r3, [r7, #15]
      break;
 80090c0:	e000      	b.n	80090c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80090c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090de:	b480      	push	{r7}
 80090e0:	b083      	sub	sp, #12
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090f2:	b480      	push	{r7}
 80090f4:	b083      	sub	sp, #12
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090fa:	bf00      	nop
 80090fc:	370c      	adds	r7, #12
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr

08009106 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009106:	b480      	push	{r7}
 8009108:	b083      	sub	sp, #12
 800910a:	af00      	add	r7, sp, #0
 800910c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800910e:	bf00      	nop
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
	...

0800911c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a40      	ldr	r2, [pc, #256]	; (8009230 <TIM_Base_SetConfig+0x114>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d013      	beq.n	800915c <TIM_Base_SetConfig+0x40>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800913a:	d00f      	beq.n	800915c <TIM_Base_SetConfig+0x40>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a3d      	ldr	r2, [pc, #244]	; (8009234 <TIM_Base_SetConfig+0x118>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d00b      	beq.n	800915c <TIM_Base_SetConfig+0x40>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a3c      	ldr	r2, [pc, #240]	; (8009238 <TIM_Base_SetConfig+0x11c>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d007      	beq.n	800915c <TIM_Base_SetConfig+0x40>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	4a3b      	ldr	r2, [pc, #236]	; (800923c <TIM_Base_SetConfig+0x120>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d003      	beq.n	800915c <TIM_Base_SetConfig+0x40>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	4a3a      	ldr	r2, [pc, #232]	; (8009240 <TIM_Base_SetConfig+0x124>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d108      	bne.n	800916e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	4313      	orrs	r3, r2
 800916c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a2f      	ldr	r2, [pc, #188]	; (8009230 <TIM_Base_SetConfig+0x114>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d01f      	beq.n	80091b6 <TIM_Base_SetConfig+0x9a>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800917c:	d01b      	beq.n	80091b6 <TIM_Base_SetConfig+0x9a>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a2c      	ldr	r2, [pc, #176]	; (8009234 <TIM_Base_SetConfig+0x118>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d017      	beq.n	80091b6 <TIM_Base_SetConfig+0x9a>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a2b      	ldr	r2, [pc, #172]	; (8009238 <TIM_Base_SetConfig+0x11c>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d013      	beq.n	80091b6 <TIM_Base_SetConfig+0x9a>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4a2a      	ldr	r2, [pc, #168]	; (800923c <TIM_Base_SetConfig+0x120>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d00f      	beq.n	80091b6 <TIM_Base_SetConfig+0x9a>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a29      	ldr	r2, [pc, #164]	; (8009240 <TIM_Base_SetConfig+0x124>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d00b      	beq.n	80091b6 <TIM_Base_SetConfig+0x9a>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a28      	ldr	r2, [pc, #160]	; (8009244 <TIM_Base_SetConfig+0x128>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d007      	beq.n	80091b6 <TIM_Base_SetConfig+0x9a>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	4a27      	ldr	r2, [pc, #156]	; (8009248 <TIM_Base_SetConfig+0x12c>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d003      	beq.n	80091b6 <TIM_Base_SetConfig+0x9a>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	4a26      	ldr	r2, [pc, #152]	; (800924c <TIM_Base_SetConfig+0x130>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d108      	bne.n	80091c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	689a      	ldr	r2, [r3, #8]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a10      	ldr	r2, [pc, #64]	; (8009230 <TIM_Base_SetConfig+0x114>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d00f      	beq.n	8009214 <TIM_Base_SetConfig+0xf8>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a12      	ldr	r2, [pc, #72]	; (8009240 <TIM_Base_SetConfig+0x124>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d00b      	beq.n	8009214 <TIM_Base_SetConfig+0xf8>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a11      	ldr	r2, [pc, #68]	; (8009244 <TIM_Base_SetConfig+0x128>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d007      	beq.n	8009214 <TIM_Base_SetConfig+0xf8>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a10      	ldr	r2, [pc, #64]	; (8009248 <TIM_Base_SetConfig+0x12c>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d003      	beq.n	8009214 <TIM_Base_SetConfig+0xf8>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a0f      	ldr	r2, [pc, #60]	; (800924c <TIM_Base_SetConfig+0x130>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d103      	bne.n	800921c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	691a      	ldr	r2, [r3, #16]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2201      	movs	r2, #1
 8009220:	615a      	str	r2, [r3, #20]
}
 8009222:	bf00      	nop
 8009224:	3714      	adds	r7, #20
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	40012c00 	.word	0x40012c00
 8009234:	40000400 	.word	0x40000400
 8009238:	40000800 	.word	0x40000800
 800923c:	40000c00 	.word	0x40000c00
 8009240:	40013400 	.word	0x40013400
 8009244:	40014000 	.word	0x40014000
 8009248:	40014400 	.word	0x40014400
 800924c:	40014800 	.word	0x40014800

08009250 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009250:	b480      	push	{r7}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	f023 0201 	bic.w	r2, r3, #1
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	699b      	ldr	r3, [r3, #24]
 8009276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800927e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f023 0303 	bic.w	r3, r3, #3
 800928a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	4313      	orrs	r3, r2
 8009294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f023 0302 	bic.w	r3, r3, #2
 800929c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	4313      	orrs	r3, r2
 80092a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a2c      	ldr	r2, [pc, #176]	; (800935c <TIM_OC1_SetConfig+0x10c>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d00f      	beq.n	80092d0 <TIM_OC1_SetConfig+0x80>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a2b      	ldr	r2, [pc, #172]	; (8009360 <TIM_OC1_SetConfig+0x110>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d00b      	beq.n	80092d0 <TIM_OC1_SetConfig+0x80>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a2a      	ldr	r2, [pc, #168]	; (8009364 <TIM_OC1_SetConfig+0x114>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d007      	beq.n	80092d0 <TIM_OC1_SetConfig+0x80>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a29      	ldr	r2, [pc, #164]	; (8009368 <TIM_OC1_SetConfig+0x118>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d003      	beq.n	80092d0 <TIM_OC1_SetConfig+0x80>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a28      	ldr	r2, [pc, #160]	; (800936c <TIM_OC1_SetConfig+0x11c>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d10c      	bne.n	80092ea <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f023 0308 	bic.w	r3, r3, #8
 80092d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	697a      	ldr	r2, [r7, #20]
 80092de:	4313      	orrs	r3, r2
 80092e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f023 0304 	bic.w	r3, r3, #4
 80092e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a1b      	ldr	r2, [pc, #108]	; (800935c <TIM_OC1_SetConfig+0x10c>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d00f      	beq.n	8009312 <TIM_OC1_SetConfig+0xc2>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a1a      	ldr	r2, [pc, #104]	; (8009360 <TIM_OC1_SetConfig+0x110>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d00b      	beq.n	8009312 <TIM_OC1_SetConfig+0xc2>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a19      	ldr	r2, [pc, #100]	; (8009364 <TIM_OC1_SetConfig+0x114>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d007      	beq.n	8009312 <TIM_OC1_SetConfig+0xc2>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a18      	ldr	r2, [pc, #96]	; (8009368 <TIM_OC1_SetConfig+0x118>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d003      	beq.n	8009312 <TIM_OC1_SetConfig+0xc2>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4a17      	ldr	r2, [pc, #92]	; (800936c <TIM_OC1_SetConfig+0x11c>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d111      	bne.n	8009336 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	4313      	orrs	r3, r2
 800932a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	693a      	ldr	r2, [r7, #16]
 8009332:	4313      	orrs	r3, r2
 8009334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	693a      	ldr	r2, [r7, #16]
 800933a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	621a      	str	r2, [r3, #32]
}
 8009350:	bf00      	nop
 8009352:	371c      	adds	r7, #28
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	40012c00 	.word	0x40012c00
 8009360:	40013400 	.word	0x40013400
 8009364:	40014000 	.word	0x40014000
 8009368:	40014400 	.word	0x40014400
 800936c:	40014800 	.word	0x40014800

08009370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009370:	b480      	push	{r7}
 8009372:	b087      	sub	sp, #28
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	f023 0210 	bic.w	r2, r3, #16
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a1b      	ldr	r3, [r3, #32]
 800938a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800939e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	021b      	lsls	r3, r3, #8
 80093b2:	68fa      	ldr	r2, [r7, #12]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	f023 0320 	bic.w	r3, r3, #32
 80093be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	011b      	lsls	r3, r3, #4
 80093c6:	697a      	ldr	r2, [r7, #20]
 80093c8:	4313      	orrs	r3, r2
 80093ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	4a28      	ldr	r2, [pc, #160]	; (8009470 <TIM_OC2_SetConfig+0x100>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d003      	beq.n	80093dc <TIM_OC2_SetConfig+0x6c>
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a27      	ldr	r2, [pc, #156]	; (8009474 <TIM_OC2_SetConfig+0x104>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d10d      	bne.n	80093f8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	68db      	ldr	r3, [r3, #12]
 80093e8:	011b      	lsls	r3, r3, #4
 80093ea:	697a      	ldr	r2, [r7, #20]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a1d      	ldr	r2, [pc, #116]	; (8009470 <TIM_OC2_SetConfig+0x100>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d00f      	beq.n	8009420 <TIM_OC2_SetConfig+0xb0>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a1c      	ldr	r2, [pc, #112]	; (8009474 <TIM_OC2_SetConfig+0x104>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d00b      	beq.n	8009420 <TIM_OC2_SetConfig+0xb0>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a1b      	ldr	r2, [pc, #108]	; (8009478 <TIM_OC2_SetConfig+0x108>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d007      	beq.n	8009420 <TIM_OC2_SetConfig+0xb0>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a1a      	ldr	r2, [pc, #104]	; (800947c <TIM_OC2_SetConfig+0x10c>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d003      	beq.n	8009420 <TIM_OC2_SetConfig+0xb0>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a19      	ldr	r2, [pc, #100]	; (8009480 <TIM_OC2_SetConfig+0x110>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d113      	bne.n	8009448 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009426:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800942e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	695b      	ldr	r3, [r3, #20]
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	4313      	orrs	r3, r2
 800943a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	4313      	orrs	r3, r2
 8009446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	685a      	ldr	r2, [r3, #4]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	697a      	ldr	r2, [r7, #20]
 8009460:	621a      	str	r2, [r3, #32]
}
 8009462:	bf00      	nop
 8009464:	371c      	adds	r7, #28
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	40012c00 	.word	0x40012c00
 8009474:	40013400 	.word	0x40013400
 8009478:	40014000 	.word	0x40014000
 800947c:	40014400 	.word	0x40014400
 8009480:	40014800 	.word	0x40014800

08009484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009484:	b480      	push	{r7}
 8009486:	b087      	sub	sp, #28
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a1b      	ldr	r3, [r3, #32]
 800949e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f023 0303 	bic.w	r3, r3, #3
 80094be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	4313      	orrs	r3, r2
 80094c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80094d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	021b      	lsls	r3, r3, #8
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	4313      	orrs	r3, r2
 80094dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a27      	ldr	r2, [pc, #156]	; (8009580 <TIM_OC3_SetConfig+0xfc>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d003      	beq.n	80094ee <TIM_OC3_SetConfig+0x6a>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a26      	ldr	r2, [pc, #152]	; (8009584 <TIM_OC3_SetConfig+0x100>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d10d      	bne.n	800950a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	021b      	lsls	r3, r3, #8
 80094fc:	697a      	ldr	r2, [r7, #20]
 80094fe:	4313      	orrs	r3, r2
 8009500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a1c      	ldr	r2, [pc, #112]	; (8009580 <TIM_OC3_SetConfig+0xfc>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d00f      	beq.n	8009532 <TIM_OC3_SetConfig+0xae>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a1b      	ldr	r2, [pc, #108]	; (8009584 <TIM_OC3_SetConfig+0x100>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d00b      	beq.n	8009532 <TIM_OC3_SetConfig+0xae>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a1a      	ldr	r2, [pc, #104]	; (8009588 <TIM_OC3_SetConfig+0x104>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d007      	beq.n	8009532 <TIM_OC3_SetConfig+0xae>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a19      	ldr	r2, [pc, #100]	; (800958c <TIM_OC3_SetConfig+0x108>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d003      	beq.n	8009532 <TIM_OC3_SetConfig+0xae>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a18      	ldr	r2, [pc, #96]	; (8009590 <TIM_OC3_SetConfig+0x10c>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d113      	bne.n	800955a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009538:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009540:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	011b      	lsls	r3, r3, #4
 8009548:	693a      	ldr	r2, [r7, #16]
 800954a:	4313      	orrs	r3, r2
 800954c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	011b      	lsls	r3, r3, #4
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	4313      	orrs	r3, r2
 8009558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	693a      	ldr	r2, [r7, #16]
 800955e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	685a      	ldr	r2, [r3, #4]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	621a      	str	r2, [r3, #32]
}
 8009574:	bf00      	nop
 8009576:	371c      	adds	r7, #28
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	40012c00 	.word	0x40012c00
 8009584:	40013400 	.word	0x40013400
 8009588:	40014000 	.word	0x40014000
 800958c:	40014400 	.word	0x40014400
 8009590:	40014800 	.word	0x40014800

08009594 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009594:	b480      	push	{r7}
 8009596:	b087      	sub	sp, #28
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6a1b      	ldr	r3, [r3, #32]
 80095ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	685b      	ldr	r3, [r3, #4]
 80095b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	021b      	lsls	r3, r3, #8
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	4313      	orrs	r3, r2
 80095da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	031b      	lsls	r3, r3, #12
 80095ea:	693a      	ldr	r2, [r7, #16]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a18      	ldr	r2, [pc, #96]	; (8009654 <TIM_OC4_SetConfig+0xc0>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d00f      	beq.n	8009618 <TIM_OC4_SetConfig+0x84>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a17      	ldr	r2, [pc, #92]	; (8009658 <TIM_OC4_SetConfig+0xc4>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d00b      	beq.n	8009618 <TIM_OC4_SetConfig+0x84>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a16      	ldr	r2, [pc, #88]	; (800965c <TIM_OC4_SetConfig+0xc8>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d007      	beq.n	8009618 <TIM_OC4_SetConfig+0x84>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a15      	ldr	r2, [pc, #84]	; (8009660 <TIM_OC4_SetConfig+0xcc>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d003      	beq.n	8009618 <TIM_OC4_SetConfig+0x84>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a14      	ldr	r2, [pc, #80]	; (8009664 <TIM_OC4_SetConfig+0xd0>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d109      	bne.n	800962c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800961e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	019b      	lsls	r3, r3, #6
 8009626:	697a      	ldr	r2, [r7, #20]
 8009628:	4313      	orrs	r3, r2
 800962a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	685a      	ldr	r2, [r3, #4]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	693a      	ldr	r2, [r7, #16]
 8009644:	621a      	str	r2, [r3, #32]
}
 8009646:	bf00      	nop
 8009648:	371c      	adds	r7, #28
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	40012c00 	.word	0x40012c00
 8009658:	40013400 	.word	0x40013400
 800965c:	40014000 	.word	0x40014000
 8009660:	40014400 	.word	0x40014400
 8009664:	40014800 	.word	0x40014800

08009668 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009668:	b480      	push	{r7}
 800966a:	b087      	sub	sp, #28
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a1b      	ldr	r3, [r3, #32]
 8009682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800969a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80096ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	041b      	lsls	r3, r3, #16
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a17      	ldr	r2, [pc, #92]	; (800971c <TIM_OC5_SetConfig+0xb4>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d00f      	beq.n	80096e2 <TIM_OC5_SetConfig+0x7a>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a16      	ldr	r2, [pc, #88]	; (8009720 <TIM_OC5_SetConfig+0xb8>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d00b      	beq.n	80096e2 <TIM_OC5_SetConfig+0x7a>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4a15      	ldr	r2, [pc, #84]	; (8009724 <TIM_OC5_SetConfig+0xbc>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d007      	beq.n	80096e2 <TIM_OC5_SetConfig+0x7a>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	4a14      	ldr	r2, [pc, #80]	; (8009728 <TIM_OC5_SetConfig+0xc0>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d003      	beq.n	80096e2 <TIM_OC5_SetConfig+0x7a>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	4a13      	ldr	r2, [pc, #76]	; (800972c <TIM_OC5_SetConfig+0xc4>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d109      	bne.n	80096f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80096e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	021b      	lsls	r3, r3, #8
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	685a      	ldr	r2, [r3, #4]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	693a      	ldr	r2, [r7, #16]
 800970e:	621a      	str	r2, [r3, #32]
}
 8009710:	bf00      	nop
 8009712:	371c      	adds	r7, #28
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	40012c00 	.word	0x40012c00
 8009720:	40013400 	.word	0x40013400
 8009724:	40014000 	.word	0x40014000
 8009728:	40014400 	.word	0x40014400
 800972c:	40014800 	.word	0x40014800

08009730 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009730:	b480      	push	{r7}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6a1b      	ldr	r3, [r3, #32]
 800974a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800975e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	021b      	lsls	r3, r3, #8
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	4313      	orrs	r3, r2
 800976e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009776:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	051b      	lsls	r3, r3, #20
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	4313      	orrs	r3, r2
 8009782:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a18      	ldr	r2, [pc, #96]	; (80097e8 <TIM_OC6_SetConfig+0xb8>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d00f      	beq.n	80097ac <TIM_OC6_SetConfig+0x7c>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a17      	ldr	r2, [pc, #92]	; (80097ec <TIM_OC6_SetConfig+0xbc>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d00b      	beq.n	80097ac <TIM_OC6_SetConfig+0x7c>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a16      	ldr	r2, [pc, #88]	; (80097f0 <TIM_OC6_SetConfig+0xc0>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d007      	beq.n	80097ac <TIM_OC6_SetConfig+0x7c>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a15      	ldr	r2, [pc, #84]	; (80097f4 <TIM_OC6_SetConfig+0xc4>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d003      	beq.n	80097ac <TIM_OC6_SetConfig+0x7c>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a14      	ldr	r2, [pc, #80]	; (80097f8 <TIM_OC6_SetConfig+0xc8>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d109      	bne.n	80097c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	695b      	ldr	r3, [r3, #20]
 80097b8:	029b      	lsls	r3, r3, #10
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	4313      	orrs	r3, r2
 80097be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	68fa      	ldr	r2, [r7, #12]
 80097ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	685a      	ldr	r2, [r3, #4]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	621a      	str	r2, [r3, #32]
}
 80097da:	bf00      	nop
 80097dc:	371c      	adds	r7, #28
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	40012c00 	.word	0x40012c00
 80097ec:	40013400 	.word	0x40013400
 80097f0:	40014000 	.word	0x40014000
 80097f4:	40014400 	.word	0x40014400
 80097f8:	40014800 	.word	0x40014800

080097fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6a1b      	ldr	r3, [r3, #32]
 800980c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	f023 0201 	bic.w	r2, r3, #1
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	011b      	lsls	r3, r3, #4
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	4313      	orrs	r3, r2
 8009830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f023 030a 	bic.w	r3, r3, #10
 8009838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	4313      	orrs	r3, r2
 8009840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	621a      	str	r2, [r3, #32]
}
 800984e:	bf00      	nop
 8009850:	371c      	adds	r7, #28
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800985a:	b480      	push	{r7}
 800985c:	b087      	sub	sp, #28
 800985e:	af00      	add	r7, sp, #0
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6a1b      	ldr	r3, [r3, #32]
 800986a:	f023 0210 	bic.w	r2, r3, #16
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6a1b      	ldr	r3, [r3, #32]
 800987c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009884:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	031b      	lsls	r3, r3, #12
 800988a:	697a      	ldr	r2, [r7, #20]
 800988c:	4313      	orrs	r3, r2
 800988e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009896:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	011b      	lsls	r3, r3, #4
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	4313      	orrs	r3, r2
 80098a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	697a      	ldr	r2, [r7, #20]
 80098a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	621a      	str	r2, [r3, #32]
}
 80098ae:	bf00      	nop
 80098b0:	371c      	adds	r7, #28
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80098ba:	b480      	push	{r7}
 80098bc:	b085      	sub	sp, #20
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
 80098c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	f043 0307 	orr.w	r3, r3, #7
 80098dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	609a      	str	r2, [r3, #8]
}
 80098e4:	bf00      	nop
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b087      	sub	sp, #28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
 80098fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800990a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	021a      	lsls	r2, r3, #8
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	431a      	orrs	r2, r3
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	4313      	orrs	r3, r2
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	4313      	orrs	r3, r2
 800991c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	697a      	ldr	r2, [r7, #20]
 8009922:	609a      	str	r2, [r3, #8]
}
 8009924:	bf00      	nop
 8009926:	371c      	adds	r7, #28
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009930:	b480      	push	{r7}
 8009932:	b087      	sub	sp, #28
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	f003 031f 	and.w	r3, r3, #31
 8009942:	2201      	movs	r2, #1
 8009944:	fa02 f303 	lsl.w	r3, r2, r3
 8009948:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6a1a      	ldr	r2, [r3, #32]
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	43db      	mvns	r3, r3
 8009952:	401a      	ands	r2, r3
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6a1a      	ldr	r2, [r3, #32]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	f003 031f 	and.w	r3, r3, #31
 8009962:	6879      	ldr	r1, [r7, #4]
 8009964:	fa01 f303 	lsl.w	r3, r1, r3
 8009968:	431a      	orrs	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	621a      	str	r2, [r3, #32]
}
 800996e:	bf00      	nop
 8009970:	371c      	adds	r7, #28
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
	...

0800997c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800998c:	2b01      	cmp	r3, #1
 800998e:	d101      	bne.n	8009994 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009990:	2302      	movs	r3, #2
 8009992:	e068      	b.n	8009a66 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a2e      	ldr	r2, [pc, #184]	; (8009a74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d004      	beq.n	80099c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a2d      	ldr	r2, [pc, #180]	; (8009a78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d108      	bne.n	80099da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80099ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	4313      	orrs	r3, r2
 80099ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a1e      	ldr	r2, [pc, #120]	; (8009a74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d01d      	beq.n	8009a3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a06:	d018      	beq.n	8009a3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a1b      	ldr	r2, [pc, #108]	; (8009a7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d013      	beq.n	8009a3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a1a      	ldr	r2, [pc, #104]	; (8009a80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d00e      	beq.n	8009a3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a18      	ldr	r2, [pc, #96]	; (8009a84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d009      	beq.n	8009a3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a13      	ldr	r2, [pc, #76]	; (8009a78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d004      	beq.n	8009a3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a14      	ldr	r2, [pc, #80]	; (8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d10c      	bne.n	8009a54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68ba      	ldr	r2, [r7, #8]
 8009a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	40012c00 	.word	0x40012c00
 8009a78:	40013400 	.word	0x40013400
 8009a7c:	40000400 	.word	0x40000400
 8009a80:	40000800 	.word	0x40000800
 8009a84:	40000c00 	.word	0x40000c00
 8009a88:	40014000 	.word	0x40014000

08009a8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b083      	sub	sp, #12
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b083      	sub	sp, #12
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d101      	bne.n	8009ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e040      	b.n	8009b5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7f8 f8aa 	bl	8001c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2224      	movs	r2, #36	; 0x24
 8009af4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f022 0201 	bic.w	r2, r2, #1
 8009b04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fbfc 	bl	800a304 <UART_SetConfig>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d101      	bne.n	8009b16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	e022      	b.n	8009b5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d002      	beq.n	8009b24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fea8 	bl	800a874 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	685a      	ldr	r2, [r3, #4]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	689a      	ldr	r2, [r3, #8]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009b42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f042 0201 	orr.w	r2, r2, #1
 8009b52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 ff2f 	bl	800a9b8 <UART_CheckIdleState>
 8009b5a:	4603      	mov	r3, r0
}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d101      	bne.n	8009b76 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e02b      	b.n	8009bce <HAL_UART_DeInit+0x6a>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2224      	movs	r2, #36	; 0x24
 8009b7a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f022 0201 	bic.w	r2, r2, #1
 8009b8a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2200      	movs	r2, #0
 8009b92:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7f8 f8f7 	bl	8001d98 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_RESET;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b08a      	sub	sp, #40	; 0x28
 8009bda:	af02      	add	r7, sp, #8
 8009bdc:	60f8      	str	r0, [r7, #12]
 8009bde:	60b9      	str	r1, [r7, #8]
 8009be0:	603b      	str	r3, [r7, #0]
 8009be2:	4613      	mov	r3, r2
 8009be4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bea:	2b20      	cmp	r3, #32
 8009bec:	f040 8082 	bne.w	8009cf4 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d002      	beq.n	8009bfc <HAL_UART_Transmit+0x26>
 8009bf6:	88fb      	ldrh	r3, [r7, #6]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e07a      	b.n	8009cf6 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d101      	bne.n	8009c0e <HAL_UART_Transmit+0x38>
 8009c0a:	2302      	movs	r3, #2
 8009c0c:	e073      	b.n	8009cf6 <HAL_UART_Transmit+0x120>
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2221      	movs	r2, #33	; 0x21
 8009c22:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c24:	f7fa fefa 	bl	8004a1c <HAL_GetTick>
 8009c28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	88fa      	ldrh	r2, [r7, #6]
 8009c2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	88fa      	ldrh	r2, [r7, #6]
 8009c36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c42:	d108      	bne.n	8009c56 <HAL_UART_Transmit+0x80>
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d104      	bne.n	8009c56 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	61bb      	str	r3, [r7, #24]
 8009c54:	e003      	b.n	8009c5e <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009c66:	e02d      	b.n	8009cc4 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	9300      	str	r3, [sp, #0]
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	2180      	movs	r1, #128	; 0x80
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	f000 fee9 	bl	800aa4a <UART_WaitOnFlagUntilTimeout>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d001      	beq.n	8009c82 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	e039      	b.n	8009cf6 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d10b      	bne.n	8009ca0 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	881a      	ldrh	r2, [r3, #0]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c94:	b292      	uxth	r2, r2
 8009c96:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	3302      	adds	r3, #2
 8009c9c:	61bb      	str	r3, [r7, #24]
 8009c9e:	e008      	b.n	8009cb2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	781a      	ldrb	r2, [r3, #0]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	b292      	uxth	r2, r2
 8009caa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	b29a      	uxth	r2, r3
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1cb      	bne.n	8009c68 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2140      	movs	r1, #64	; 0x40
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f000 feb5 	bl	800aa4a <UART_WaitOnFlagUntilTimeout>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e005      	b.n	8009cf6 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2220      	movs	r2, #32
 8009cee:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	e000      	b.n	8009cf6 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009cf4:	2302      	movs	r3, #2
  }
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3720      	adds	r7, #32
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
	...

08009d00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b0ba      	sub	sp, #232	; 0xe8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	69db      	ldr	r3, [r3, #28]
 8009d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009d26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009d2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8009d2e:	4013      	ands	r3, r2
 8009d30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009d34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d115      	bne.n	8009d68 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d40:	f003 0320 	and.w	r3, r3, #32
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00f      	beq.n	8009d68 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d4c:	f003 0320 	and.w	r3, r3, #32
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d009      	beq.n	8009d68 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 82a6 	beq.w	800a2aa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	4798      	blx	r3
      }
      return;
 8009d66:	e2a0      	b.n	800a2aa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8009d68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 8117 	beq.w	8009fa0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009d72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d76:	f003 0301 	and.w	r3, r3, #1
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d106      	bne.n	8009d8c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009d7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009d82:	4b85      	ldr	r3, [pc, #532]	; (8009f98 <HAL_UART_IRQHandler+0x298>)
 8009d84:	4013      	ands	r3, r2
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f000 810a 	beq.w	8009fa0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d90:	f003 0301 	and.w	r3, r3, #1
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d011      	beq.n	8009dbc <HAL_UART_IRQHandler+0xbc>
 8009d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00b      	beq.n	8009dbc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	2201      	movs	r2, #1
 8009daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009db2:	f043 0201 	orr.w	r2, r3, #1
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dc0:	f003 0302 	and.w	r3, r3, #2
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d011      	beq.n	8009dec <HAL_UART_IRQHandler+0xec>
 8009dc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dcc:	f003 0301 	and.w	r3, r3, #1
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00b      	beq.n	8009dec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2202      	movs	r2, #2
 8009dda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009de2:	f043 0204 	orr.w	r2, r3, #4
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df0:	f003 0304 	and.w	r3, r3, #4
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d011      	beq.n	8009e1c <HAL_UART_IRQHandler+0x11c>
 8009df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d00b      	beq.n	8009e1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2204      	movs	r2, #4
 8009e0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e12:	f043 0202 	orr.w	r2, r3, #2
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e20:	f003 0308 	and.w	r3, r3, #8
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d017      	beq.n	8009e58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e2c:	f003 0320 	and.w	r3, r3, #32
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d105      	bne.n	8009e40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d00b      	beq.n	8009e58 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2208      	movs	r2, #8
 8009e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e4e:	f043 0208 	orr.w	r2, r3, #8
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d012      	beq.n	8009e8a <HAL_UART_IRQHandler+0x18a>
 8009e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00c      	beq.n	8009e8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e80:	f043 0220 	orr.w	r2, r3, #32
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f000 820c 	beq.w	800a2ae <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e9a:	f003 0320 	and.w	r3, r3, #32
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00d      	beq.n	8009ebe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ea6:	f003 0320 	and.w	r3, r3, #32
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d007      	beq.n	8009ebe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d003      	beq.n	8009ebe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ec4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed2:	2b40      	cmp	r3, #64	; 0x40
 8009ed4:	d005      	beq.n	8009ee2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009ed6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009eda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d04f      	beq.n	8009f82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 fe75 	bl	800abd2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ef2:	2b40      	cmp	r3, #64	; 0x40
 8009ef4:	d141      	bne.n	8009f7a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	3308      	adds	r3, #8
 8009efc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f04:	e853 3f00 	ldrex	r3, [r3]
 8009f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f14:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	3308      	adds	r3, #8
 8009f1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f22:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f32:	e841 2300 	strex	r3, r2, [r1]
 8009f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1d9      	bne.n	8009ef6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d013      	beq.n	8009f72 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f4e:	4a13      	ldr	r2, [pc, #76]	; (8009f9c <HAL_UART_IRQHandler+0x29c>)
 8009f50:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fb f951 	bl	80051fe <HAL_DMA_Abort_IT>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d017      	beq.n	8009f92 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f70:	e00f      	b.n	8009f92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 f9b0 	bl	800a2d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f78:	e00b      	b.n	8009f92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f9ac 	bl	800a2d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f80:	e007      	b.n	8009f92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f9a8 	bl	800a2d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009f90:	e18d      	b.n	800a2ae <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f92:	bf00      	nop
    return;
 8009f94:	e18b      	b.n	800a2ae <HAL_UART_IRQHandler+0x5ae>
 8009f96:	bf00      	nop
 8009f98:	04000120 	.word	0x04000120
 8009f9c:	0800ac99 	.word	0x0800ac99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	f040 8146 	bne.w	800a236 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fae:	f003 0310 	and.w	r3, r3, #16
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 813f 	beq.w	800a236 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fbc:	f003 0310 	and.w	r3, r3, #16
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 8138 	beq.w	800a236 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	2210      	movs	r2, #16
 8009fcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fd8:	2b40      	cmp	r3, #64	; 0x40
 8009fda:	f040 80b4 	bne.w	800a146 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009fea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f000 815f 	beq.w	800a2b2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009ffa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ffe:	429a      	cmp	r2, r3
 800a000:	f080 8157 	bcs.w	800a2b2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a00a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f003 0320 	and.w	r3, r3, #32
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	f040 8085 	bne.w	800a12a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a028:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a03c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	461a      	mov	r2, r3
 800a046:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a04a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a04e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a052:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a056:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a05a:	e841 2300 	strex	r3, r2, [r1]
 800a05e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1da      	bne.n	800a020 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	3308      	adds	r3, #8
 800a070:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a074:	e853 3f00 	ldrex	r3, [r3]
 800a078:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a07a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a07c:	f023 0301 	bic.w	r3, r3, #1
 800a080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	3308      	adds	r3, #8
 800a08a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a08e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a092:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a094:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a096:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a09a:	e841 2300 	strex	r3, r2, [r1]
 800a09e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a0a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1e1      	bne.n	800a06a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	3308      	adds	r3, #8
 800a0ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0b0:	e853 3f00 	ldrex	r3, [r3]
 800a0b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3308      	adds	r3, #8
 800a0c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a0ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a0cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a0d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a0d2:	e841 2300 	strex	r3, r2, [r1]
 800a0d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a0d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d1e3      	bne.n	800a0a6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2220      	movs	r2, #32
 800a0e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0f2:	e853 3f00 	ldrex	r3, [r3]
 800a0f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a0f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0fa:	f023 0310 	bic.w	r3, r3, #16
 800a0fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a10c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a10e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a110:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a112:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a114:	e841 2300 	strex	r3, r2, [r1]
 800a118:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a11a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d1e4      	bne.n	800a0ea <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a124:	4618      	mov	r0, r3
 800a126:	f7fb f82c 	bl	8005182 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a136:	b29b      	uxth	r3, r3
 800a138:	1ad3      	subs	r3, r2, r3
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	4619      	mov	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f8d4 	bl	800a2ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a144:	e0b5      	b.n	800a2b2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a152:	b29b      	uxth	r3, r3
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a160:	b29b      	uxth	r3, r3
 800a162:	2b00      	cmp	r3, #0
 800a164:	f000 80a7 	beq.w	800a2b6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800a168:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 80a2 	beq.w	800a2b6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	e853 3f00 	ldrex	r3, [r3]
 800a17e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a182:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a186:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	461a      	mov	r2, r3
 800a190:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a194:	647b      	str	r3, [r7, #68]	; 0x44
 800a196:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a198:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a19a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a19c:	e841 2300 	strex	r3, r2, [r1]
 800a1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1e4      	bne.n	800a172 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	3308      	adds	r3, #8
 800a1ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b2:	e853 3f00 	ldrex	r3, [r3]
 800a1b6:	623b      	str	r3, [r7, #32]
   return(result);
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	f023 0301 	bic.w	r3, r3, #1
 800a1be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3308      	adds	r3, #8
 800a1c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a1cc:	633a      	str	r2, [r7, #48]	; 0x30
 800a1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1d4:	e841 2300 	strex	r3, r2, [r1]
 800a1d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1e3      	bne.n	800a1a8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2220      	movs	r2, #32
 800a1e4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	e853 3f00 	ldrex	r3, [r3]
 800a1fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f023 0310 	bic.w	r3, r3, #16
 800a206:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	461a      	mov	r2, r3
 800a210:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a214:	61fb      	str	r3, [r7, #28]
 800a216:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a218:	69b9      	ldr	r1, [r7, #24]
 800a21a:	69fa      	ldr	r2, [r7, #28]
 800a21c:	e841 2300 	strex	r3, r2, [r1]
 800a220:	617b      	str	r3, [r7, #20]
   return(result);
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1e4      	bne.n	800a1f2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a228:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a22c:	4619      	mov	r1, r3
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f85c 	bl	800a2ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a234:	e03f      	b.n	800a2b6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a23a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00e      	beq.n	800a260 <HAL_UART_IRQHandler+0x560>
 800a242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d008      	beq.n	800a260 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a256:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 fd5d 	bl	800ad18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a25e:	e02d      	b.n	800a2bc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a260:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00e      	beq.n	800a28a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a26c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a274:	2b00      	cmp	r3, #0
 800a276:	d008      	beq.n	800a28a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d01c      	beq.n	800a2ba <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	4798      	blx	r3
    }
    return;
 800a288:	e017      	b.n	800a2ba <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a28a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a28e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a292:	2b00      	cmp	r3, #0
 800a294:	d012      	beq.n	800a2bc <HAL_UART_IRQHandler+0x5bc>
 800a296:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00c      	beq.n	800a2bc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fd0e 	bl	800acc4 <UART_EndTransmit_IT>
    return;
 800a2a8:	e008      	b.n	800a2bc <HAL_UART_IRQHandler+0x5bc>
      return;
 800a2aa:	bf00      	nop
 800a2ac:	e006      	b.n	800a2bc <HAL_UART_IRQHandler+0x5bc>
    return;
 800a2ae:	bf00      	nop
 800a2b0:	e004      	b.n	800a2bc <HAL_UART_IRQHandler+0x5bc>
      return;
 800a2b2:	bf00      	nop
 800a2b4:	e002      	b.n	800a2bc <HAL_UART_IRQHandler+0x5bc>
      return;
 800a2b6:	bf00      	nop
 800a2b8:	e000      	b.n	800a2bc <HAL_UART_IRQHandler+0x5bc>
    return;
 800a2ba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800a2bc:	37e8      	adds	r7, #232	; 0xe8
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop

0800a2c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a2cc:	bf00      	nop
 800a2ce:	370c      	adds	r7, #12
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d6:	4770      	bx	lr

0800a2d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	460b      	mov	r3, r1
 800a2f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a2f8:	bf00      	nop
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a308:	b08a      	sub	sp, #40	; 0x28
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a30e:	2300      	movs	r3, #0
 800a310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	689a      	ldr	r2, [r3, #8]
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	431a      	orrs	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	431a      	orrs	r2, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	69db      	ldr	r3, [r3, #28]
 800a328:	4313      	orrs	r3, r2
 800a32a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	4ba4      	ldr	r3, [pc, #656]	; (800a5c4 <UART_SetConfig+0x2c0>)
 800a334:	4013      	ands	r3, r2
 800a336:	68fa      	ldr	r2, [r7, #12]
 800a338:	6812      	ldr	r2, [r2, #0]
 800a33a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a33c:	430b      	orrs	r3, r1
 800a33e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	68da      	ldr	r2, [r3, #12]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	430a      	orrs	r2, r1
 800a354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	699b      	ldr	r3, [r3, #24]
 800a35a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a99      	ldr	r2, [pc, #612]	; (800a5c8 <UART_SetConfig+0x2c4>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d004      	beq.n	800a370 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a36c:	4313      	orrs	r3, r2
 800a36e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	689b      	ldr	r3, [r3, #8]
 800a376:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a380:	430a      	orrs	r2, r1
 800a382:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a90      	ldr	r2, [pc, #576]	; (800a5cc <UART_SetConfig+0x2c8>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d126      	bne.n	800a3dc <UART_SetConfig+0xd8>
 800a38e:	4b90      	ldr	r3, [pc, #576]	; (800a5d0 <UART_SetConfig+0x2cc>)
 800a390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a394:	f003 0303 	and.w	r3, r3, #3
 800a398:	2b03      	cmp	r3, #3
 800a39a:	d81b      	bhi.n	800a3d4 <UART_SetConfig+0xd0>
 800a39c:	a201      	add	r2, pc, #4	; (adr r2, 800a3a4 <UART_SetConfig+0xa0>)
 800a39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a2:	bf00      	nop
 800a3a4:	0800a3b5 	.word	0x0800a3b5
 800a3a8:	0800a3c5 	.word	0x0800a3c5
 800a3ac:	0800a3bd 	.word	0x0800a3bd
 800a3b0:	0800a3cd 	.word	0x0800a3cd
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3ba:	e116      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a3bc:	2302      	movs	r3, #2
 800a3be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3c2:	e112      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a3c4:	2304      	movs	r3, #4
 800a3c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3ca:	e10e      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a3cc:	2308      	movs	r3, #8
 800a3ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3d2:	e10a      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a3d4:	2310      	movs	r3, #16
 800a3d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a3da:	e106      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a7c      	ldr	r2, [pc, #496]	; (800a5d4 <UART_SetConfig+0x2d0>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d138      	bne.n	800a458 <UART_SetConfig+0x154>
 800a3e6:	4b7a      	ldr	r3, [pc, #488]	; (800a5d0 <UART_SetConfig+0x2cc>)
 800a3e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3ec:	f003 030c 	and.w	r3, r3, #12
 800a3f0:	2b0c      	cmp	r3, #12
 800a3f2:	d82d      	bhi.n	800a450 <UART_SetConfig+0x14c>
 800a3f4:	a201      	add	r2, pc, #4	; (adr r2, 800a3fc <UART_SetConfig+0xf8>)
 800a3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3fa:	bf00      	nop
 800a3fc:	0800a431 	.word	0x0800a431
 800a400:	0800a451 	.word	0x0800a451
 800a404:	0800a451 	.word	0x0800a451
 800a408:	0800a451 	.word	0x0800a451
 800a40c:	0800a441 	.word	0x0800a441
 800a410:	0800a451 	.word	0x0800a451
 800a414:	0800a451 	.word	0x0800a451
 800a418:	0800a451 	.word	0x0800a451
 800a41c:	0800a439 	.word	0x0800a439
 800a420:	0800a451 	.word	0x0800a451
 800a424:	0800a451 	.word	0x0800a451
 800a428:	0800a451 	.word	0x0800a451
 800a42c:	0800a449 	.word	0x0800a449
 800a430:	2300      	movs	r3, #0
 800a432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a436:	e0d8      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a438:	2302      	movs	r3, #2
 800a43a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a43e:	e0d4      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a440:	2304      	movs	r3, #4
 800a442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a446:	e0d0      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a448:	2308      	movs	r3, #8
 800a44a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a44e:	e0cc      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a450:	2310      	movs	r3, #16
 800a452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a456:	e0c8      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a5e      	ldr	r2, [pc, #376]	; (800a5d8 <UART_SetConfig+0x2d4>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d125      	bne.n	800a4ae <UART_SetConfig+0x1aa>
 800a462:	4b5b      	ldr	r3, [pc, #364]	; (800a5d0 <UART_SetConfig+0x2cc>)
 800a464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a468:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a46c:	2b30      	cmp	r3, #48	; 0x30
 800a46e:	d016      	beq.n	800a49e <UART_SetConfig+0x19a>
 800a470:	2b30      	cmp	r3, #48	; 0x30
 800a472:	d818      	bhi.n	800a4a6 <UART_SetConfig+0x1a2>
 800a474:	2b20      	cmp	r3, #32
 800a476:	d00a      	beq.n	800a48e <UART_SetConfig+0x18a>
 800a478:	2b20      	cmp	r3, #32
 800a47a:	d814      	bhi.n	800a4a6 <UART_SetConfig+0x1a2>
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d002      	beq.n	800a486 <UART_SetConfig+0x182>
 800a480:	2b10      	cmp	r3, #16
 800a482:	d008      	beq.n	800a496 <UART_SetConfig+0x192>
 800a484:	e00f      	b.n	800a4a6 <UART_SetConfig+0x1a2>
 800a486:	2300      	movs	r3, #0
 800a488:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a48c:	e0ad      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a48e:	2302      	movs	r3, #2
 800a490:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a494:	e0a9      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a496:	2304      	movs	r3, #4
 800a498:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a49c:	e0a5      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a49e:	2308      	movs	r3, #8
 800a4a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4a4:	e0a1      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a4a6:	2310      	movs	r3, #16
 800a4a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4ac:	e09d      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a4a      	ldr	r2, [pc, #296]	; (800a5dc <UART_SetConfig+0x2d8>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d125      	bne.n	800a504 <UART_SetConfig+0x200>
 800a4b8:	4b45      	ldr	r3, [pc, #276]	; (800a5d0 <UART_SetConfig+0x2cc>)
 800a4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a4c2:	2bc0      	cmp	r3, #192	; 0xc0
 800a4c4:	d016      	beq.n	800a4f4 <UART_SetConfig+0x1f0>
 800a4c6:	2bc0      	cmp	r3, #192	; 0xc0
 800a4c8:	d818      	bhi.n	800a4fc <UART_SetConfig+0x1f8>
 800a4ca:	2b80      	cmp	r3, #128	; 0x80
 800a4cc:	d00a      	beq.n	800a4e4 <UART_SetConfig+0x1e0>
 800a4ce:	2b80      	cmp	r3, #128	; 0x80
 800a4d0:	d814      	bhi.n	800a4fc <UART_SetConfig+0x1f8>
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d002      	beq.n	800a4dc <UART_SetConfig+0x1d8>
 800a4d6:	2b40      	cmp	r3, #64	; 0x40
 800a4d8:	d008      	beq.n	800a4ec <UART_SetConfig+0x1e8>
 800a4da:	e00f      	b.n	800a4fc <UART_SetConfig+0x1f8>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4e2:	e082      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a4e4:	2302      	movs	r3, #2
 800a4e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4ea:	e07e      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a4ec:	2304      	movs	r3, #4
 800a4ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4f2:	e07a      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a4f4:	2308      	movs	r3, #8
 800a4f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a4fa:	e076      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a4fc:	2310      	movs	r3, #16
 800a4fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a502:	e072      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a35      	ldr	r2, [pc, #212]	; (800a5e0 <UART_SetConfig+0x2dc>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d12a      	bne.n	800a564 <UART_SetConfig+0x260>
 800a50e:	4b30      	ldr	r3, [pc, #192]	; (800a5d0 <UART_SetConfig+0x2cc>)
 800a510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a518:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a51c:	d01a      	beq.n	800a554 <UART_SetConfig+0x250>
 800a51e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a522:	d81b      	bhi.n	800a55c <UART_SetConfig+0x258>
 800a524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a528:	d00c      	beq.n	800a544 <UART_SetConfig+0x240>
 800a52a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a52e:	d815      	bhi.n	800a55c <UART_SetConfig+0x258>
 800a530:	2b00      	cmp	r3, #0
 800a532:	d003      	beq.n	800a53c <UART_SetConfig+0x238>
 800a534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a538:	d008      	beq.n	800a54c <UART_SetConfig+0x248>
 800a53a:	e00f      	b.n	800a55c <UART_SetConfig+0x258>
 800a53c:	2300      	movs	r3, #0
 800a53e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a542:	e052      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a544:	2302      	movs	r3, #2
 800a546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a54a:	e04e      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a54c:	2304      	movs	r3, #4
 800a54e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a552:	e04a      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a554:	2308      	movs	r3, #8
 800a556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a55a:	e046      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a55c:	2310      	movs	r3, #16
 800a55e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a562:	e042      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a17      	ldr	r2, [pc, #92]	; (800a5c8 <UART_SetConfig+0x2c4>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d13a      	bne.n	800a5e4 <UART_SetConfig+0x2e0>
 800a56e:	4b18      	ldr	r3, [pc, #96]	; (800a5d0 <UART_SetConfig+0x2cc>)
 800a570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a574:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a578:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a57c:	d01a      	beq.n	800a5b4 <UART_SetConfig+0x2b0>
 800a57e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a582:	d81b      	bhi.n	800a5bc <UART_SetConfig+0x2b8>
 800a584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a588:	d00c      	beq.n	800a5a4 <UART_SetConfig+0x2a0>
 800a58a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a58e:	d815      	bhi.n	800a5bc <UART_SetConfig+0x2b8>
 800a590:	2b00      	cmp	r3, #0
 800a592:	d003      	beq.n	800a59c <UART_SetConfig+0x298>
 800a594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a598:	d008      	beq.n	800a5ac <UART_SetConfig+0x2a8>
 800a59a:	e00f      	b.n	800a5bc <UART_SetConfig+0x2b8>
 800a59c:	2300      	movs	r3, #0
 800a59e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5a2:	e022      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a5a4:	2302      	movs	r3, #2
 800a5a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5aa:	e01e      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a5ac:	2304      	movs	r3, #4
 800a5ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5b2:	e01a      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a5b4:	2308      	movs	r3, #8
 800a5b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5ba:	e016      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a5bc:	2310      	movs	r3, #16
 800a5be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a5c2:	e012      	b.n	800a5ea <UART_SetConfig+0x2e6>
 800a5c4:	efff69f3 	.word	0xefff69f3
 800a5c8:	40008000 	.word	0x40008000
 800a5cc:	40013800 	.word	0x40013800
 800a5d0:	40021000 	.word	0x40021000
 800a5d4:	40004400 	.word	0x40004400
 800a5d8:	40004800 	.word	0x40004800
 800a5dc:	40004c00 	.word	0x40004c00
 800a5e0:	40005000 	.word	0x40005000
 800a5e4:	2310      	movs	r3, #16
 800a5e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	4a9f      	ldr	r2, [pc, #636]	; (800a86c <UART_SetConfig+0x568>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d17a      	bne.n	800a6ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a5f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5f8:	2b08      	cmp	r3, #8
 800a5fa:	d824      	bhi.n	800a646 <UART_SetConfig+0x342>
 800a5fc:	a201      	add	r2, pc, #4	; (adr r2, 800a604 <UART_SetConfig+0x300>)
 800a5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a602:	bf00      	nop
 800a604:	0800a629 	.word	0x0800a629
 800a608:	0800a647 	.word	0x0800a647
 800a60c:	0800a631 	.word	0x0800a631
 800a610:	0800a647 	.word	0x0800a647
 800a614:	0800a637 	.word	0x0800a637
 800a618:	0800a647 	.word	0x0800a647
 800a61c:	0800a647 	.word	0x0800a647
 800a620:	0800a647 	.word	0x0800a647
 800a624:	0800a63f 	.word	0x0800a63f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a628:	f7fc fab6 	bl	8006b98 <HAL_RCC_GetPCLK1Freq>
 800a62c:	61f8      	str	r0, [r7, #28]
        break;
 800a62e:	e010      	b.n	800a652 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a630:	4b8f      	ldr	r3, [pc, #572]	; (800a870 <UART_SetConfig+0x56c>)
 800a632:	61fb      	str	r3, [r7, #28]
        break;
 800a634:	e00d      	b.n	800a652 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a636:	f7fc fa17 	bl	8006a68 <HAL_RCC_GetSysClockFreq>
 800a63a:	61f8      	str	r0, [r7, #28]
        break;
 800a63c:	e009      	b.n	800a652 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a63e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a642:	61fb      	str	r3, [r7, #28]
        break;
 800a644:	e005      	b.n	800a652 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800a646:	2300      	movs	r3, #0
 800a648:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a650:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	2b00      	cmp	r3, #0
 800a656:	f000 80fb 	beq.w	800a850 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	685a      	ldr	r2, [r3, #4]
 800a65e:	4613      	mov	r3, r2
 800a660:	005b      	lsls	r3, r3, #1
 800a662:	4413      	add	r3, r2
 800a664:	69fa      	ldr	r2, [r7, #28]
 800a666:	429a      	cmp	r2, r3
 800a668:	d305      	bcc.n	800a676 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a670:	69fa      	ldr	r2, [r7, #28]
 800a672:	429a      	cmp	r2, r3
 800a674:	d903      	bls.n	800a67e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a67c:	e0e8      	b.n	800a850 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	2200      	movs	r2, #0
 800a682:	461c      	mov	r4, r3
 800a684:	4615      	mov	r5, r2
 800a686:	f04f 0200 	mov.w	r2, #0
 800a68a:	f04f 0300 	mov.w	r3, #0
 800a68e:	022b      	lsls	r3, r5, #8
 800a690:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a694:	0222      	lsls	r2, r4, #8
 800a696:	68f9      	ldr	r1, [r7, #12]
 800a698:	6849      	ldr	r1, [r1, #4]
 800a69a:	0849      	lsrs	r1, r1, #1
 800a69c:	2000      	movs	r0, #0
 800a69e:	4688      	mov	r8, r1
 800a6a0:	4681      	mov	r9, r0
 800a6a2:	eb12 0a08 	adds.w	sl, r2, r8
 800a6a6:	eb43 0b09 	adc.w	fp, r3, r9
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	603b      	str	r3, [r7, #0]
 800a6b2:	607a      	str	r2, [r7, #4]
 800a6b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6b8:	4650      	mov	r0, sl
 800a6ba:	4659      	mov	r1, fp
 800a6bc:	f7f6 fae4 	bl	8000c88 <__aeabi_uldivmod>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6ce:	d308      	bcc.n	800a6e2 <UART_SetConfig+0x3de>
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6d6:	d204      	bcs.n	800a6e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	69ba      	ldr	r2, [r7, #24]
 800a6de:	60da      	str	r2, [r3, #12]
 800a6e0:	e0b6      	b.n	800a850 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a6e8:	e0b2      	b.n	800a850 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	69db      	ldr	r3, [r3, #28]
 800a6ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6f2:	d15e      	bne.n	800a7b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a6f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a6f8:	2b08      	cmp	r3, #8
 800a6fa:	d828      	bhi.n	800a74e <UART_SetConfig+0x44a>
 800a6fc:	a201      	add	r2, pc, #4	; (adr r2, 800a704 <UART_SetConfig+0x400>)
 800a6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a702:	bf00      	nop
 800a704:	0800a729 	.word	0x0800a729
 800a708:	0800a731 	.word	0x0800a731
 800a70c:	0800a739 	.word	0x0800a739
 800a710:	0800a74f 	.word	0x0800a74f
 800a714:	0800a73f 	.word	0x0800a73f
 800a718:	0800a74f 	.word	0x0800a74f
 800a71c:	0800a74f 	.word	0x0800a74f
 800a720:	0800a74f 	.word	0x0800a74f
 800a724:	0800a747 	.word	0x0800a747
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a728:	f7fc fa36 	bl	8006b98 <HAL_RCC_GetPCLK1Freq>
 800a72c:	61f8      	str	r0, [r7, #28]
        break;
 800a72e:	e014      	b.n	800a75a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a730:	f7fc fa48 	bl	8006bc4 <HAL_RCC_GetPCLK2Freq>
 800a734:	61f8      	str	r0, [r7, #28]
        break;
 800a736:	e010      	b.n	800a75a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a738:	4b4d      	ldr	r3, [pc, #308]	; (800a870 <UART_SetConfig+0x56c>)
 800a73a:	61fb      	str	r3, [r7, #28]
        break;
 800a73c:	e00d      	b.n	800a75a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a73e:	f7fc f993 	bl	8006a68 <HAL_RCC_GetSysClockFreq>
 800a742:	61f8      	str	r0, [r7, #28]
        break;
 800a744:	e009      	b.n	800a75a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a746:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a74a:	61fb      	str	r3, [r7, #28]
        break;
 800a74c:	e005      	b.n	800a75a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a74e:	2300      	movs	r3, #0
 800a750:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a758:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d077      	beq.n	800a850 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	005a      	lsls	r2, r3, #1
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	085b      	lsrs	r3, r3, #1
 800a76a:	441a      	add	r2, r3
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	fbb2 f3f3 	udiv	r3, r2, r3
 800a774:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	2b0f      	cmp	r3, #15
 800a77a:	d916      	bls.n	800a7aa <UART_SetConfig+0x4a6>
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a782:	d212      	bcs.n	800a7aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	b29b      	uxth	r3, r3
 800a788:	f023 030f 	bic.w	r3, r3, #15
 800a78c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a78e:	69bb      	ldr	r3, [r7, #24]
 800a790:	085b      	lsrs	r3, r3, #1
 800a792:	b29b      	uxth	r3, r3
 800a794:	f003 0307 	and.w	r3, r3, #7
 800a798:	b29a      	uxth	r2, r3
 800a79a:	8afb      	ldrh	r3, [r7, #22]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	8afa      	ldrh	r2, [r7, #22]
 800a7a6:	60da      	str	r2, [r3, #12]
 800a7a8:	e052      	b.n	800a850 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a7b0:	e04e      	b.n	800a850 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a7b6:	2b08      	cmp	r3, #8
 800a7b8:	d827      	bhi.n	800a80a <UART_SetConfig+0x506>
 800a7ba:	a201      	add	r2, pc, #4	; (adr r2, 800a7c0 <UART_SetConfig+0x4bc>)
 800a7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c0:	0800a7e5 	.word	0x0800a7e5
 800a7c4:	0800a7ed 	.word	0x0800a7ed
 800a7c8:	0800a7f5 	.word	0x0800a7f5
 800a7cc:	0800a80b 	.word	0x0800a80b
 800a7d0:	0800a7fb 	.word	0x0800a7fb
 800a7d4:	0800a80b 	.word	0x0800a80b
 800a7d8:	0800a80b 	.word	0x0800a80b
 800a7dc:	0800a80b 	.word	0x0800a80b
 800a7e0:	0800a803 	.word	0x0800a803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7e4:	f7fc f9d8 	bl	8006b98 <HAL_RCC_GetPCLK1Freq>
 800a7e8:	61f8      	str	r0, [r7, #28]
        break;
 800a7ea:	e014      	b.n	800a816 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7ec:	f7fc f9ea 	bl	8006bc4 <HAL_RCC_GetPCLK2Freq>
 800a7f0:	61f8      	str	r0, [r7, #28]
        break;
 800a7f2:	e010      	b.n	800a816 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7f4:	4b1e      	ldr	r3, [pc, #120]	; (800a870 <UART_SetConfig+0x56c>)
 800a7f6:	61fb      	str	r3, [r7, #28]
        break;
 800a7f8:	e00d      	b.n	800a816 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7fa:	f7fc f935 	bl	8006a68 <HAL_RCC_GetSysClockFreq>
 800a7fe:	61f8      	str	r0, [r7, #28]
        break;
 800a800:	e009      	b.n	800a816 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a806:	61fb      	str	r3, [r7, #28]
        break;
 800a808:	e005      	b.n	800a816 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a80a:	2300      	movs	r3, #0
 800a80c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a814:	bf00      	nop
    }

    if (pclk != 0U)
 800a816:	69fb      	ldr	r3, [r7, #28]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d019      	beq.n	800a850 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	085a      	lsrs	r2, r3, #1
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	441a      	add	r2, r3
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a82e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	2b0f      	cmp	r3, #15
 800a834:	d909      	bls.n	800a84a <UART_SetConfig+0x546>
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a83c:	d205      	bcs.n	800a84a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a83e:	69bb      	ldr	r3, [r7, #24]
 800a840:	b29a      	uxth	r2, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	60da      	str	r2, [r3, #12]
 800a848:	e002      	b.n	800a850 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2200      	movs	r2, #0
 800a85a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a85c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a860:	4618      	mov	r0, r3
 800a862:	3728      	adds	r7, #40	; 0x28
 800a864:	46bd      	mov	sp, r7
 800a866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a86a:	bf00      	nop
 800a86c:	40008000 	.word	0x40008000
 800a870:	00f42400 	.word	0x00f42400

0800a874 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a880:	f003 0301 	and.w	r3, r3, #1
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00a      	beq.n	800a89e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	430a      	orrs	r2, r1
 800a89c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a2:	f003 0302 	and.w	r3, r3, #2
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00a      	beq.n	800a8c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c4:	f003 0304 	and.w	r3, r3, #4
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00a      	beq.n	800a8e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	430a      	orrs	r2, r1
 800a8e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e6:	f003 0308 	and.w	r3, r3, #8
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00a      	beq.n	800a904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	430a      	orrs	r2, r1
 800a902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	f003 0310 	and.w	r3, r3, #16
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00a      	beq.n	800a926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	689b      	ldr	r3, [r3, #8]
 800a916:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	430a      	orrs	r2, r1
 800a924:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92a:	f003 0320 	and.w	r3, r3, #32
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d00a      	beq.n	800a948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	689b      	ldr	r3, [r3, #8]
 800a938:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	430a      	orrs	r2, r1
 800a946:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a950:	2b00      	cmp	r3, #0
 800a952:	d01a      	beq.n	800a98a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	685b      	ldr	r3, [r3, #4]
 800a95a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	430a      	orrs	r2, r1
 800a968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a972:	d10a      	bne.n	800a98a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	430a      	orrs	r2, r1
 800a988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a992:	2b00      	cmp	r3, #0
 800a994:	d00a      	beq.n	800a9ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	430a      	orrs	r2, r1
 800a9aa:	605a      	str	r2, [r3, #4]
  }
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b086      	sub	sp, #24
 800a9bc:	af02      	add	r7, sp, #8
 800a9be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a9c8:	f7fa f828 	bl	8004a1c <HAL_GetTick>
 800a9cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0308 	and.w	r3, r3, #8
 800a9d8:	2b08      	cmp	r3, #8
 800a9da:	d10e      	bne.n	800a9fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f000 f82d 	bl	800aa4a <UART_WaitOnFlagUntilTimeout>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d001      	beq.n	800a9fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e023      	b.n	800aa42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f003 0304 	and.w	r3, r3, #4
 800aa04:	2b04      	cmp	r3, #4
 800aa06:	d10e      	bne.n	800aa26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 f817 	bl	800aa4a <UART_WaitOnFlagUntilTimeout>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa22:	2303      	movs	r3, #3
 800aa24:	e00d      	b.n	800aa42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2220      	movs	r2, #32
 800aa2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2220      	movs	r2, #32
 800aa30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800aa40:	2300      	movs	r3, #0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b09c      	sub	sp, #112	; 0x70
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	60f8      	str	r0, [r7, #12]
 800aa52:	60b9      	str	r1, [r7, #8]
 800aa54:	603b      	str	r3, [r7, #0]
 800aa56:	4613      	mov	r3, r2
 800aa58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa5a:	e0a5      	b.n	800aba8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa62:	f000 80a1 	beq.w	800aba8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa66:	f7f9 ffd9 	bl	8004a1c <HAL_GetTick>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	1ad3      	subs	r3, r2, r3
 800aa70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d302      	bcc.n	800aa7c <UART_WaitOnFlagUntilTimeout+0x32>
 800aa76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d13e      	bne.n	800aafa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa84:	e853 3f00 	ldrex	r3, [r3]
 800aa88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aa8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa90:	667b      	str	r3, [r7, #100]	; 0x64
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	461a      	mov	r2, r3
 800aa98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa9c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aaa0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aaa2:	e841 2300 	strex	r3, r2, [r1]
 800aaa6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aaa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1e6      	bne.n	800aa7c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	3308      	adds	r3, #8
 800aab4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aab8:	e853 3f00 	ldrex	r3, [r3]
 800aabc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aac0:	f023 0301 	bic.w	r3, r3, #1
 800aac4:	663b      	str	r3, [r7, #96]	; 0x60
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	3308      	adds	r3, #8
 800aacc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aace:	64ba      	str	r2, [r7, #72]	; 0x48
 800aad0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aad6:	e841 2300 	strex	r3, r2, [r1]
 800aada:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aadc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1e5      	bne.n	800aaae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2220      	movs	r2, #32
 800aae6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2220      	movs	r2, #32
 800aaec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e067      	b.n	800abca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f003 0304 	and.w	r3, r3, #4
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d04f      	beq.n	800aba8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	69db      	ldr	r3, [r3, #28]
 800ab0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab16:	d147      	bne.n	800aba8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab20:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2a:	e853 3f00 	ldrex	r3, [r3]
 800ab2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab36:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab40:	637b      	str	r3, [r7, #52]	; 0x34
 800ab42:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab48:	e841 2300 	strex	r3, r2, [r1]
 800ab4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1e6      	bne.n	800ab22 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	3308      	adds	r3, #8
 800ab5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	e853 3f00 	ldrex	r3, [r3]
 800ab62:	613b      	str	r3, [r7, #16]
   return(result);
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	f023 0301 	bic.w	r3, r3, #1
 800ab6a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	3308      	adds	r3, #8
 800ab72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab74:	623a      	str	r2, [r7, #32]
 800ab76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab78:	69f9      	ldr	r1, [r7, #28]
 800ab7a:	6a3a      	ldr	r2, [r7, #32]
 800ab7c:	e841 2300 	strex	r3, r2, [r1]
 800ab80:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1e5      	bne.n	800ab54 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	2220      	movs	r2, #32
 800ab8c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2220      	movs	r2, #32
 800ab92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2220      	movs	r2, #32
 800ab98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800aba4:	2303      	movs	r3, #3
 800aba6:	e010      	b.n	800abca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	69da      	ldr	r2, [r3, #28]
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	4013      	ands	r3, r2
 800abb2:	68ba      	ldr	r2, [r7, #8]
 800abb4:	429a      	cmp	r2, r3
 800abb6:	bf0c      	ite	eq
 800abb8:	2301      	moveq	r3, #1
 800abba:	2300      	movne	r3, #0
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	461a      	mov	r2, r3
 800abc0:	79fb      	ldrb	r3, [r7, #7]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	f43f af4a 	beq.w	800aa5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3770      	adds	r7, #112	; 0x70
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800abd2:	b480      	push	{r7}
 800abd4:	b095      	sub	sp, #84	; 0x54
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe2:	e853 3f00 	ldrex	r3, [r3]
 800abe6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800abe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800abee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	461a      	mov	r2, r3
 800abf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abf8:	643b      	str	r3, [r7, #64]	; 0x40
 800abfa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac00:	e841 2300 	strex	r3, r2, [r1]
 800ac04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1e6      	bne.n	800abda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	3308      	adds	r3, #8
 800ac12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac14:	6a3b      	ldr	r3, [r7, #32]
 800ac16:	e853 3f00 	ldrex	r3, [r3]
 800ac1a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac1c:	69fb      	ldr	r3, [r7, #28]
 800ac1e:	f023 0301 	bic.w	r3, r3, #1
 800ac22:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	3308      	adds	r3, #8
 800ac2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac34:	e841 2300 	strex	r3, r2, [r1]
 800ac38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1e5      	bne.n	800ac0c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d118      	bne.n	800ac7a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	e853 3f00 	ldrex	r3, [r3]
 800ac54:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	f023 0310 	bic.w	r3, r3, #16
 800ac5c:	647b      	str	r3, [r7, #68]	; 0x44
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	461a      	mov	r2, r3
 800ac64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ac66:	61bb      	str	r3, [r7, #24]
 800ac68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6a:	6979      	ldr	r1, [r7, #20]
 800ac6c:	69ba      	ldr	r2, [r7, #24]
 800ac6e:	e841 2300 	strex	r3, r2, [r1]
 800ac72:	613b      	str	r3, [r7, #16]
   return(result);
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1e6      	bne.n	800ac48 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2220      	movs	r2, #32
 800ac7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ac8c:	bf00      	nop
 800ac8e:	3754      	adds	r7, #84	; 0x54
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f7ff fb0e 	bl	800a2d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acbc:	bf00      	nop
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	e853 3f00 	ldrex	r3, [r3]
 800acd8:	60bb      	str	r3, [r7, #8]
   return(result);
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ace0:	61fb      	str	r3, [r7, #28]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	461a      	mov	r2, r3
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	61bb      	str	r3, [r7, #24]
 800acec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acee:	6979      	ldr	r1, [r7, #20]
 800acf0:	69ba      	ldr	r2, [r7, #24]
 800acf2:	e841 2300 	strex	r3, r2, [r1]
 800acf6:	613b      	str	r3, [r7, #16]
   return(result);
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1e6      	bne.n	800accc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2220      	movs	r2, #32
 800ad02:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2200      	movs	r2, #0
 800ad08:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f7ff fada 	bl	800a2c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad10:	bf00      	nop
 800ad12:	3720      	adds	r7, #32
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <__errno>:
 800ad2c:	4b01      	ldr	r3, [pc, #4]	; (800ad34 <__errno+0x8>)
 800ad2e:	6818      	ldr	r0, [r3, #0]
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	20000030 	.word	0x20000030

0800ad38 <__libc_init_array>:
 800ad38:	b570      	push	{r4, r5, r6, lr}
 800ad3a:	4d0d      	ldr	r5, [pc, #52]	; (800ad70 <__libc_init_array+0x38>)
 800ad3c:	4c0d      	ldr	r4, [pc, #52]	; (800ad74 <__libc_init_array+0x3c>)
 800ad3e:	1b64      	subs	r4, r4, r5
 800ad40:	10a4      	asrs	r4, r4, #2
 800ad42:	2600      	movs	r6, #0
 800ad44:	42a6      	cmp	r6, r4
 800ad46:	d109      	bne.n	800ad5c <__libc_init_array+0x24>
 800ad48:	4d0b      	ldr	r5, [pc, #44]	; (800ad78 <__libc_init_array+0x40>)
 800ad4a:	4c0c      	ldr	r4, [pc, #48]	; (800ad7c <__libc_init_array+0x44>)
 800ad4c:	f004 fd42 	bl	800f7d4 <_init>
 800ad50:	1b64      	subs	r4, r4, r5
 800ad52:	10a4      	asrs	r4, r4, #2
 800ad54:	2600      	movs	r6, #0
 800ad56:	42a6      	cmp	r6, r4
 800ad58:	d105      	bne.n	800ad66 <__libc_init_array+0x2e>
 800ad5a:	bd70      	pop	{r4, r5, r6, pc}
 800ad5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad60:	4798      	blx	r3
 800ad62:	3601      	adds	r6, #1
 800ad64:	e7ee      	b.n	800ad44 <__libc_init_array+0xc>
 800ad66:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad6a:	4798      	blx	r3
 800ad6c:	3601      	adds	r6, #1
 800ad6e:	e7f2      	b.n	800ad56 <__libc_init_array+0x1e>
 800ad70:	0800fee0 	.word	0x0800fee0
 800ad74:	0800fee0 	.word	0x0800fee0
 800ad78:	0800fee0 	.word	0x0800fee0
 800ad7c:	0800fee4 	.word	0x0800fee4

0800ad80 <memset>:
 800ad80:	4402      	add	r2, r0
 800ad82:	4603      	mov	r3, r0
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d100      	bne.n	800ad8a <memset+0xa>
 800ad88:	4770      	bx	lr
 800ad8a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad8e:	e7f9      	b.n	800ad84 <memset+0x4>

0800ad90 <__cvt>:
 800ad90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad94:	ec55 4b10 	vmov	r4, r5, d0
 800ad98:	2d00      	cmp	r5, #0
 800ad9a:	460e      	mov	r6, r1
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	462b      	mov	r3, r5
 800ada0:	bfbb      	ittet	lt
 800ada2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ada6:	461d      	movlt	r5, r3
 800ada8:	2300      	movge	r3, #0
 800adaa:	232d      	movlt	r3, #45	; 0x2d
 800adac:	700b      	strb	r3, [r1, #0]
 800adae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800adb0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800adb4:	4691      	mov	r9, r2
 800adb6:	f023 0820 	bic.w	r8, r3, #32
 800adba:	bfbc      	itt	lt
 800adbc:	4622      	movlt	r2, r4
 800adbe:	4614      	movlt	r4, r2
 800adc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800adc4:	d005      	beq.n	800add2 <__cvt+0x42>
 800adc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800adca:	d100      	bne.n	800adce <__cvt+0x3e>
 800adcc:	3601      	adds	r6, #1
 800adce:	2102      	movs	r1, #2
 800add0:	e000      	b.n	800add4 <__cvt+0x44>
 800add2:	2103      	movs	r1, #3
 800add4:	ab03      	add	r3, sp, #12
 800add6:	9301      	str	r3, [sp, #4]
 800add8:	ab02      	add	r3, sp, #8
 800adda:	9300      	str	r3, [sp, #0]
 800addc:	ec45 4b10 	vmov	d0, r4, r5
 800ade0:	4653      	mov	r3, sl
 800ade2:	4632      	mov	r2, r6
 800ade4:	f001 ff40 	bl	800cc68 <_dtoa_r>
 800ade8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800adec:	4607      	mov	r7, r0
 800adee:	d102      	bne.n	800adf6 <__cvt+0x66>
 800adf0:	f019 0f01 	tst.w	r9, #1
 800adf4:	d022      	beq.n	800ae3c <__cvt+0xac>
 800adf6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800adfa:	eb07 0906 	add.w	r9, r7, r6
 800adfe:	d110      	bne.n	800ae22 <__cvt+0x92>
 800ae00:	783b      	ldrb	r3, [r7, #0]
 800ae02:	2b30      	cmp	r3, #48	; 0x30
 800ae04:	d10a      	bne.n	800ae1c <__cvt+0x8c>
 800ae06:	2200      	movs	r2, #0
 800ae08:	2300      	movs	r3, #0
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	f7f5 fe5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae12:	b918      	cbnz	r0, 800ae1c <__cvt+0x8c>
 800ae14:	f1c6 0601 	rsb	r6, r6, #1
 800ae18:	f8ca 6000 	str.w	r6, [sl]
 800ae1c:	f8da 3000 	ldr.w	r3, [sl]
 800ae20:	4499      	add	r9, r3
 800ae22:	2200      	movs	r2, #0
 800ae24:	2300      	movs	r3, #0
 800ae26:	4620      	mov	r0, r4
 800ae28:	4629      	mov	r1, r5
 800ae2a:	f7f5 fe4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae2e:	b108      	cbz	r0, 800ae34 <__cvt+0xa4>
 800ae30:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae34:	2230      	movs	r2, #48	; 0x30
 800ae36:	9b03      	ldr	r3, [sp, #12]
 800ae38:	454b      	cmp	r3, r9
 800ae3a:	d307      	bcc.n	800ae4c <__cvt+0xbc>
 800ae3c:	9b03      	ldr	r3, [sp, #12]
 800ae3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae40:	1bdb      	subs	r3, r3, r7
 800ae42:	4638      	mov	r0, r7
 800ae44:	6013      	str	r3, [r2, #0]
 800ae46:	b004      	add	sp, #16
 800ae48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae4c:	1c59      	adds	r1, r3, #1
 800ae4e:	9103      	str	r1, [sp, #12]
 800ae50:	701a      	strb	r2, [r3, #0]
 800ae52:	e7f0      	b.n	800ae36 <__cvt+0xa6>

0800ae54 <__exponent>:
 800ae54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae56:	4603      	mov	r3, r0
 800ae58:	2900      	cmp	r1, #0
 800ae5a:	bfb8      	it	lt
 800ae5c:	4249      	neglt	r1, r1
 800ae5e:	f803 2b02 	strb.w	r2, [r3], #2
 800ae62:	bfb4      	ite	lt
 800ae64:	222d      	movlt	r2, #45	; 0x2d
 800ae66:	222b      	movge	r2, #43	; 0x2b
 800ae68:	2909      	cmp	r1, #9
 800ae6a:	7042      	strb	r2, [r0, #1]
 800ae6c:	dd2a      	ble.n	800aec4 <__exponent+0x70>
 800ae6e:	f10d 0407 	add.w	r4, sp, #7
 800ae72:	46a4      	mov	ip, r4
 800ae74:	270a      	movs	r7, #10
 800ae76:	46a6      	mov	lr, r4
 800ae78:	460a      	mov	r2, r1
 800ae7a:	fb91 f6f7 	sdiv	r6, r1, r7
 800ae7e:	fb07 1516 	mls	r5, r7, r6, r1
 800ae82:	3530      	adds	r5, #48	; 0x30
 800ae84:	2a63      	cmp	r2, #99	; 0x63
 800ae86:	f104 34ff 	add.w	r4, r4, #4294967295
 800ae8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ae8e:	4631      	mov	r1, r6
 800ae90:	dcf1      	bgt.n	800ae76 <__exponent+0x22>
 800ae92:	3130      	adds	r1, #48	; 0x30
 800ae94:	f1ae 0502 	sub.w	r5, lr, #2
 800ae98:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ae9c:	1c44      	adds	r4, r0, #1
 800ae9e:	4629      	mov	r1, r5
 800aea0:	4561      	cmp	r1, ip
 800aea2:	d30a      	bcc.n	800aeba <__exponent+0x66>
 800aea4:	f10d 0209 	add.w	r2, sp, #9
 800aea8:	eba2 020e 	sub.w	r2, r2, lr
 800aeac:	4565      	cmp	r5, ip
 800aeae:	bf88      	it	hi
 800aeb0:	2200      	movhi	r2, #0
 800aeb2:	4413      	add	r3, r2
 800aeb4:	1a18      	subs	r0, r3, r0
 800aeb6:	b003      	add	sp, #12
 800aeb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aebe:	f804 2f01 	strb.w	r2, [r4, #1]!
 800aec2:	e7ed      	b.n	800aea0 <__exponent+0x4c>
 800aec4:	2330      	movs	r3, #48	; 0x30
 800aec6:	3130      	adds	r1, #48	; 0x30
 800aec8:	7083      	strb	r3, [r0, #2]
 800aeca:	70c1      	strb	r1, [r0, #3]
 800aecc:	1d03      	adds	r3, r0, #4
 800aece:	e7f1      	b.n	800aeb4 <__exponent+0x60>

0800aed0 <_printf_float>:
 800aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	ed2d 8b02 	vpush	{d8}
 800aed8:	b08d      	sub	sp, #52	; 0x34
 800aeda:	460c      	mov	r4, r1
 800aedc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aee0:	4616      	mov	r6, r2
 800aee2:	461f      	mov	r7, r3
 800aee4:	4605      	mov	r5, r0
 800aee6:	f003 f9e5 	bl	800e2b4 <_localeconv_r>
 800aeea:	f8d0 a000 	ldr.w	sl, [r0]
 800aeee:	4650      	mov	r0, sl
 800aef0:	f7f5 f96e 	bl	80001d0 <strlen>
 800aef4:	2300      	movs	r3, #0
 800aef6:	930a      	str	r3, [sp, #40]	; 0x28
 800aef8:	6823      	ldr	r3, [r4, #0]
 800aefa:	9305      	str	r3, [sp, #20]
 800aefc:	f8d8 3000 	ldr.w	r3, [r8]
 800af00:	f894 b018 	ldrb.w	fp, [r4, #24]
 800af04:	3307      	adds	r3, #7
 800af06:	f023 0307 	bic.w	r3, r3, #7
 800af0a:	f103 0208 	add.w	r2, r3, #8
 800af0e:	f8c8 2000 	str.w	r2, [r8]
 800af12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af1a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800af1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af22:	9307      	str	r3, [sp, #28]
 800af24:	f8cd 8018 	str.w	r8, [sp, #24]
 800af28:	ee08 0a10 	vmov	s16, r0
 800af2c:	4b9f      	ldr	r3, [pc, #636]	; (800b1ac <_printf_float+0x2dc>)
 800af2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af32:	f04f 32ff 	mov.w	r2, #4294967295
 800af36:	f7f5 fdf9 	bl	8000b2c <__aeabi_dcmpun>
 800af3a:	bb88      	cbnz	r0, 800afa0 <_printf_float+0xd0>
 800af3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af40:	4b9a      	ldr	r3, [pc, #616]	; (800b1ac <_printf_float+0x2dc>)
 800af42:	f04f 32ff 	mov.w	r2, #4294967295
 800af46:	f7f5 fdd3 	bl	8000af0 <__aeabi_dcmple>
 800af4a:	bb48      	cbnz	r0, 800afa0 <_printf_float+0xd0>
 800af4c:	2200      	movs	r2, #0
 800af4e:	2300      	movs	r3, #0
 800af50:	4640      	mov	r0, r8
 800af52:	4649      	mov	r1, r9
 800af54:	f7f5 fdc2 	bl	8000adc <__aeabi_dcmplt>
 800af58:	b110      	cbz	r0, 800af60 <_printf_float+0x90>
 800af5a:	232d      	movs	r3, #45	; 0x2d
 800af5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af60:	4b93      	ldr	r3, [pc, #588]	; (800b1b0 <_printf_float+0x2e0>)
 800af62:	4894      	ldr	r0, [pc, #592]	; (800b1b4 <_printf_float+0x2e4>)
 800af64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800af68:	bf94      	ite	ls
 800af6a:	4698      	movls	r8, r3
 800af6c:	4680      	movhi	r8, r0
 800af6e:	2303      	movs	r3, #3
 800af70:	6123      	str	r3, [r4, #16]
 800af72:	9b05      	ldr	r3, [sp, #20]
 800af74:	f023 0204 	bic.w	r2, r3, #4
 800af78:	6022      	str	r2, [r4, #0]
 800af7a:	f04f 0900 	mov.w	r9, #0
 800af7e:	9700      	str	r7, [sp, #0]
 800af80:	4633      	mov	r3, r6
 800af82:	aa0b      	add	r2, sp, #44	; 0x2c
 800af84:	4621      	mov	r1, r4
 800af86:	4628      	mov	r0, r5
 800af88:	f000 f9d8 	bl	800b33c <_printf_common>
 800af8c:	3001      	adds	r0, #1
 800af8e:	f040 8090 	bne.w	800b0b2 <_printf_float+0x1e2>
 800af92:	f04f 30ff 	mov.w	r0, #4294967295
 800af96:	b00d      	add	sp, #52	; 0x34
 800af98:	ecbd 8b02 	vpop	{d8}
 800af9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afa0:	4642      	mov	r2, r8
 800afa2:	464b      	mov	r3, r9
 800afa4:	4640      	mov	r0, r8
 800afa6:	4649      	mov	r1, r9
 800afa8:	f7f5 fdc0 	bl	8000b2c <__aeabi_dcmpun>
 800afac:	b140      	cbz	r0, 800afc0 <_printf_float+0xf0>
 800afae:	464b      	mov	r3, r9
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	bfbc      	itt	lt
 800afb4:	232d      	movlt	r3, #45	; 0x2d
 800afb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800afba:	487f      	ldr	r0, [pc, #508]	; (800b1b8 <_printf_float+0x2e8>)
 800afbc:	4b7f      	ldr	r3, [pc, #508]	; (800b1bc <_printf_float+0x2ec>)
 800afbe:	e7d1      	b.n	800af64 <_printf_float+0x94>
 800afc0:	6863      	ldr	r3, [r4, #4]
 800afc2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800afc6:	9206      	str	r2, [sp, #24]
 800afc8:	1c5a      	adds	r2, r3, #1
 800afca:	d13f      	bne.n	800b04c <_printf_float+0x17c>
 800afcc:	2306      	movs	r3, #6
 800afce:	6063      	str	r3, [r4, #4]
 800afd0:	9b05      	ldr	r3, [sp, #20]
 800afd2:	6861      	ldr	r1, [r4, #4]
 800afd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800afd8:	2300      	movs	r3, #0
 800afda:	9303      	str	r3, [sp, #12]
 800afdc:	ab0a      	add	r3, sp, #40	; 0x28
 800afde:	e9cd b301 	strd	fp, r3, [sp, #4]
 800afe2:	ab09      	add	r3, sp, #36	; 0x24
 800afe4:	ec49 8b10 	vmov	d0, r8, r9
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	6022      	str	r2, [r4, #0]
 800afec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aff0:	4628      	mov	r0, r5
 800aff2:	f7ff fecd 	bl	800ad90 <__cvt>
 800aff6:	9b06      	ldr	r3, [sp, #24]
 800aff8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800affa:	2b47      	cmp	r3, #71	; 0x47
 800affc:	4680      	mov	r8, r0
 800affe:	d108      	bne.n	800b012 <_printf_float+0x142>
 800b000:	1cc8      	adds	r0, r1, #3
 800b002:	db02      	blt.n	800b00a <_printf_float+0x13a>
 800b004:	6863      	ldr	r3, [r4, #4]
 800b006:	4299      	cmp	r1, r3
 800b008:	dd41      	ble.n	800b08e <_printf_float+0x1be>
 800b00a:	f1ab 0b02 	sub.w	fp, fp, #2
 800b00e:	fa5f fb8b 	uxtb.w	fp, fp
 800b012:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b016:	d820      	bhi.n	800b05a <_printf_float+0x18a>
 800b018:	3901      	subs	r1, #1
 800b01a:	465a      	mov	r2, fp
 800b01c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b020:	9109      	str	r1, [sp, #36]	; 0x24
 800b022:	f7ff ff17 	bl	800ae54 <__exponent>
 800b026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b028:	1813      	adds	r3, r2, r0
 800b02a:	2a01      	cmp	r2, #1
 800b02c:	4681      	mov	r9, r0
 800b02e:	6123      	str	r3, [r4, #16]
 800b030:	dc02      	bgt.n	800b038 <_printf_float+0x168>
 800b032:	6822      	ldr	r2, [r4, #0]
 800b034:	07d2      	lsls	r2, r2, #31
 800b036:	d501      	bpl.n	800b03c <_printf_float+0x16c>
 800b038:	3301      	adds	r3, #1
 800b03a:	6123      	str	r3, [r4, #16]
 800b03c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b040:	2b00      	cmp	r3, #0
 800b042:	d09c      	beq.n	800af7e <_printf_float+0xae>
 800b044:	232d      	movs	r3, #45	; 0x2d
 800b046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b04a:	e798      	b.n	800af7e <_printf_float+0xae>
 800b04c:	9a06      	ldr	r2, [sp, #24]
 800b04e:	2a47      	cmp	r2, #71	; 0x47
 800b050:	d1be      	bne.n	800afd0 <_printf_float+0x100>
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1bc      	bne.n	800afd0 <_printf_float+0x100>
 800b056:	2301      	movs	r3, #1
 800b058:	e7b9      	b.n	800afce <_printf_float+0xfe>
 800b05a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b05e:	d118      	bne.n	800b092 <_printf_float+0x1c2>
 800b060:	2900      	cmp	r1, #0
 800b062:	6863      	ldr	r3, [r4, #4]
 800b064:	dd0b      	ble.n	800b07e <_printf_float+0x1ae>
 800b066:	6121      	str	r1, [r4, #16]
 800b068:	b913      	cbnz	r3, 800b070 <_printf_float+0x1a0>
 800b06a:	6822      	ldr	r2, [r4, #0]
 800b06c:	07d0      	lsls	r0, r2, #31
 800b06e:	d502      	bpl.n	800b076 <_printf_float+0x1a6>
 800b070:	3301      	adds	r3, #1
 800b072:	440b      	add	r3, r1
 800b074:	6123      	str	r3, [r4, #16]
 800b076:	65a1      	str	r1, [r4, #88]	; 0x58
 800b078:	f04f 0900 	mov.w	r9, #0
 800b07c:	e7de      	b.n	800b03c <_printf_float+0x16c>
 800b07e:	b913      	cbnz	r3, 800b086 <_printf_float+0x1b6>
 800b080:	6822      	ldr	r2, [r4, #0]
 800b082:	07d2      	lsls	r2, r2, #31
 800b084:	d501      	bpl.n	800b08a <_printf_float+0x1ba>
 800b086:	3302      	adds	r3, #2
 800b088:	e7f4      	b.n	800b074 <_printf_float+0x1a4>
 800b08a:	2301      	movs	r3, #1
 800b08c:	e7f2      	b.n	800b074 <_printf_float+0x1a4>
 800b08e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b094:	4299      	cmp	r1, r3
 800b096:	db05      	blt.n	800b0a4 <_printf_float+0x1d4>
 800b098:	6823      	ldr	r3, [r4, #0]
 800b09a:	6121      	str	r1, [r4, #16]
 800b09c:	07d8      	lsls	r0, r3, #31
 800b09e:	d5ea      	bpl.n	800b076 <_printf_float+0x1a6>
 800b0a0:	1c4b      	adds	r3, r1, #1
 800b0a2:	e7e7      	b.n	800b074 <_printf_float+0x1a4>
 800b0a4:	2900      	cmp	r1, #0
 800b0a6:	bfd4      	ite	le
 800b0a8:	f1c1 0202 	rsble	r2, r1, #2
 800b0ac:	2201      	movgt	r2, #1
 800b0ae:	4413      	add	r3, r2
 800b0b0:	e7e0      	b.n	800b074 <_printf_float+0x1a4>
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	055a      	lsls	r2, r3, #21
 800b0b6:	d407      	bmi.n	800b0c8 <_printf_float+0x1f8>
 800b0b8:	6923      	ldr	r3, [r4, #16]
 800b0ba:	4642      	mov	r2, r8
 800b0bc:	4631      	mov	r1, r6
 800b0be:	4628      	mov	r0, r5
 800b0c0:	47b8      	blx	r7
 800b0c2:	3001      	adds	r0, #1
 800b0c4:	d12c      	bne.n	800b120 <_printf_float+0x250>
 800b0c6:	e764      	b.n	800af92 <_printf_float+0xc2>
 800b0c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b0cc:	f240 80e0 	bls.w	800b290 <_printf_float+0x3c0>
 800b0d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	f7f5 fcf6 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	d034      	beq.n	800b14a <_printf_float+0x27a>
 800b0e0:	4a37      	ldr	r2, [pc, #220]	; (800b1c0 <_printf_float+0x2f0>)
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	4631      	mov	r1, r6
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	47b8      	blx	r7
 800b0ea:	3001      	adds	r0, #1
 800b0ec:	f43f af51 	beq.w	800af92 <_printf_float+0xc2>
 800b0f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	db02      	blt.n	800b0fe <_printf_float+0x22e>
 800b0f8:	6823      	ldr	r3, [r4, #0]
 800b0fa:	07d8      	lsls	r0, r3, #31
 800b0fc:	d510      	bpl.n	800b120 <_printf_float+0x250>
 800b0fe:	ee18 3a10 	vmov	r3, s16
 800b102:	4652      	mov	r2, sl
 800b104:	4631      	mov	r1, r6
 800b106:	4628      	mov	r0, r5
 800b108:	47b8      	blx	r7
 800b10a:	3001      	adds	r0, #1
 800b10c:	f43f af41 	beq.w	800af92 <_printf_float+0xc2>
 800b110:	f04f 0800 	mov.w	r8, #0
 800b114:	f104 091a 	add.w	r9, r4, #26
 800b118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b11a:	3b01      	subs	r3, #1
 800b11c:	4543      	cmp	r3, r8
 800b11e:	dc09      	bgt.n	800b134 <_printf_float+0x264>
 800b120:	6823      	ldr	r3, [r4, #0]
 800b122:	079b      	lsls	r3, r3, #30
 800b124:	f100 8105 	bmi.w	800b332 <_printf_float+0x462>
 800b128:	68e0      	ldr	r0, [r4, #12]
 800b12a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b12c:	4298      	cmp	r0, r3
 800b12e:	bfb8      	it	lt
 800b130:	4618      	movlt	r0, r3
 800b132:	e730      	b.n	800af96 <_printf_float+0xc6>
 800b134:	2301      	movs	r3, #1
 800b136:	464a      	mov	r2, r9
 800b138:	4631      	mov	r1, r6
 800b13a:	4628      	mov	r0, r5
 800b13c:	47b8      	blx	r7
 800b13e:	3001      	adds	r0, #1
 800b140:	f43f af27 	beq.w	800af92 <_printf_float+0xc2>
 800b144:	f108 0801 	add.w	r8, r8, #1
 800b148:	e7e6      	b.n	800b118 <_printf_float+0x248>
 800b14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	dc39      	bgt.n	800b1c4 <_printf_float+0x2f4>
 800b150:	4a1b      	ldr	r2, [pc, #108]	; (800b1c0 <_printf_float+0x2f0>)
 800b152:	2301      	movs	r3, #1
 800b154:	4631      	mov	r1, r6
 800b156:	4628      	mov	r0, r5
 800b158:	47b8      	blx	r7
 800b15a:	3001      	adds	r0, #1
 800b15c:	f43f af19 	beq.w	800af92 <_printf_float+0xc2>
 800b160:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b164:	4313      	orrs	r3, r2
 800b166:	d102      	bne.n	800b16e <_printf_float+0x29e>
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	07d9      	lsls	r1, r3, #31
 800b16c:	d5d8      	bpl.n	800b120 <_printf_float+0x250>
 800b16e:	ee18 3a10 	vmov	r3, s16
 800b172:	4652      	mov	r2, sl
 800b174:	4631      	mov	r1, r6
 800b176:	4628      	mov	r0, r5
 800b178:	47b8      	blx	r7
 800b17a:	3001      	adds	r0, #1
 800b17c:	f43f af09 	beq.w	800af92 <_printf_float+0xc2>
 800b180:	f04f 0900 	mov.w	r9, #0
 800b184:	f104 0a1a 	add.w	sl, r4, #26
 800b188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b18a:	425b      	negs	r3, r3
 800b18c:	454b      	cmp	r3, r9
 800b18e:	dc01      	bgt.n	800b194 <_printf_float+0x2c4>
 800b190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b192:	e792      	b.n	800b0ba <_printf_float+0x1ea>
 800b194:	2301      	movs	r3, #1
 800b196:	4652      	mov	r2, sl
 800b198:	4631      	mov	r1, r6
 800b19a:	4628      	mov	r0, r5
 800b19c:	47b8      	blx	r7
 800b19e:	3001      	adds	r0, #1
 800b1a0:	f43f aef7 	beq.w	800af92 <_printf_float+0xc2>
 800b1a4:	f109 0901 	add.w	r9, r9, #1
 800b1a8:	e7ee      	b.n	800b188 <_printf_float+0x2b8>
 800b1aa:	bf00      	nop
 800b1ac:	7fefffff 	.word	0x7fefffff
 800b1b0:	0800f9dc 	.word	0x0800f9dc
 800b1b4:	0800f9e0 	.word	0x0800f9e0
 800b1b8:	0800f9e8 	.word	0x0800f9e8
 800b1bc:	0800f9e4 	.word	0x0800f9e4
 800b1c0:	0800f9ec 	.word	0x0800f9ec
 800b1c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	bfa8      	it	ge
 800b1cc:	461a      	movge	r2, r3
 800b1ce:	2a00      	cmp	r2, #0
 800b1d0:	4691      	mov	r9, r2
 800b1d2:	dc37      	bgt.n	800b244 <_printf_float+0x374>
 800b1d4:	f04f 0b00 	mov.w	fp, #0
 800b1d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1dc:	f104 021a 	add.w	r2, r4, #26
 800b1e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1e2:	9305      	str	r3, [sp, #20]
 800b1e4:	eba3 0309 	sub.w	r3, r3, r9
 800b1e8:	455b      	cmp	r3, fp
 800b1ea:	dc33      	bgt.n	800b254 <_printf_float+0x384>
 800b1ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	db3b      	blt.n	800b26c <_printf_float+0x39c>
 800b1f4:	6823      	ldr	r3, [r4, #0]
 800b1f6:	07da      	lsls	r2, r3, #31
 800b1f8:	d438      	bmi.n	800b26c <_printf_float+0x39c>
 800b1fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1fc:	9a05      	ldr	r2, [sp, #20]
 800b1fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b200:	1a9a      	subs	r2, r3, r2
 800b202:	eba3 0901 	sub.w	r9, r3, r1
 800b206:	4591      	cmp	r9, r2
 800b208:	bfa8      	it	ge
 800b20a:	4691      	movge	r9, r2
 800b20c:	f1b9 0f00 	cmp.w	r9, #0
 800b210:	dc35      	bgt.n	800b27e <_printf_float+0x3ae>
 800b212:	f04f 0800 	mov.w	r8, #0
 800b216:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b21a:	f104 0a1a 	add.w	sl, r4, #26
 800b21e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b222:	1a9b      	subs	r3, r3, r2
 800b224:	eba3 0309 	sub.w	r3, r3, r9
 800b228:	4543      	cmp	r3, r8
 800b22a:	f77f af79 	ble.w	800b120 <_printf_float+0x250>
 800b22e:	2301      	movs	r3, #1
 800b230:	4652      	mov	r2, sl
 800b232:	4631      	mov	r1, r6
 800b234:	4628      	mov	r0, r5
 800b236:	47b8      	blx	r7
 800b238:	3001      	adds	r0, #1
 800b23a:	f43f aeaa 	beq.w	800af92 <_printf_float+0xc2>
 800b23e:	f108 0801 	add.w	r8, r8, #1
 800b242:	e7ec      	b.n	800b21e <_printf_float+0x34e>
 800b244:	4613      	mov	r3, r2
 800b246:	4631      	mov	r1, r6
 800b248:	4642      	mov	r2, r8
 800b24a:	4628      	mov	r0, r5
 800b24c:	47b8      	blx	r7
 800b24e:	3001      	adds	r0, #1
 800b250:	d1c0      	bne.n	800b1d4 <_printf_float+0x304>
 800b252:	e69e      	b.n	800af92 <_printf_float+0xc2>
 800b254:	2301      	movs	r3, #1
 800b256:	4631      	mov	r1, r6
 800b258:	4628      	mov	r0, r5
 800b25a:	9205      	str	r2, [sp, #20]
 800b25c:	47b8      	blx	r7
 800b25e:	3001      	adds	r0, #1
 800b260:	f43f ae97 	beq.w	800af92 <_printf_float+0xc2>
 800b264:	9a05      	ldr	r2, [sp, #20]
 800b266:	f10b 0b01 	add.w	fp, fp, #1
 800b26a:	e7b9      	b.n	800b1e0 <_printf_float+0x310>
 800b26c:	ee18 3a10 	vmov	r3, s16
 800b270:	4652      	mov	r2, sl
 800b272:	4631      	mov	r1, r6
 800b274:	4628      	mov	r0, r5
 800b276:	47b8      	blx	r7
 800b278:	3001      	adds	r0, #1
 800b27a:	d1be      	bne.n	800b1fa <_printf_float+0x32a>
 800b27c:	e689      	b.n	800af92 <_printf_float+0xc2>
 800b27e:	9a05      	ldr	r2, [sp, #20]
 800b280:	464b      	mov	r3, r9
 800b282:	4442      	add	r2, r8
 800b284:	4631      	mov	r1, r6
 800b286:	4628      	mov	r0, r5
 800b288:	47b8      	blx	r7
 800b28a:	3001      	adds	r0, #1
 800b28c:	d1c1      	bne.n	800b212 <_printf_float+0x342>
 800b28e:	e680      	b.n	800af92 <_printf_float+0xc2>
 800b290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b292:	2a01      	cmp	r2, #1
 800b294:	dc01      	bgt.n	800b29a <_printf_float+0x3ca>
 800b296:	07db      	lsls	r3, r3, #31
 800b298:	d538      	bpl.n	800b30c <_printf_float+0x43c>
 800b29a:	2301      	movs	r3, #1
 800b29c:	4642      	mov	r2, r8
 800b29e:	4631      	mov	r1, r6
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	47b8      	blx	r7
 800b2a4:	3001      	adds	r0, #1
 800b2a6:	f43f ae74 	beq.w	800af92 <_printf_float+0xc2>
 800b2aa:	ee18 3a10 	vmov	r3, s16
 800b2ae:	4652      	mov	r2, sl
 800b2b0:	4631      	mov	r1, r6
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	47b8      	blx	r7
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	f43f ae6b 	beq.w	800af92 <_printf_float+0xc2>
 800b2bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	f7f5 fc00 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2c8:	b9d8      	cbnz	r0, 800b302 <_printf_float+0x432>
 800b2ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2cc:	f108 0201 	add.w	r2, r8, #1
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	47b8      	blx	r7
 800b2d8:	3001      	adds	r0, #1
 800b2da:	d10e      	bne.n	800b2fa <_printf_float+0x42a>
 800b2dc:	e659      	b.n	800af92 <_printf_float+0xc2>
 800b2de:	2301      	movs	r3, #1
 800b2e0:	4652      	mov	r2, sl
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	47b8      	blx	r7
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	f43f ae52 	beq.w	800af92 <_printf_float+0xc2>
 800b2ee:	f108 0801 	add.w	r8, r8, #1
 800b2f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2f4:	3b01      	subs	r3, #1
 800b2f6:	4543      	cmp	r3, r8
 800b2f8:	dcf1      	bgt.n	800b2de <_printf_float+0x40e>
 800b2fa:	464b      	mov	r3, r9
 800b2fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b300:	e6dc      	b.n	800b0bc <_printf_float+0x1ec>
 800b302:	f04f 0800 	mov.w	r8, #0
 800b306:	f104 0a1a 	add.w	sl, r4, #26
 800b30a:	e7f2      	b.n	800b2f2 <_printf_float+0x422>
 800b30c:	2301      	movs	r3, #1
 800b30e:	4642      	mov	r2, r8
 800b310:	e7df      	b.n	800b2d2 <_printf_float+0x402>
 800b312:	2301      	movs	r3, #1
 800b314:	464a      	mov	r2, r9
 800b316:	4631      	mov	r1, r6
 800b318:	4628      	mov	r0, r5
 800b31a:	47b8      	blx	r7
 800b31c:	3001      	adds	r0, #1
 800b31e:	f43f ae38 	beq.w	800af92 <_printf_float+0xc2>
 800b322:	f108 0801 	add.w	r8, r8, #1
 800b326:	68e3      	ldr	r3, [r4, #12]
 800b328:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b32a:	1a5b      	subs	r3, r3, r1
 800b32c:	4543      	cmp	r3, r8
 800b32e:	dcf0      	bgt.n	800b312 <_printf_float+0x442>
 800b330:	e6fa      	b.n	800b128 <_printf_float+0x258>
 800b332:	f04f 0800 	mov.w	r8, #0
 800b336:	f104 0919 	add.w	r9, r4, #25
 800b33a:	e7f4      	b.n	800b326 <_printf_float+0x456>

0800b33c <_printf_common>:
 800b33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b340:	4616      	mov	r6, r2
 800b342:	4699      	mov	r9, r3
 800b344:	688a      	ldr	r2, [r1, #8]
 800b346:	690b      	ldr	r3, [r1, #16]
 800b348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b34c:	4293      	cmp	r3, r2
 800b34e:	bfb8      	it	lt
 800b350:	4613      	movlt	r3, r2
 800b352:	6033      	str	r3, [r6, #0]
 800b354:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b358:	4607      	mov	r7, r0
 800b35a:	460c      	mov	r4, r1
 800b35c:	b10a      	cbz	r2, 800b362 <_printf_common+0x26>
 800b35e:	3301      	adds	r3, #1
 800b360:	6033      	str	r3, [r6, #0]
 800b362:	6823      	ldr	r3, [r4, #0]
 800b364:	0699      	lsls	r1, r3, #26
 800b366:	bf42      	ittt	mi
 800b368:	6833      	ldrmi	r3, [r6, #0]
 800b36a:	3302      	addmi	r3, #2
 800b36c:	6033      	strmi	r3, [r6, #0]
 800b36e:	6825      	ldr	r5, [r4, #0]
 800b370:	f015 0506 	ands.w	r5, r5, #6
 800b374:	d106      	bne.n	800b384 <_printf_common+0x48>
 800b376:	f104 0a19 	add.w	sl, r4, #25
 800b37a:	68e3      	ldr	r3, [r4, #12]
 800b37c:	6832      	ldr	r2, [r6, #0]
 800b37e:	1a9b      	subs	r3, r3, r2
 800b380:	42ab      	cmp	r3, r5
 800b382:	dc26      	bgt.n	800b3d2 <_printf_common+0x96>
 800b384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b388:	1e13      	subs	r3, r2, #0
 800b38a:	6822      	ldr	r2, [r4, #0]
 800b38c:	bf18      	it	ne
 800b38e:	2301      	movne	r3, #1
 800b390:	0692      	lsls	r2, r2, #26
 800b392:	d42b      	bmi.n	800b3ec <_printf_common+0xb0>
 800b394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b398:	4649      	mov	r1, r9
 800b39a:	4638      	mov	r0, r7
 800b39c:	47c0      	blx	r8
 800b39e:	3001      	adds	r0, #1
 800b3a0:	d01e      	beq.n	800b3e0 <_printf_common+0xa4>
 800b3a2:	6823      	ldr	r3, [r4, #0]
 800b3a4:	68e5      	ldr	r5, [r4, #12]
 800b3a6:	6832      	ldr	r2, [r6, #0]
 800b3a8:	f003 0306 	and.w	r3, r3, #6
 800b3ac:	2b04      	cmp	r3, #4
 800b3ae:	bf08      	it	eq
 800b3b0:	1aad      	subeq	r5, r5, r2
 800b3b2:	68a3      	ldr	r3, [r4, #8]
 800b3b4:	6922      	ldr	r2, [r4, #16]
 800b3b6:	bf0c      	ite	eq
 800b3b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3bc:	2500      	movne	r5, #0
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	bfc4      	itt	gt
 800b3c2:	1a9b      	subgt	r3, r3, r2
 800b3c4:	18ed      	addgt	r5, r5, r3
 800b3c6:	2600      	movs	r6, #0
 800b3c8:	341a      	adds	r4, #26
 800b3ca:	42b5      	cmp	r5, r6
 800b3cc:	d11a      	bne.n	800b404 <_printf_common+0xc8>
 800b3ce:	2000      	movs	r0, #0
 800b3d0:	e008      	b.n	800b3e4 <_printf_common+0xa8>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	4652      	mov	r2, sl
 800b3d6:	4649      	mov	r1, r9
 800b3d8:	4638      	mov	r0, r7
 800b3da:	47c0      	blx	r8
 800b3dc:	3001      	adds	r0, #1
 800b3de:	d103      	bne.n	800b3e8 <_printf_common+0xac>
 800b3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3e8:	3501      	adds	r5, #1
 800b3ea:	e7c6      	b.n	800b37a <_printf_common+0x3e>
 800b3ec:	18e1      	adds	r1, r4, r3
 800b3ee:	1c5a      	adds	r2, r3, #1
 800b3f0:	2030      	movs	r0, #48	; 0x30
 800b3f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3f6:	4422      	add	r2, r4
 800b3f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b400:	3302      	adds	r3, #2
 800b402:	e7c7      	b.n	800b394 <_printf_common+0x58>
 800b404:	2301      	movs	r3, #1
 800b406:	4622      	mov	r2, r4
 800b408:	4649      	mov	r1, r9
 800b40a:	4638      	mov	r0, r7
 800b40c:	47c0      	blx	r8
 800b40e:	3001      	adds	r0, #1
 800b410:	d0e6      	beq.n	800b3e0 <_printf_common+0xa4>
 800b412:	3601      	adds	r6, #1
 800b414:	e7d9      	b.n	800b3ca <_printf_common+0x8e>
	...

0800b418 <_printf_i>:
 800b418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b41c:	7e0f      	ldrb	r7, [r1, #24]
 800b41e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b420:	2f78      	cmp	r7, #120	; 0x78
 800b422:	4691      	mov	r9, r2
 800b424:	4680      	mov	r8, r0
 800b426:	460c      	mov	r4, r1
 800b428:	469a      	mov	sl, r3
 800b42a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b42e:	d807      	bhi.n	800b440 <_printf_i+0x28>
 800b430:	2f62      	cmp	r7, #98	; 0x62
 800b432:	d80a      	bhi.n	800b44a <_printf_i+0x32>
 800b434:	2f00      	cmp	r7, #0
 800b436:	f000 80d8 	beq.w	800b5ea <_printf_i+0x1d2>
 800b43a:	2f58      	cmp	r7, #88	; 0x58
 800b43c:	f000 80a3 	beq.w	800b586 <_printf_i+0x16e>
 800b440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b444:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b448:	e03a      	b.n	800b4c0 <_printf_i+0xa8>
 800b44a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b44e:	2b15      	cmp	r3, #21
 800b450:	d8f6      	bhi.n	800b440 <_printf_i+0x28>
 800b452:	a101      	add	r1, pc, #4	; (adr r1, 800b458 <_printf_i+0x40>)
 800b454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b458:	0800b4b1 	.word	0x0800b4b1
 800b45c:	0800b4c5 	.word	0x0800b4c5
 800b460:	0800b441 	.word	0x0800b441
 800b464:	0800b441 	.word	0x0800b441
 800b468:	0800b441 	.word	0x0800b441
 800b46c:	0800b441 	.word	0x0800b441
 800b470:	0800b4c5 	.word	0x0800b4c5
 800b474:	0800b441 	.word	0x0800b441
 800b478:	0800b441 	.word	0x0800b441
 800b47c:	0800b441 	.word	0x0800b441
 800b480:	0800b441 	.word	0x0800b441
 800b484:	0800b5d1 	.word	0x0800b5d1
 800b488:	0800b4f5 	.word	0x0800b4f5
 800b48c:	0800b5b3 	.word	0x0800b5b3
 800b490:	0800b441 	.word	0x0800b441
 800b494:	0800b441 	.word	0x0800b441
 800b498:	0800b5f3 	.word	0x0800b5f3
 800b49c:	0800b441 	.word	0x0800b441
 800b4a0:	0800b4f5 	.word	0x0800b4f5
 800b4a4:	0800b441 	.word	0x0800b441
 800b4a8:	0800b441 	.word	0x0800b441
 800b4ac:	0800b5bb 	.word	0x0800b5bb
 800b4b0:	682b      	ldr	r3, [r5, #0]
 800b4b2:	1d1a      	adds	r2, r3, #4
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	602a      	str	r2, [r5, #0]
 800b4b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4c0:	2301      	movs	r3, #1
 800b4c2:	e0a3      	b.n	800b60c <_printf_i+0x1f4>
 800b4c4:	6820      	ldr	r0, [r4, #0]
 800b4c6:	6829      	ldr	r1, [r5, #0]
 800b4c8:	0606      	lsls	r6, r0, #24
 800b4ca:	f101 0304 	add.w	r3, r1, #4
 800b4ce:	d50a      	bpl.n	800b4e6 <_printf_i+0xce>
 800b4d0:	680e      	ldr	r6, [r1, #0]
 800b4d2:	602b      	str	r3, [r5, #0]
 800b4d4:	2e00      	cmp	r6, #0
 800b4d6:	da03      	bge.n	800b4e0 <_printf_i+0xc8>
 800b4d8:	232d      	movs	r3, #45	; 0x2d
 800b4da:	4276      	negs	r6, r6
 800b4dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4e0:	485e      	ldr	r0, [pc, #376]	; (800b65c <_printf_i+0x244>)
 800b4e2:	230a      	movs	r3, #10
 800b4e4:	e019      	b.n	800b51a <_printf_i+0x102>
 800b4e6:	680e      	ldr	r6, [r1, #0]
 800b4e8:	602b      	str	r3, [r5, #0]
 800b4ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b4ee:	bf18      	it	ne
 800b4f0:	b236      	sxthne	r6, r6
 800b4f2:	e7ef      	b.n	800b4d4 <_printf_i+0xbc>
 800b4f4:	682b      	ldr	r3, [r5, #0]
 800b4f6:	6820      	ldr	r0, [r4, #0]
 800b4f8:	1d19      	adds	r1, r3, #4
 800b4fa:	6029      	str	r1, [r5, #0]
 800b4fc:	0601      	lsls	r1, r0, #24
 800b4fe:	d501      	bpl.n	800b504 <_printf_i+0xec>
 800b500:	681e      	ldr	r6, [r3, #0]
 800b502:	e002      	b.n	800b50a <_printf_i+0xf2>
 800b504:	0646      	lsls	r6, r0, #25
 800b506:	d5fb      	bpl.n	800b500 <_printf_i+0xe8>
 800b508:	881e      	ldrh	r6, [r3, #0]
 800b50a:	4854      	ldr	r0, [pc, #336]	; (800b65c <_printf_i+0x244>)
 800b50c:	2f6f      	cmp	r7, #111	; 0x6f
 800b50e:	bf0c      	ite	eq
 800b510:	2308      	moveq	r3, #8
 800b512:	230a      	movne	r3, #10
 800b514:	2100      	movs	r1, #0
 800b516:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b51a:	6865      	ldr	r5, [r4, #4]
 800b51c:	60a5      	str	r5, [r4, #8]
 800b51e:	2d00      	cmp	r5, #0
 800b520:	bfa2      	ittt	ge
 800b522:	6821      	ldrge	r1, [r4, #0]
 800b524:	f021 0104 	bicge.w	r1, r1, #4
 800b528:	6021      	strge	r1, [r4, #0]
 800b52a:	b90e      	cbnz	r6, 800b530 <_printf_i+0x118>
 800b52c:	2d00      	cmp	r5, #0
 800b52e:	d04d      	beq.n	800b5cc <_printf_i+0x1b4>
 800b530:	4615      	mov	r5, r2
 800b532:	fbb6 f1f3 	udiv	r1, r6, r3
 800b536:	fb03 6711 	mls	r7, r3, r1, r6
 800b53a:	5dc7      	ldrb	r7, [r0, r7]
 800b53c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b540:	4637      	mov	r7, r6
 800b542:	42bb      	cmp	r3, r7
 800b544:	460e      	mov	r6, r1
 800b546:	d9f4      	bls.n	800b532 <_printf_i+0x11a>
 800b548:	2b08      	cmp	r3, #8
 800b54a:	d10b      	bne.n	800b564 <_printf_i+0x14c>
 800b54c:	6823      	ldr	r3, [r4, #0]
 800b54e:	07de      	lsls	r6, r3, #31
 800b550:	d508      	bpl.n	800b564 <_printf_i+0x14c>
 800b552:	6923      	ldr	r3, [r4, #16]
 800b554:	6861      	ldr	r1, [r4, #4]
 800b556:	4299      	cmp	r1, r3
 800b558:	bfde      	ittt	le
 800b55a:	2330      	movle	r3, #48	; 0x30
 800b55c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b560:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b564:	1b52      	subs	r2, r2, r5
 800b566:	6122      	str	r2, [r4, #16]
 800b568:	f8cd a000 	str.w	sl, [sp]
 800b56c:	464b      	mov	r3, r9
 800b56e:	aa03      	add	r2, sp, #12
 800b570:	4621      	mov	r1, r4
 800b572:	4640      	mov	r0, r8
 800b574:	f7ff fee2 	bl	800b33c <_printf_common>
 800b578:	3001      	adds	r0, #1
 800b57a:	d14c      	bne.n	800b616 <_printf_i+0x1fe>
 800b57c:	f04f 30ff 	mov.w	r0, #4294967295
 800b580:	b004      	add	sp, #16
 800b582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b586:	4835      	ldr	r0, [pc, #212]	; (800b65c <_printf_i+0x244>)
 800b588:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b58c:	6829      	ldr	r1, [r5, #0]
 800b58e:	6823      	ldr	r3, [r4, #0]
 800b590:	f851 6b04 	ldr.w	r6, [r1], #4
 800b594:	6029      	str	r1, [r5, #0]
 800b596:	061d      	lsls	r5, r3, #24
 800b598:	d514      	bpl.n	800b5c4 <_printf_i+0x1ac>
 800b59a:	07df      	lsls	r7, r3, #31
 800b59c:	bf44      	itt	mi
 800b59e:	f043 0320 	orrmi.w	r3, r3, #32
 800b5a2:	6023      	strmi	r3, [r4, #0]
 800b5a4:	b91e      	cbnz	r6, 800b5ae <_printf_i+0x196>
 800b5a6:	6823      	ldr	r3, [r4, #0]
 800b5a8:	f023 0320 	bic.w	r3, r3, #32
 800b5ac:	6023      	str	r3, [r4, #0]
 800b5ae:	2310      	movs	r3, #16
 800b5b0:	e7b0      	b.n	800b514 <_printf_i+0xfc>
 800b5b2:	6823      	ldr	r3, [r4, #0]
 800b5b4:	f043 0320 	orr.w	r3, r3, #32
 800b5b8:	6023      	str	r3, [r4, #0]
 800b5ba:	2378      	movs	r3, #120	; 0x78
 800b5bc:	4828      	ldr	r0, [pc, #160]	; (800b660 <_printf_i+0x248>)
 800b5be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5c2:	e7e3      	b.n	800b58c <_printf_i+0x174>
 800b5c4:	0659      	lsls	r1, r3, #25
 800b5c6:	bf48      	it	mi
 800b5c8:	b2b6      	uxthmi	r6, r6
 800b5ca:	e7e6      	b.n	800b59a <_printf_i+0x182>
 800b5cc:	4615      	mov	r5, r2
 800b5ce:	e7bb      	b.n	800b548 <_printf_i+0x130>
 800b5d0:	682b      	ldr	r3, [r5, #0]
 800b5d2:	6826      	ldr	r6, [r4, #0]
 800b5d4:	6961      	ldr	r1, [r4, #20]
 800b5d6:	1d18      	adds	r0, r3, #4
 800b5d8:	6028      	str	r0, [r5, #0]
 800b5da:	0635      	lsls	r5, r6, #24
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	d501      	bpl.n	800b5e4 <_printf_i+0x1cc>
 800b5e0:	6019      	str	r1, [r3, #0]
 800b5e2:	e002      	b.n	800b5ea <_printf_i+0x1d2>
 800b5e4:	0670      	lsls	r0, r6, #25
 800b5e6:	d5fb      	bpl.n	800b5e0 <_printf_i+0x1c8>
 800b5e8:	8019      	strh	r1, [r3, #0]
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	6123      	str	r3, [r4, #16]
 800b5ee:	4615      	mov	r5, r2
 800b5f0:	e7ba      	b.n	800b568 <_printf_i+0x150>
 800b5f2:	682b      	ldr	r3, [r5, #0]
 800b5f4:	1d1a      	adds	r2, r3, #4
 800b5f6:	602a      	str	r2, [r5, #0]
 800b5f8:	681d      	ldr	r5, [r3, #0]
 800b5fa:	6862      	ldr	r2, [r4, #4]
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	4628      	mov	r0, r5
 800b600:	f7f4 fdee 	bl	80001e0 <memchr>
 800b604:	b108      	cbz	r0, 800b60a <_printf_i+0x1f2>
 800b606:	1b40      	subs	r0, r0, r5
 800b608:	6060      	str	r0, [r4, #4]
 800b60a:	6863      	ldr	r3, [r4, #4]
 800b60c:	6123      	str	r3, [r4, #16]
 800b60e:	2300      	movs	r3, #0
 800b610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b614:	e7a8      	b.n	800b568 <_printf_i+0x150>
 800b616:	6923      	ldr	r3, [r4, #16]
 800b618:	462a      	mov	r2, r5
 800b61a:	4649      	mov	r1, r9
 800b61c:	4640      	mov	r0, r8
 800b61e:	47d0      	blx	sl
 800b620:	3001      	adds	r0, #1
 800b622:	d0ab      	beq.n	800b57c <_printf_i+0x164>
 800b624:	6823      	ldr	r3, [r4, #0]
 800b626:	079b      	lsls	r3, r3, #30
 800b628:	d413      	bmi.n	800b652 <_printf_i+0x23a>
 800b62a:	68e0      	ldr	r0, [r4, #12]
 800b62c:	9b03      	ldr	r3, [sp, #12]
 800b62e:	4298      	cmp	r0, r3
 800b630:	bfb8      	it	lt
 800b632:	4618      	movlt	r0, r3
 800b634:	e7a4      	b.n	800b580 <_printf_i+0x168>
 800b636:	2301      	movs	r3, #1
 800b638:	4632      	mov	r2, r6
 800b63a:	4649      	mov	r1, r9
 800b63c:	4640      	mov	r0, r8
 800b63e:	47d0      	blx	sl
 800b640:	3001      	adds	r0, #1
 800b642:	d09b      	beq.n	800b57c <_printf_i+0x164>
 800b644:	3501      	adds	r5, #1
 800b646:	68e3      	ldr	r3, [r4, #12]
 800b648:	9903      	ldr	r1, [sp, #12]
 800b64a:	1a5b      	subs	r3, r3, r1
 800b64c:	42ab      	cmp	r3, r5
 800b64e:	dcf2      	bgt.n	800b636 <_printf_i+0x21e>
 800b650:	e7eb      	b.n	800b62a <_printf_i+0x212>
 800b652:	2500      	movs	r5, #0
 800b654:	f104 0619 	add.w	r6, r4, #25
 800b658:	e7f5      	b.n	800b646 <_printf_i+0x22e>
 800b65a:	bf00      	nop
 800b65c:	0800f9ee 	.word	0x0800f9ee
 800b660:	0800f9ff 	.word	0x0800f9ff

0800b664 <_scanf_float>:
 800b664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b668:	b087      	sub	sp, #28
 800b66a:	4617      	mov	r7, r2
 800b66c:	9303      	str	r3, [sp, #12]
 800b66e:	688b      	ldr	r3, [r1, #8]
 800b670:	1e5a      	subs	r2, r3, #1
 800b672:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b676:	bf83      	ittte	hi
 800b678:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b67c:	195b      	addhi	r3, r3, r5
 800b67e:	9302      	strhi	r3, [sp, #8]
 800b680:	2300      	movls	r3, #0
 800b682:	bf86      	itte	hi
 800b684:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b688:	608b      	strhi	r3, [r1, #8]
 800b68a:	9302      	strls	r3, [sp, #8]
 800b68c:	680b      	ldr	r3, [r1, #0]
 800b68e:	468b      	mov	fp, r1
 800b690:	2500      	movs	r5, #0
 800b692:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b696:	f84b 3b1c 	str.w	r3, [fp], #28
 800b69a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b69e:	4680      	mov	r8, r0
 800b6a0:	460c      	mov	r4, r1
 800b6a2:	465e      	mov	r6, fp
 800b6a4:	46aa      	mov	sl, r5
 800b6a6:	46a9      	mov	r9, r5
 800b6a8:	9501      	str	r5, [sp, #4]
 800b6aa:	68a2      	ldr	r2, [r4, #8]
 800b6ac:	b152      	cbz	r2, 800b6c4 <_scanf_float+0x60>
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	2b4e      	cmp	r3, #78	; 0x4e
 800b6b4:	d864      	bhi.n	800b780 <_scanf_float+0x11c>
 800b6b6:	2b40      	cmp	r3, #64	; 0x40
 800b6b8:	d83c      	bhi.n	800b734 <_scanf_float+0xd0>
 800b6ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b6be:	b2c8      	uxtb	r0, r1
 800b6c0:	280e      	cmp	r0, #14
 800b6c2:	d93a      	bls.n	800b73a <_scanf_float+0xd6>
 800b6c4:	f1b9 0f00 	cmp.w	r9, #0
 800b6c8:	d003      	beq.n	800b6d2 <_scanf_float+0x6e>
 800b6ca:	6823      	ldr	r3, [r4, #0]
 800b6cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6d0:	6023      	str	r3, [r4, #0]
 800b6d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6d6:	f1ba 0f01 	cmp.w	sl, #1
 800b6da:	f200 8113 	bhi.w	800b904 <_scanf_float+0x2a0>
 800b6de:	455e      	cmp	r6, fp
 800b6e0:	f200 8105 	bhi.w	800b8ee <_scanf_float+0x28a>
 800b6e4:	2501      	movs	r5, #1
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	b007      	add	sp, #28
 800b6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b6f2:	2a0d      	cmp	r2, #13
 800b6f4:	d8e6      	bhi.n	800b6c4 <_scanf_float+0x60>
 800b6f6:	a101      	add	r1, pc, #4	; (adr r1, 800b6fc <_scanf_float+0x98>)
 800b6f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b6fc:	0800b83b 	.word	0x0800b83b
 800b700:	0800b6c5 	.word	0x0800b6c5
 800b704:	0800b6c5 	.word	0x0800b6c5
 800b708:	0800b6c5 	.word	0x0800b6c5
 800b70c:	0800b89b 	.word	0x0800b89b
 800b710:	0800b873 	.word	0x0800b873
 800b714:	0800b6c5 	.word	0x0800b6c5
 800b718:	0800b6c5 	.word	0x0800b6c5
 800b71c:	0800b849 	.word	0x0800b849
 800b720:	0800b6c5 	.word	0x0800b6c5
 800b724:	0800b6c5 	.word	0x0800b6c5
 800b728:	0800b6c5 	.word	0x0800b6c5
 800b72c:	0800b6c5 	.word	0x0800b6c5
 800b730:	0800b801 	.word	0x0800b801
 800b734:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b738:	e7db      	b.n	800b6f2 <_scanf_float+0x8e>
 800b73a:	290e      	cmp	r1, #14
 800b73c:	d8c2      	bhi.n	800b6c4 <_scanf_float+0x60>
 800b73e:	a001      	add	r0, pc, #4	; (adr r0, 800b744 <_scanf_float+0xe0>)
 800b740:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b744:	0800b7f3 	.word	0x0800b7f3
 800b748:	0800b6c5 	.word	0x0800b6c5
 800b74c:	0800b7f3 	.word	0x0800b7f3
 800b750:	0800b887 	.word	0x0800b887
 800b754:	0800b6c5 	.word	0x0800b6c5
 800b758:	0800b7a1 	.word	0x0800b7a1
 800b75c:	0800b7dd 	.word	0x0800b7dd
 800b760:	0800b7dd 	.word	0x0800b7dd
 800b764:	0800b7dd 	.word	0x0800b7dd
 800b768:	0800b7dd 	.word	0x0800b7dd
 800b76c:	0800b7dd 	.word	0x0800b7dd
 800b770:	0800b7dd 	.word	0x0800b7dd
 800b774:	0800b7dd 	.word	0x0800b7dd
 800b778:	0800b7dd 	.word	0x0800b7dd
 800b77c:	0800b7dd 	.word	0x0800b7dd
 800b780:	2b6e      	cmp	r3, #110	; 0x6e
 800b782:	d809      	bhi.n	800b798 <_scanf_float+0x134>
 800b784:	2b60      	cmp	r3, #96	; 0x60
 800b786:	d8b2      	bhi.n	800b6ee <_scanf_float+0x8a>
 800b788:	2b54      	cmp	r3, #84	; 0x54
 800b78a:	d077      	beq.n	800b87c <_scanf_float+0x218>
 800b78c:	2b59      	cmp	r3, #89	; 0x59
 800b78e:	d199      	bne.n	800b6c4 <_scanf_float+0x60>
 800b790:	2d07      	cmp	r5, #7
 800b792:	d197      	bne.n	800b6c4 <_scanf_float+0x60>
 800b794:	2508      	movs	r5, #8
 800b796:	e029      	b.n	800b7ec <_scanf_float+0x188>
 800b798:	2b74      	cmp	r3, #116	; 0x74
 800b79a:	d06f      	beq.n	800b87c <_scanf_float+0x218>
 800b79c:	2b79      	cmp	r3, #121	; 0x79
 800b79e:	e7f6      	b.n	800b78e <_scanf_float+0x12a>
 800b7a0:	6821      	ldr	r1, [r4, #0]
 800b7a2:	05c8      	lsls	r0, r1, #23
 800b7a4:	d51a      	bpl.n	800b7dc <_scanf_float+0x178>
 800b7a6:	9b02      	ldr	r3, [sp, #8]
 800b7a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b7ac:	6021      	str	r1, [r4, #0]
 800b7ae:	f109 0901 	add.w	r9, r9, #1
 800b7b2:	b11b      	cbz	r3, 800b7bc <_scanf_float+0x158>
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	3201      	adds	r2, #1
 800b7b8:	9302      	str	r3, [sp, #8]
 800b7ba:	60a2      	str	r2, [r4, #8]
 800b7bc:	68a3      	ldr	r3, [r4, #8]
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	60a3      	str	r3, [r4, #8]
 800b7c2:	6923      	ldr	r3, [r4, #16]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	6123      	str	r3, [r4, #16]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	607b      	str	r3, [r7, #4]
 800b7d0:	f340 8084 	ble.w	800b8dc <_scanf_float+0x278>
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	603b      	str	r3, [r7, #0]
 800b7da:	e766      	b.n	800b6aa <_scanf_float+0x46>
 800b7dc:	eb1a 0f05 	cmn.w	sl, r5
 800b7e0:	f47f af70 	bne.w	800b6c4 <_scanf_float+0x60>
 800b7e4:	6822      	ldr	r2, [r4, #0]
 800b7e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b7ea:	6022      	str	r2, [r4, #0]
 800b7ec:	f806 3b01 	strb.w	r3, [r6], #1
 800b7f0:	e7e4      	b.n	800b7bc <_scanf_float+0x158>
 800b7f2:	6822      	ldr	r2, [r4, #0]
 800b7f4:	0610      	lsls	r0, r2, #24
 800b7f6:	f57f af65 	bpl.w	800b6c4 <_scanf_float+0x60>
 800b7fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b7fe:	e7f4      	b.n	800b7ea <_scanf_float+0x186>
 800b800:	f1ba 0f00 	cmp.w	sl, #0
 800b804:	d10e      	bne.n	800b824 <_scanf_float+0x1c0>
 800b806:	f1b9 0f00 	cmp.w	r9, #0
 800b80a:	d10e      	bne.n	800b82a <_scanf_float+0x1c6>
 800b80c:	6822      	ldr	r2, [r4, #0]
 800b80e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b812:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b816:	d108      	bne.n	800b82a <_scanf_float+0x1c6>
 800b818:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b81c:	6022      	str	r2, [r4, #0]
 800b81e:	f04f 0a01 	mov.w	sl, #1
 800b822:	e7e3      	b.n	800b7ec <_scanf_float+0x188>
 800b824:	f1ba 0f02 	cmp.w	sl, #2
 800b828:	d055      	beq.n	800b8d6 <_scanf_float+0x272>
 800b82a:	2d01      	cmp	r5, #1
 800b82c:	d002      	beq.n	800b834 <_scanf_float+0x1d0>
 800b82e:	2d04      	cmp	r5, #4
 800b830:	f47f af48 	bne.w	800b6c4 <_scanf_float+0x60>
 800b834:	3501      	adds	r5, #1
 800b836:	b2ed      	uxtb	r5, r5
 800b838:	e7d8      	b.n	800b7ec <_scanf_float+0x188>
 800b83a:	f1ba 0f01 	cmp.w	sl, #1
 800b83e:	f47f af41 	bne.w	800b6c4 <_scanf_float+0x60>
 800b842:	f04f 0a02 	mov.w	sl, #2
 800b846:	e7d1      	b.n	800b7ec <_scanf_float+0x188>
 800b848:	b97d      	cbnz	r5, 800b86a <_scanf_float+0x206>
 800b84a:	f1b9 0f00 	cmp.w	r9, #0
 800b84e:	f47f af3c 	bne.w	800b6ca <_scanf_float+0x66>
 800b852:	6822      	ldr	r2, [r4, #0]
 800b854:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b858:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b85c:	f47f af39 	bne.w	800b6d2 <_scanf_float+0x6e>
 800b860:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b864:	6022      	str	r2, [r4, #0]
 800b866:	2501      	movs	r5, #1
 800b868:	e7c0      	b.n	800b7ec <_scanf_float+0x188>
 800b86a:	2d03      	cmp	r5, #3
 800b86c:	d0e2      	beq.n	800b834 <_scanf_float+0x1d0>
 800b86e:	2d05      	cmp	r5, #5
 800b870:	e7de      	b.n	800b830 <_scanf_float+0x1cc>
 800b872:	2d02      	cmp	r5, #2
 800b874:	f47f af26 	bne.w	800b6c4 <_scanf_float+0x60>
 800b878:	2503      	movs	r5, #3
 800b87a:	e7b7      	b.n	800b7ec <_scanf_float+0x188>
 800b87c:	2d06      	cmp	r5, #6
 800b87e:	f47f af21 	bne.w	800b6c4 <_scanf_float+0x60>
 800b882:	2507      	movs	r5, #7
 800b884:	e7b2      	b.n	800b7ec <_scanf_float+0x188>
 800b886:	6822      	ldr	r2, [r4, #0]
 800b888:	0591      	lsls	r1, r2, #22
 800b88a:	f57f af1b 	bpl.w	800b6c4 <_scanf_float+0x60>
 800b88e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b892:	6022      	str	r2, [r4, #0]
 800b894:	f8cd 9004 	str.w	r9, [sp, #4]
 800b898:	e7a8      	b.n	800b7ec <_scanf_float+0x188>
 800b89a:	6822      	ldr	r2, [r4, #0]
 800b89c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b8a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b8a4:	d006      	beq.n	800b8b4 <_scanf_float+0x250>
 800b8a6:	0550      	lsls	r0, r2, #21
 800b8a8:	f57f af0c 	bpl.w	800b6c4 <_scanf_float+0x60>
 800b8ac:	f1b9 0f00 	cmp.w	r9, #0
 800b8b0:	f43f af0f 	beq.w	800b6d2 <_scanf_float+0x6e>
 800b8b4:	0591      	lsls	r1, r2, #22
 800b8b6:	bf58      	it	pl
 800b8b8:	9901      	ldrpl	r1, [sp, #4]
 800b8ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b8be:	bf58      	it	pl
 800b8c0:	eba9 0101 	subpl.w	r1, r9, r1
 800b8c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b8c8:	bf58      	it	pl
 800b8ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b8ce:	6022      	str	r2, [r4, #0]
 800b8d0:	f04f 0900 	mov.w	r9, #0
 800b8d4:	e78a      	b.n	800b7ec <_scanf_float+0x188>
 800b8d6:	f04f 0a03 	mov.w	sl, #3
 800b8da:	e787      	b.n	800b7ec <_scanf_float+0x188>
 800b8dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b8e0:	4639      	mov	r1, r7
 800b8e2:	4640      	mov	r0, r8
 800b8e4:	4798      	blx	r3
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	f43f aedf 	beq.w	800b6aa <_scanf_float+0x46>
 800b8ec:	e6ea      	b.n	800b6c4 <_scanf_float+0x60>
 800b8ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b8f6:	463a      	mov	r2, r7
 800b8f8:	4640      	mov	r0, r8
 800b8fa:	4798      	blx	r3
 800b8fc:	6923      	ldr	r3, [r4, #16]
 800b8fe:	3b01      	subs	r3, #1
 800b900:	6123      	str	r3, [r4, #16]
 800b902:	e6ec      	b.n	800b6de <_scanf_float+0x7a>
 800b904:	1e6b      	subs	r3, r5, #1
 800b906:	2b06      	cmp	r3, #6
 800b908:	d825      	bhi.n	800b956 <_scanf_float+0x2f2>
 800b90a:	2d02      	cmp	r5, #2
 800b90c:	d836      	bhi.n	800b97c <_scanf_float+0x318>
 800b90e:	455e      	cmp	r6, fp
 800b910:	f67f aee8 	bls.w	800b6e4 <_scanf_float+0x80>
 800b914:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b918:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b91c:	463a      	mov	r2, r7
 800b91e:	4640      	mov	r0, r8
 800b920:	4798      	blx	r3
 800b922:	6923      	ldr	r3, [r4, #16]
 800b924:	3b01      	subs	r3, #1
 800b926:	6123      	str	r3, [r4, #16]
 800b928:	e7f1      	b.n	800b90e <_scanf_float+0x2aa>
 800b92a:	9802      	ldr	r0, [sp, #8]
 800b92c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b930:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b934:	9002      	str	r0, [sp, #8]
 800b936:	463a      	mov	r2, r7
 800b938:	4640      	mov	r0, r8
 800b93a:	4798      	blx	r3
 800b93c:	6923      	ldr	r3, [r4, #16]
 800b93e:	3b01      	subs	r3, #1
 800b940:	6123      	str	r3, [r4, #16]
 800b942:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b946:	fa5f fa8a 	uxtb.w	sl, sl
 800b94a:	f1ba 0f02 	cmp.w	sl, #2
 800b94e:	d1ec      	bne.n	800b92a <_scanf_float+0x2c6>
 800b950:	3d03      	subs	r5, #3
 800b952:	b2ed      	uxtb	r5, r5
 800b954:	1b76      	subs	r6, r6, r5
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	05da      	lsls	r2, r3, #23
 800b95a:	d52f      	bpl.n	800b9bc <_scanf_float+0x358>
 800b95c:	055b      	lsls	r3, r3, #21
 800b95e:	d510      	bpl.n	800b982 <_scanf_float+0x31e>
 800b960:	455e      	cmp	r6, fp
 800b962:	f67f aebf 	bls.w	800b6e4 <_scanf_float+0x80>
 800b966:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b96a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b96e:	463a      	mov	r2, r7
 800b970:	4640      	mov	r0, r8
 800b972:	4798      	blx	r3
 800b974:	6923      	ldr	r3, [r4, #16]
 800b976:	3b01      	subs	r3, #1
 800b978:	6123      	str	r3, [r4, #16]
 800b97a:	e7f1      	b.n	800b960 <_scanf_float+0x2fc>
 800b97c:	46aa      	mov	sl, r5
 800b97e:	9602      	str	r6, [sp, #8]
 800b980:	e7df      	b.n	800b942 <_scanf_float+0x2de>
 800b982:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b986:	6923      	ldr	r3, [r4, #16]
 800b988:	2965      	cmp	r1, #101	; 0x65
 800b98a:	f103 33ff 	add.w	r3, r3, #4294967295
 800b98e:	f106 35ff 	add.w	r5, r6, #4294967295
 800b992:	6123      	str	r3, [r4, #16]
 800b994:	d00c      	beq.n	800b9b0 <_scanf_float+0x34c>
 800b996:	2945      	cmp	r1, #69	; 0x45
 800b998:	d00a      	beq.n	800b9b0 <_scanf_float+0x34c>
 800b99a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b99e:	463a      	mov	r2, r7
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	4798      	blx	r3
 800b9a4:	6923      	ldr	r3, [r4, #16]
 800b9a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	1eb5      	subs	r5, r6, #2
 800b9ae:	6123      	str	r3, [r4, #16]
 800b9b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b9b4:	463a      	mov	r2, r7
 800b9b6:	4640      	mov	r0, r8
 800b9b8:	4798      	blx	r3
 800b9ba:	462e      	mov	r6, r5
 800b9bc:	6825      	ldr	r5, [r4, #0]
 800b9be:	f015 0510 	ands.w	r5, r5, #16
 800b9c2:	d159      	bne.n	800ba78 <_scanf_float+0x414>
 800b9c4:	7035      	strb	r5, [r6, #0]
 800b9c6:	6823      	ldr	r3, [r4, #0]
 800b9c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b9cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9d0:	d11b      	bne.n	800ba0a <_scanf_float+0x3a6>
 800b9d2:	9b01      	ldr	r3, [sp, #4]
 800b9d4:	454b      	cmp	r3, r9
 800b9d6:	eba3 0209 	sub.w	r2, r3, r9
 800b9da:	d123      	bne.n	800ba24 <_scanf_float+0x3c0>
 800b9dc:	2200      	movs	r2, #0
 800b9de:	4659      	mov	r1, fp
 800b9e0:	4640      	mov	r0, r8
 800b9e2:	f000 ff4b 	bl	800c87c <_strtod_r>
 800b9e6:	6822      	ldr	r2, [r4, #0]
 800b9e8:	9b03      	ldr	r3, [sp, #12]
 800b9ea:	f012 0f02 	tst.w	r2, #2
 800b9ee:	ec57 6b10 	vmov	r6, r7, d0
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	d021      	beq.n	800ba3a <_scanf_float+0x3d6>
 800b9f6:	9903      	ldr	r1, [sp, #12]
 800b9f8:	1d1a      	adds	r2, r3, #4
 800b9fa:	600a      	str	r2, [r1, #0]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	e9c3 6700 	strd	r6, r7, [r3]
 800ba02:	68e3      	ldr	r3, [r4, #12]
 800ba04:	3301      	adds	r3, #1
 800ba06:	60e3      	str	r3, [r4, #12]
 800ba08:	e66d      	b.n	800b6e6 <_scanf_float+0x82>
 800ba0a:	9b04      	ldr	r3, [sp, #16]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d0e5      	beq.n	800b9dc <_scanf_float+0x378>
 800ba10:	9905      	ldr	r1, [sp, #20]
 800ba12:	230a      	movs	r3, #10
 800ba14:	462a      	mov	r2, r5
 800ba16:	3101      	adds	r1, #1
 800ba18:	4640      	mov	r0, r8
 800ba1a:	f000 ffb7 	bl	800c98c <_strtol_r>
 800ba1e:	9b04      	ldr	r3, [sp, #16]
 800ba20:	9e05      	ldr	r6, [sp, #20]
 800ba22:	1ac2      	subs	r2, r0, r3
 800ba24:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ba28:	429e      	cmp	r6, r3
 800ba2a:	bf28      	it	cs
 800ba2c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ba30:	4912      	ldr	r1, [pc, #72]	; (800ba7c <_scanf_float+0x418>)
 800ba32:	4630      	mov	r0, r6
 800ba34:	f000 f8e0 	bl	800bbf8 <siprintf>
 800ba38:	e7d0      	b.n	800b9dc <_scanf_float+0x378>
 800ba3a:	9903      	ldr	r1, [sp, #12]
 800ba3c:	f012 0f04 	tst.w	r2, #4
 800ba40:	f103 0204 	add.w	r2, r3, #4
 800ba44:	600a      	str	r2, [r1, #0]
 800ba46:	d1d9      	bne.n	800b9fc <_scanf_float+0x398>
 800ba48:	f8d3 8000 	ldr.w	r8, [r3]
 800ba4c:	ee10 2a10 	vmov	r2, s0
 800ba50:	ee10 0a10 	vmov	r0, s0
 800ba54:	463b      	mov	r3, r7
 800ba56:	4639      	mov	r1, r7
 800ba58:	f7f5 f868 	bl	8000b2c <__aeabi_dcmpun>
 800ba5c:	b128      	cbz	r0, 800ba6a <_scanf_float+0x406>
 800ba5e:	4808      	ldr	r0, [pc, #32]	; (800ba80 <_scanf_float+0x41c>)
 800ba60:	f000 f8c4 	bl	800bbec <nanf>
 800ba64:	ed88 0a00 	vstr	s0, [r8]
 800ba68:	e7cb      	b.n	800ba02 <_scanf_float+0x39e>
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	4639      	mov	r1, r7
 800ba6e:	f7f5 f8bb 	bl	8000be8 <__aeabi_d2f>
 800ba72:	f8c8 0000 	str.w	r0, [r8]
 800ba76:	e7c4      	b.n	800ba02 <_scanf_float+0x39e>
 800ba78:	2500      	movs	r5, #0
 800ba7a:	e634      	b.n	800b6e6 <_scanf_float+0x82>
 800ba7c:	0800fa10 	.word	0x0800fa10
 800ba80:	0800fb13 	.word	0x0800fb13

0800ba84 <_puts_r>:
 800ba84:	b570      	push	{r4, r5, r6, lr}
 800ba86:	460e      	mov	r6, r1
 800ba88:	4605      	mov	r5, r0
 800ba8a:	b118      	cbz	r0, 800ba94 <_puts_r+0x10>
 800ba8c:	6983      	ldr	r3, [r0, #24]
 800ba8e:	b90b      	cbnz	r3, 800ba94 <_puts_r+0x10>
 800ba90:	f001 fff2 	bl	800da78 <__sinit>
 800ba94:	69ab      	ldr	r3, [r5, #24]
 800ba96:	68ac      	ldr	r4, [r5, #8]
 800ba98:	b913      	cbnz	r3, 800baa0 <_puts_r+0x1c>
 800ba9a:	4628      	mov	r0, r5
 800ba9c:	f001 ffec 	bl	800da78 <__sinit>
 800baa0:	4b2c      	ldr	r3, [pc, #176]	; (800bb54 <_puts_r+0xd0>)
 800baa2:	429c      	cmp	r4, r3
 800baa4:	d120      	bne.n	800bae8 <_puts_r+0x64>
 800baa6:	686c      	ldr	r4, [r5, #4]
 800baa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800baaa:	07db      	lsls	r3, r3, #31
 800baac:	d405      	bmi.n	800baba <_puts_r+0x36>
 800baae:	89a3      	ldrh	r3, [r4, #12]
 800bab0:	0598      	lsls	r0, r3, #22
 800bab2:	d402      	bmi.n	800baba <_puts_r+0x36>
 800bab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bab6:	f002 fc02 	bl	800e2be <__retarget_lock_acquire_recursive>
 800baba:	89a3      	ldrh	r3, [r4, #12]
 800babc:	0719      	lsls	r1, r3, #28
 800babe:	d51d      	bpl.n	800bafc <_puts_r+0x78>
 800bac0:	6923      	ldr	r3, [r4, #16]
 800bac2:	b1db      	cbz	r3, 800bafc <_puts_r+0x78>
 800bac4:	3e01      	subs	r6, #1
 800bac6:	68a3      	ldr	r3, [r4, #8]
 800bac8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bacc:	3b01      	subs	r3, #1
 800bace:	60a3      	str	r3, [r4, #8]
 800bad0:	bb39      	cbnz	r1, 800bb22 <_puts_r+0x9e>
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	da38      	bge.n	800bb48 <_puts_r+0xc4>
 800bad6:	4622      	mov	r2, r4
 800bad8:	210a      	movs	r1, #10
 800bada:	4628      	mov	r0, r5
 800badc:	f000 ff58 	bl	800c990 <__swbuf_r>
 800bae0:	3001      	adds	r0, #1
 800bae2:	d011      	beq.n	800bb08 <_puts_r+0x84>
 800bae4:	250a      	movs	r5, #10
 800bae6:	e011      	b.n	800bb0c <_puts_r+0x88>
 800bae8:	4b1b      	ldr	r3, [pc, #108]	; (800bb58 <_puts_r+0xd4>)
 800baea:	429c      	cmp	r4, r3
 800baec:	d101      	bne.n	800baf2 <_puts_r+0x6e>
 800baee:	68ac      	ldr	r4, [r5, #8]
 800baf0:	e7da      	b.n	800baa8 <_puts_r+0x24>
 800baf2:	4b1a      	ldr	r3, [pc, #104]	; (800bb5c <_puts_r+0xd8>)
 800baf4:	429c      	cmp	r4, r3
 800baf6:	bf08      	it	eq
 800baf8:	68ec      	ldreq	r4, [r5, #12]
 800bafa:	e7d5      	b.n	800baa8 <_puts_r+0x24>
 800bafc:	4621      	mov	r1, r4
 800bafe:	4628      	mov	r0, r5
 800bb00:	f000 ff98 	bl	800ca34 <__swsetup_r>
 800bb04:	2800      	cmp	r0, #0
 800bb06:	d0dd      	beq.n	800bac4 <_puts_r+0x40>
 800bb08:	f04f 35ff 	mov.w	r5, #4294967295
 800bb0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb0e:	07da      	lsls	r2, r3, #31
 800bb10:	d405      	bmi.n	800bb1e <_puts_r+0x9a>
 800bb12:	89a3      	ldrh	r3, [r4, #12]
 800bb14:	059b      	lsls	r3, r3, #22
 800bb16:	d402      	bmi.n	800bb1e <_puts_r+0x9a>
 800bb18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb1a:	f002 fbd1 	bl	800e2c0 <__retarget_lock_release_recursive>
 800bb1e:	4628      	mov	r0, r5
 800bb20:	bd70      	pop	{r4, r5, r6, pc}
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	da04      	bge.n	800bb30 <_puts_r+0xac>
 800bb26:	69a2      	ldr	r2, [r4, #24]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	dc06      	bgt.n	800bb3a <_puts_r+0xb6>
 800bb2c:	290a      	cmp	r1, #10
 800bb2e:	d004      	beq.n	800bb3a <_puts_r+0xb6>
 800bb30:	6823      	ldr	r3, [r4, #0]
 800bb32:	1c5a      	adds	r2, r3, #1
 800bb34:	6022      	str	r2, [r4, #0]
 800bb36:	7019      	strb	r1, [r3, #0]
 800bb38:	e7c5      	b.n	800bac6 <_puts_r+0x42>
 800bb3a:	4622      	mov	r2, r4
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	f000 ff27 	bl	800c990 <__swbuf_r>
 800bb42:	3001      	adds	r0, #1
 800bb44:	d1bf      	bne.n	800bac6 <_puts_r+0x42>
 800bb46:	e7df      	b.n	800bb08 <_puts_r+0x84>
 800bb48:	6823      	ldr	r3, [r4, #0]
 800bb4a:	250a      	movs	r5, #10
 800bb4c:	1c5a      	adds	r2, r3, #1
 800bb4e:	6022      	str	r2, [r4, #0]
 800bb50:	701d      	strb	r5, [r3, #0]
 800bb52:	e7db      	b.n	800bb0c <_puts_r+0x88>
 800bb54:	0800fcb0 	.word	0x0800fcb0
 800bb58:	0800fcd0 	.word	0x0800fcd0
 800bb5c:	0800fc90 	.word	0x0800fc90

0800bb60 <puts>:
 800bb60:	4b02      	ldr	r3, [pc, #8]	; (800bb6c <puts+0xc>)
 800bb62:	4601      	mov	r1, r0
 800bb64:	6818      	ldr	r0, [r3, #0]
 800bb66:	f7ff bf8d 	b.w	800ba84 <_puts_r>
 800bb6a:	bf00      	nop
 800bb6c:	20000030 	.word	0x20000030

0800bb70 <rand>:
 800bb70:	4b16      	ldr	r3, [pc, #88]	; (800bbcc <rand+0x5c>)
 800bb72:	b510      	push	{r4, lr}
 800bb74:	681c      	ldr	r4, [r3, #0]
 800bb76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bb78:	b9b3      	cbnz	r3, 800bba8 <rand+0x38>
 800bb7a:	2018      	movs	r0, #24
 800bb7c:	f002 fc06 	bl	800e38c <malloc>
 800bb80:	63a0      	str	r0, [r4, #56]	; 0x38
 800bb82:	b928      	cbnz	r0, 800bb90 <rand+0x20>
 800bb84:	4602      	mov	r2, r0
 800bb86:	4b12      	ldr	r3, [pc, #72]	; (800bbd0 <rand+0x60>)
 800bb88:	4812      	ldr	r0, [pc, #72]	; (800bbd4 <rand+0x64>)
 800bb8a:	214e      	movs	r1, #78	; 0x4e
 800bb8c:	f000 ffc0 	bl	800cb10 <__assert_func>
 800bb90:	4a11      	ldr	r2, [pc, #68]	; (800bbd8 <rand+0x68>)
 800bb92:	4b12      	ldr	r3, [pc, #72]	; (800bbdc <rand+0x6c>)
 800bb94:	e9c0 2300 	strd	r2, r3, [r0]
 800bb98:	4b11      	ldr	r3, [pc, #68]	; (800bbe0 <rand+0x70>)
 800bb9a:	6083      	str	r3, [r0, #8]
 800bb9c:	230b      	movs	r3, #11
 800bb9e:	8183      	strh	r3, [r0, #12]
 800bba0:	2201      	movs	r2, #1
 800bba2:	2300      	movs	r3, #0
 800bba4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bba8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800bbaa:	4a0e      	ldr	r2, [pc, #56]	; (800bbe4 <rand+0x74>)
 800bbac:	6920      	ldr	r0, [r4, #16]
 800bbae:	6963      	ldr	r3, [r4, #20]
 800bbb0:	490d      	ldr	r1, [pc, #52]	; (800bbe8 <rand+0x78>)
 800bbb2:	4342      	muls	r2, r0
 800bbb4:	fb01 2203 	mla	r2, r1, r3, r2
 800bbb8:	fba0 0101 	umull	r0, r1, r0, r1
 800bbbc:	1c43      	adds	r3, r0, #1
 800bbbe:	eb42 0001 	adc.w	r0, r2, r1
 800bbc2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800bbc6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bbca:	bd10      	pop	{r4, pc}
 800bbcc:	20000030 	.word	0x20000030
 800bbd0:	0800fa15 	.word	0x0800fa15
 800bbd4:	0800fa2c 	.word	0x0800fa2c
 800bbd8:	abcd330e 	.word	0xabcd330e
 800bbdc:	e66d1234 	.word	0xe66d1234
 800bbe0:	0005deec 	.word	0x0005deec
 800bbe4:	5851f42d 	.word	0x5851f42d
 800bbe8:	4c957f2d 	.word	0x4c957f2d

0800bbec <nanf>:
 800bbec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bbf4 <nanf+0x8>
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	7fc00000 	.word	0x7fc00000

0800bbf8 <siprintf>:
 800bbf8:	b40e      	push	{r1, r2, r3}
 800bbfa:	b500      	push	{lr}
 800bbfc:	b09c      	sub	sp, #112	; 0x70
 800bbfe:	ab1d      	add	r3, sp, #116	; 0x74
 800bc00:	9002      	str	r0, [sp, #8]
 800bc02:	9006      	str	r0, [sp, #24]
 800bc04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc08:	4809      	ldr	r0, [pc, #36]	; (800bc30 <siprintf+0x38>)
 800bc0a:	9107      	str	r1, [sp, #28]
 800bc0c:	9104      	str	r1, [sp, #16]
 800bc0e:	4909      	ldr	r1, [pc, #36]	; (800bc34 <siprintf+0x3c>)
 800bc10:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc14:	9105      	str	r1, [sp, #20]
 800bc16:	6800      	ldr	r0, [r0, #0]
 800bc18:	9301      	str	r3, [sp, #4]
 800bc1a:	a902      	add	r1, sp, #8
 800bc1c:	f003 f9f2 	bl	800f004 <_svfiprintf_r>
 800bc20:	9b02      	ldr	r3, [sp, #8]
 800bc22:	2200      	movs	r2, #0
 800bc24:	701a      	strb	r2, [r3, #0]
 800bc26:	b01c      	add	sp, #112	; 0x70
 800bc28:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc2c:	b003      	add	sp, #12
 800bc2e:	4770      	bx	lr
 800bc30:	20000030 	.word	0x20000030
 800bc34:	ffff0208 	.word	0xffff0208

0800bc38 <sulp>:
 800bc38:	b570      	push	{r4, r5, r6, lr}
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	460d      	mov	r5, r1
 800bc3e:	ec45 4b10 	vmov	d0, r4, r5
 800bc42:	4616      	mov	r6, r2
 800bc44:	f002 ff3c 	bl	800eac0 <__ulp>
 800bc48:	ec51 0b10 	vmov	r0, r1, d0
 800bc4c:	b17e      	cbz	r6, 800bc6e <sulp+0x36>
 800bc4e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bc52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	dd09      	ble.n	800bc6e <sulp+0x36>
 800bc5a:	051b      	lsls	r3, r3, #20
 800bc5c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bc60:	2400      	movs	r4, #0
 800bc62:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bc66:	4622      	mov	r2, r4
 800bc68:	462b      	mov	r3, r5
 800bc6a:	f7f4 fcc5 	bl	80005f8 <__aeabi_dmul>
 800bc6e:	bd70      	pop	{r4, r5, r6, pc}

0800bc70 <_strtod_l>:
 800bc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc74:	ed2d 8b02 	vpush	{d8}
 800bc78:	b09d      	sub	sp, #116	; 0x74
 800bc7a:	461f      	mov	r7, r3
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	9318      	str	r3, [sp, #96]	; 0x60
 800bc80:	4ba2      	ldr	r3, [pc, #648]	; (800bf0c <_strtod_l+0x29c>)
 800bc82:	9213      	str	r2, [sp, #76]	; 0x4c
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	9305      	str	r3, [sp, #20]
 800bc88:	4604      	mov	r4, r0
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	4688      	mov	r8, r1
 800bc8e:	f7f4 fa9f 	bl	80001d0 <strlen>
 800bc92:	f04f 0a00 	mov.w	sl, #0
 800bc96:	4605      	mov	r5, r0
 800bc98:	f04f 0b00 	mov.w	fp, #0
 800bc9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bca0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bca2:	781a      	ldrb	r2, [r3, #0]
 800bca4:	2a2b      	cmp	r2, #43	; 0x2b
 800bca6:	d04e      	beq.n	800bd46 <_strtod_l+0xd6>
 800bca8:	d83b      	bhi.n	800bd22 <_strtod_l+0xb2>
 800bcaa:	2a0d      	cmp	r2, #13
 800bcac:	d834      	bhi.n	800bd18 <_strtod_l+0xa8>
 800bcae:	2a08      	cmp	r2, #8
 800bcb0:	d834      	bhi.n	800bd1c <_strtod_l+0xac>
 800bcb2:	2a00      	cmp	r2, #0
 800bcb4:	d03e      	beq.n	800bd34 <_strtod_l+0xc4>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	930a      	str	r3, [sp, #40]	; 0x28
 800bcba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bcbc:	7833      	ldrb	r3, [r6, #0]
 800bcbe:	2b30      	cmp	r3, #48	; 0x30
 800bcc0:	f040 80b0 	bne.w	800be24 <_strtod_l+0x1b4>
 800bcc4:	7873      	ldrb	r3, [r6, #1]
 800bcc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bcca:	2b58      	cmp	r3, #88	; 0x58
 800bccc:	d168      	bne.n	800bda0 <_strtod_l+0x130>
 800bcce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcd0:	9301      	str	r3, [sp, #4]
 800bcd2:	ab18      	add	r3, sp, #96	; 0x60
 800bcd4:	9702      	str	r7, [sp, #8]
 800bcd6:	9300      	str	r3, [sp, #0]
 800bcd8:	4a8d      	ldr	r2, [pc, #564]	; (800bf10 <_strtod_l+0x2a0>)
 800bcda:	ab19      	add	r3, sp, #100	; 0x64
 800bcdc:	a917      	add	r1, sp, #92	; 0x5c
 800bcde:	4620      	mov	r0, r4
 800bce0:	f001 ffe0 	bl	800dca4 <__gethex>
 800bce4:	f010 0707 	ands.w	r7, r0, #7
 800bce8:	4605      	mov	r5, r0
 800bcea:	d005      	beq.n	800bcf8 <_strtod_l+0x88>
 800bcec:	2f06      	cmp	r7, #6
 800bcee:	d12c      	bne.n	800bd4a <_strtod_l+0xda>
 800bcf0:	3601      	adds	r6, #1
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	9617      	str	r6, [sp, #92]	; 0x5c
 800bcf6:	930a      	str	r3, [sp, #40]	; 0x28
 800bcf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f040 8590 	bne.w	800c820 <_strtod_l+0xbb0>
 800bd00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd02:	b1eb      	cbz	r3, 800bd40 <_strtod_l+0xd0>
 800bd04:	4652      	mov	r2, sl
 800bd06:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bd0a:	ec43 2b10 	vmov	d0, r2, r3
 800bd0e:	b01d      	add	sp, #116	; 0x74
 800bd10:	ecbd 8b02 	vpop	{d8}
 800bd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd18:	2a20      	cmp	r2, #32
 800bd1a:	d1cc      	bne.n	800bcb6 <_strtod_l+0x46>
 800bd1c:	3301      	adds	r3, #1
 800bd1e:	9317      	str	r3, [sp, #92]	; 0x5c
 800bd20:	e7be      	b.n	800bca0 <_strtod_l+0x30>
 800bd22:	2a2d      	cmp	r2, #45	; 0x2d
 800bd24:	d1c7      	bne.n	800bcb6 <_strtod_l+0x46>
 800bd26:	2201      	movs	r2, #1
 800bd28:	920a      	str	r2, [sp, #40]	; 0x28
 800bd2a:	1c5a      	adds	r2, r3, #1
 800bd2c:	9217      	str	r2, [sp, #92]	; 0x5c
 800bd2e:	785b      	ldrb	r3, [r3, #1]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1c2      	bne.n	800bcba <_strtod_l+0x4a>
 800bd34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd36:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	f040 856e 	bne.w	800c81c <_strtod_l+0xbac>
 800bd40:	4652      	mov	r2, sl
 800bd42:	465b      	mov	r3, fp
 800bd44:	e7e1      	b.n	800bd0a <_strtod_l+0x9a>
 800bd46:	2200      	movs	r2, #0
 800bd48:	e7ee      	b.n	800bd28 <_strtod_l+0xb8>
 800bd4a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bd4c:	b13a      	cbz	r2, 800bd5e <_strtod_l+0xee>
 800bd4e:	2135      	movs	r1, #53	; 0x35
 800bd50:	a81a      	add	r0, sp, #104	; 0x68
 800bd52:	f002 ffc0 	bl	800ecd6 <__copybits>
 800bd56:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f002 fb7f 	bl	800e45c <_Bfree>
 800bd5e:	3f01      	subs	r7, #1
 800bd60:	2f04      	cmp	r7, #4
 800bd62:	d806      	bhi.n	800bd72 <_strtod_l+0x102>
 800bd64:	e8df f007 	tbb	[pc, r7]
 800bd68:	1714030a 	.word	0x1714030a
 800bd6c:	0a          	.byte	0x0a
 800bd6d:	00          	.byte	0x00
 800bd6e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800bd72:	0728      	lsls	r0, r5, #28
 800bd74:	d5c0      	bpl.n	800bcf8 <_strtod_l+0x88>
 800bd76:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bd7a:	e7bd      	b.n	800bcf8 <_strtod_l+0x88>
 800bd7c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800bd80:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bd82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bd86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bd8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bd8e:	e7f0      	b.n	800bd72 <_strtod_l+0x102>
 800bd90:	f8df b180 	ldr.w	fp, [pc, #384]	; 800bf14 <_strtod_l+0x2a4>
 800bd94:	e7ed      	b.n	800bd72 <_strtod_l+0x102>
 800bd96:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bd9a:	f04f 3aff 	mov.w	sl, #4294967295
 800bd9e:	e7e8      	b.n	800bd72 <_strtod_l+0x102>
 800bda0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bda2:	1c5a      	adds	r2, r3, #1
 800bda4:	9217      	str	r2, [sp, #92]	; 0x5c
 800bda6:	785b      	ldrb	r3, [r3, #1]
 800bda8:	2b30      	cmp	r3, #48	; 0x30
 800bdaa:	d0f9      	beq.n	800bda0 <_strtod_l+0x130>
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d0a3      	beq.n	800bcf8 <_strtod_l+0x88>
 800bdb0:	2301      	movs	r3, #1
 800bdb2:	f04f 0900 	mov.w	r9, #0
 800bdb6:	9304      	str	r3, [sp, #16]
 800bdb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdba:	9308      	str	r3, [sp, #32]
 800bdbc:	f8cd 901c 	str.w	r9, [sp, #28]
 800bdc0:	464f      	mov	r7, r9
 800bdc2:	220a      	movs	r2, #10
 800bdc4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bdc6:	7806      	ldrb	r6, [r0, #0]
 800bdc8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bdcc:	b2d9      	uxtb	r1, r3
 800bdce:	2909      	cmp	r1, #9
 800bdd0:	d92a      	bls.n	800be28 <_strtod_l+0x1b8>
 800bdd2:	9905      	ldr	r1, [sp, #20]
 800bdd4:	462a      	mov	r2, r5
 800bdd6:	f003 fbca 	bl	800f56e <strncmp>
 800bdda:	b398      	cbz	r0, 800be44 <_strtod_l+0x1d4>
 800bddc:	2000      	movs	r0, #0
 800bdde:	4632      	mov	r2, r6
 800bde0:	463d      	mov	r5, r7
 800bde2:	9005      	str	r0, [sp, #20]
 800bde4:	4603      	mov	r3, r0
 800bde6:	2a65      	cmp	r2, #101	; 0x65
 800bde8:	d001      	beq.n	800bdee <_strtod_l+0x17e>
 800bdea:	2a45      	cmp	r2, #69	; 0x45
 800bdec:	d118      	bne.n	800be20 <_strtod_l+0x1b0>
 800bdee:	b91d      	cbnz	r5, 800bdf8 <_strtod_l+0x188>
 800bdf0:	9a04      	ldr	r2, [sp, #16]
 800bdf2:	4302      	orrs	r2, r0
 800bdf4:	d09e      	beq.n	800bd34 <_strtod_l+0xc4>
 800bdf6:	2500      	movs	r5, #0
 800bdf8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800bdfc:	f108 0201 	add.w	r2, r8, #1
 800be00:	9217      	str	r2, [sp, #92]	; 0x5c
 800be02:	f898 2001 	ldrb.w	r2, [r8, #1]
 800be06:	2a2b      	cmp	r2, #43	; 0x2b
 800be08:	d075      	beq.n	800bef6 <_strtod_l+0x286>
 800be0a:	2a2d      	cmp	r2, #45	; 0x2d
 800be0c:	d07b      	beq.n	800bf06 <_strtod_l+0x296>
 800be0e:	f04f 0c00 	mov.w	ip, #0
 800be12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800be16:	2909      	cmp	r1, #9
 800be18:	f240 8082 	bls.w	800bf20 <_strtod_l+0x2b0>
 800be1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800be20:	2600      	movs	r6, #0
 800be22:	e09d      	b.n	800bf60 <_strtod_l+0x2f0>
 800be24:	2300      	movs	r3, #0
 800be26:	e7c4      	b.n	800bdb2 <_strtod_l+0x142>
 800be28:	2f08      	cmp	r7, #8
 800be2a:	bfd8      	it	le
 800be2c:	9907      	ldrle	r1, [sp, #28]
 800be2e:	f100 0001 	add.w	r0, r0, #1
 800be32:	bfda      	itte	le
 800be34:	fb02 3301 	mlale	r3, r2, r1, r3
 800be38:	9307      	strle	r3, [sp, #28]
 800be3a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800be3e:	3701      	adds	r7, #1
 800be40:	9017      	str	r0, [sp, #92]	; 0x5c
 800be42:	e7bf      	b.n	800bdc4 <_strtod_l+0x154>
 800be44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be46:	195a      	adds	r2, r3, r5
 800be48:	9217      	str	r2, [sp, #92]	; 0x5c
 800be4a:	5d5a      	ldrb	r2, [r3, r5]
 800be4c:	2f00      	cmp	r7, #0
 800be4e:	d037      	beq.n	800bec0 <_strtod_l+0x250>
 800be50:	9005      	str	r0, [sp, #20]
 800be52:	463d      	mov	r5, r7
 800be54:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800be58:	2b09      	cmp	r3, #9
 800be5a:	d912      	bls.n	800be82 <_strtod_l+0x212>
 800be5c:	2301      	movs	r3, #1
 800be5e:	e7c2      	b.n	800bde6 <_strtod_l+0x176>
 800be60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be62:	1c5a      	adds	r2, r3, #1
 800be64:	9217      	str	r2, [sp, #92]	; 0x5c
 800be66:	785a      	ldrb	r2, [r3, #1]
 800be68:	3001      	adds	r0, #1
 800be6a:	2a30      	cmp	r2, #48	; 0x30
 800be6c:	d0f8      	beq.n	800be60 <_strtod_l+0x1f0>
 800be6e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800be72:	2b08      	cmp	r3, #8
 800be74:	f200 84d9 	bhi.w	800c82a <_strtod_l+0xbba>
 800be78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be7a:	9005      	str	r0, [sp, #20]
 800be7c:	2000      	movs	r0, #0
 800be7e:	9308      	str	r3, [sp, #32]
 800be80:	4605      	mov	r5, r0
 800be82:	3a30      	subs	r2, #48	; 0x30
 800be84:	f100 0301 	add.w	r3, r0, #1
 800be88:	d014      	beq.n	800beb4 <_strtod_l+0x244>
 800be8a:	9905      	ldr	r1, [sp, #20]
 800be8c:	4419      	add	r1, r3
 800be8e:	9105      	str	r1, [sp, #20]
 800be90:	462b      	mov	r3, r5
 800be92:	eb00 0e05 	add.w	lr, r0, r5
 800be96:	210a      	movs	r1, #10
 800be98:	4573      	cmp	r3, lr
 800be9a:	d113      	bne.n	800bec4 <_strtod_l+0x254>
 800be9c:	182b      	adds	r3, r5, r0
 800be9e:	2b08      	cmp	r3, #8
 800bea0:	f105 0501 	add.w	r5, r5, #1
 800bea4:	4405      	add	r5, r0
 800bea6:	dc1c      	bgt.n	800bee2 <_strtod_l+0x272>
 800bea8:	9907      	ldr	r1, [sp, #28]
 800beaa:	230a      	movs	r3, #10
 800beac:	fb03 2301 	mla	r3, r3, r1, r2
 800beb0:	9307      	str	r3, [sp, #28]
 800beb2:	2300      	movs	r3, #0
 800beb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800beb6:	1c51      	adds	r1, r2, #1
 800beb8:	9117      	str	r1, [sp, #92]	; 0x5c
 800beba:	7852      	ldrb	r2, [r2, #1]
 800bebc:	4618      	mov	r0, r3
 800bebe:	e7c9      	b.n	800be54 <_strtod_l+0x1e4>
 800bec0:	4638      	mov	r0, r7
 800bec2:	e7d2      	b.n	800be6a <_strtod_l+0x1fa>
 800bec4:	2b08      	cmp	r3, #8
 800bec6:	dc04      	bgt.n	800bed2 <_strtod_l+0x262>
 800bec8:	9e07      	ldr	r6, [sp, #28]
 800beca:	434e      	muls	r6, r1
 800becc:	9607      	str	r6, [sp, #28]
 800bece:	3301      	adds	r3, #1
 800bed0:	e7e2      	b.n	800be98 <_strtod_l+0x228>
 800bed2:	f103 0c01 	add.w	ip, r3, #1
 800bed6:	f1bc 0f10 	cmp.w	ip, #16
 800beda:	bfd8      	it	le
 800bedc:	fb01 f909 	mulle.w	r9, r1, r9
 800bee0:	e7f5      	b.n	800bece <_strtod_l+0x25e>
 800bee2:	2d10      	cmp	r5, #16
 800bee4:	bfdc      	itt	le
 800bee6:	230a      	movle	r3, #10
 800bee8:	fb03 2909 	mlale	r9, r3, r9, r2
 800beec:	e7e1      	b.n	800beb2 <_strtod_l+0x242>
 800beee:	2300      	movs	r3, #0
 800bef0:	9305      	str	r3, [sp, #20]
 800bef2:	2301      	movs	r3, #1
 800bef4:	e77c      	b.n	800bdf0 <_strtod_l+0x180>
 800bef6:	f04f 0c00 	mov.w	ip, #0
 800befa:	f108 0202 	add.w	r2, r8, #2
 800befe:	9217      	str	r2, [sp, #92]	; 0x5c
 800bf00:	f898 2002 	ldrb.w	r2, [r8, #2]
 800bf04:	e785      	b.n	800be12 <_strtod_l+0x1a2>
 800bf06:	f04f 0c01 	mov.w	ip, #1
 800bf0a:	e7f6      	b.n	800befa <_strtod_l+0x28a>
 800bf0c:	0800fd58 	.word	0x0800fd58
 800bf10:	0800fa88 	.word	0x0800fa88
 800bf14:	7ff00000 	.word	0x7ff00000
 800bf18:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bf1a:	1c51      	adds	r1, r2, #1
 800bf1c:	9117      	str	r1, [sp, #92]	; 0x5c
 800bf1e:	7852      	ldrb	r2, [r2, #1]
 800bf20:	2a30      	cmp	r2, #48	; 0x30
 800bf22:	d0f9      	beq.n	800bf18 <_strtod_l+0x2a8>
 800bf24:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bf28:	2908      	cmp	r1, #8
 800bf2a:	f63f af79 	bhi.w	800be20 <_strtod_l+0x1b0>
 800bf2e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bf32:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bf34:	9206      	str	r2, [sp, #24]
 800bf36:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bf38:	1c51      	adds	r1, r2, #1
 800bf3a:	9117      	str	r1, [sp, #92]	; 0x5c
 800bf3c:	7852      	ldrb	r2, [r2, #1]
 800bf3e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bf42:	2e09      	cmp	r6, #9
 800bf44:	d937      	bls.n	800bfb6 <_strtod_l+0x346>
 800bf46:	9e06      	ldr	r6, [sp, #24]
 800bf48:	1b89      	subs	r1, r1, r6
 800bf4a:	2908      	cmp	r1, #8
 800bf4c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bf50:	dc02      	bgt.n	800bf58 <_strtod_l+0x2e8>
 800bf52:	4576      	cmp	r6, lr
 800bf54:	bfa8      	it	ge
 800bf56:	4676      	movge	r6, lr
 800bf58:	f1bc 0f00 	cmp.w	ip, #0
 800bf5c:	d000      	beq.n	800bf60 <_strtod_l+0x2f0>
 800bf5e:	4276      	negs	r6, r6
 800bf60:	2d00      	cmp	r5, #0
 800bf62:	d14d      	bne.n	800c000 <_strtod_l+0x390>
 800bf64:	9904      	ldr	r1, [sp, #16]
 800bf66:	4301      	orrs	r1, r0
 800bf68:	f47f aec6 	bne.w	800bcf8 <_strtod_l+0x88>
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	f47f aee1 	bne.w	800bd34 <_strtod_l+0xc4>
 800bf72:	2a69      	cmp	r2, #105	; 0x69
 800bf74:	d027      	beq.n	800bfc6 <_strtod_l+0x356>
 800bf76:	dc24      	bgt.n	800bfc2 <_strtod_l+0x352>
 800bf78:	2a49      	cmp	r2, #73	; 0x49
 800bf7a:	d024      	beq.n	800bfc6 <_strtod_l+0x356>
 800bf7c:	2a4e      	cmp	r2, #78	; 0x4e
 800bf7e:	f47f aed9 	bne.w	800bd34 <_strtod_l+0xc4>
 800bf82:	499f      	ldr	r1, [pc, #636]	; (800c200 <_strtod_l+0x590>)
 800bf84:	a817      	add	r0, sp, #92	; 0x5c
 800bf86:	f002 f8e5 	bl	800e154 <__match>
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	f43f aed2 	beq.w	800bd34 <_strtod_l+0xc4>
 800bf90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	2b28      	cmp	r3, #40	; 0x28
 800bf96:	d12d      	bne.n	800bff4 <_strtod_l+0x384>
 800bf98:	499a      	ldr	r1, [pc, #616]	; (800c204 <_strtod_l+0x594>)
 800bf9a:	aa1a      	add	r2, sp, #104	; 0x68
 800bf9c:	a817      	add	r0, sp, #92	; 0x5c
 800bf9e:	f002 f8ed 	bl	800e17c <__hexnan>
 800bfa2:	2805      	cmp	r0, #5
 800bfa4:	d126      	bne.n	800bff4 <_strtod_l+0x384>
 800bfa6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bfa8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800bfac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bfb0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bfb4:	e6a0      	b.n	800bcf8 <_strtod_l+0x88>
 800bfb6:	210a      	movs	r1, #10
 800bfb8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800bfbc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bfc0:	e7b9      	b.n	800bf36 <_strtod_l+0x2c6>
 800bfc2:	2a6e      	cmp	r2, #110	; 0x6e
 800bfc4:	e7db      	b.n	800bf7e <_strtod_l+0x30e>
 800bfc6:	4990      	ldr	r1, [pc, #576]	; (800c208 <_strtod_l+0x598>)
 800bfc8:	a817      	add	r0, sp, #92	; 0x5c
 800bfca:	f002 f8c3 	bl	800e154 <__match>
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	f43f aeb0 	beq.w	800bd34 <_strtod_l+0xc4>
 800bfd4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfd6:	498d      	ldr	r1, [pc, #564]	; (800c20c <_strtod_l+0x59c>)
 800bfd8:	3b01      	subs	r3, #1
 800bfda:	a817      	add	r0, sp, #92	; 0x5c
 800bfdc:	9317      	str	r3, [sp, #92]	; 0x5c
 800bfde:	f002 f8b9 	bl	800e154 <__match>
 800bfe2:	b910      	cbnz	r0, 800bfea <_strtod_l+0x37a>
 800bfe4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	9317      	str	r3, [sp, #92]	; 0x5c
 800bfea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c21c <_strtod_l+0x5ac>
 800bfee:	f04f 0a00 	mov.w	sl, #0
 800bff2:	e681      	b.n	800bcf8 <_strtod_l+0x88>
 800bff4:	4886      	ldr	r0, [pc, #536]	; (800c210 <_strtod_l+0x5a0>)
 800bff6:	f003 fa5f 	bl	800f4b8 <nan>
 800bffa:	ec5b ab10 	vmov	sl, fp, d0
 800bffe:	e67b      	b.n	800bcf8 <_strtod_l+0x88>
 800c000:	9b05      	ldr	r3, [sp, #20]
 800c002:	9807      	ldr	r0, [sp, #28]
 800c004:	1af3      	subs	r3, r6, r3
 800c006:	2f00      	cmp	r7, #0
 800c008:	bf08      	it	eq
 800c00a:	462f      	moveq	r7, r5
 800c00c:	2d10      	cmp	r5, #16
 800c00e:	9306      	str	r3, [sp, #24]
 800c010:	46a8      	mov	r8, r5
 800c012:	bfa8      	it	ge
 800c014:	f04f 0810 	movge.w	r8, #16
 800c018:	f7f4 fa74 	bl	8000504 <__aeabi_ui2d>
 800c01c:	2d09      	cmp	r5, #9
 800c01e:	4682      	mov	sl, r0
 800c020:	468b      	mov	fp, r1
 800c022:	dd13      	ble.n	800c04c <_strtod_l+0x3dc>
 800c024:	4b7b      	ldr	r3, [pc, #492]	; (800c214 <_strtod_l+0x5a4>)
 800c026:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c02a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c02e:	f7f4 fae3 	bl	80005f8 <__aeabi_dmul>
 800c032:	4682      	mov	sl, r0
 800c034:	4648      	mov	r0, r9
 800c036:	468b      	mov	fp, r1
 800c038:	f7f4 fa64 	bl	8000504 <__aeabi_ui2d>
 800c03c:	4602      	mov	r2, r0
 800c03e:	460b      	mov	r3, r1
 800c040:	4650      	mov	r0, sl
 800c042:	4659      	mov	r1, fp
 800c044:	f7f4 f922 	bl	800028c <__adddf3>
 800c048:	4682      	mov	sl, r0
 800c04a:	468b      	mov	fp, r1
 800c04c:	2d0f      	cmp	r5, #15
 800c04e:	dc38      	bgt.n	800c0c2 <_strtod_l+0x452>
 800c050:	9b06      	ldr	r3, [sp, #24]
 800c052:	2b00      	cmp	r3, #0
 800c054:	f43f ae50 	beq.w	800bcf8 <_strtod_l+0x88>
 800c058:	dd24      	ble.n	800c0a4 <_strtod_l+0x434>
 800c05a:	2b16      	cmp	r3, #22
 800c05c:	dc0b      	bgt.n	800c076 <_strtod_l+0x406>
 800c05e:	496d      	ldr	r1, [pc, #436]	; (800c214 <_strtod_l+0x5a4>)
 800c060:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c064:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c068:	4652      	mov	r2, sl
 800c06a:	465b      	mov	r3, fp
 800c06c:	f7f4 fac4 	bl	80005f8 <__aeabi_dmul>
 800c070:	4682      	mov	sl, r0
 800c072:	468b      	mov	fp, r1
 800c074:	e640      	b.n	800bcf8 <_strtod_l+0x88>
 800c076:	9a06      	ldr	r2, [sp, #24]
 800c078:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c07c:	4293      	cmp	r3, r2
 800c07e:	db20      	blt.n	800c0c2 <_strtod_l+0x452>
 800c080:	4c64      	ldr	r4, [pc, #400]	; (800c214 <_strtod_l+0x5a4>)
 800c082:	f1c5 050f 	rsb	r5, r5, #15
 800c086:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c08a:	4652      	mov	r2, sl
 800c08c:	465b      	mov	r3, fp
 800c08e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c092:	f7f4 fab1 	bl	80005f8 <__aeabi_dmul>
 800c096:	9b06      	ldr	r3, [sp, #24]
 800c098:	1b5d      	subs	r5, r3, r5
 800c09a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c09e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c0a2:	e7e3      	b.n	800c06c <_strtod_l+0x3fc>
 800c0a4:	9b06      	ldr	r3, [sp, #24]
 800c0a6:	3316      	adds	r3, #22
 800c0a8:	db0b      	blt.n	800c0c2 <_strtod_l+0x452>
 800c0aa:	9b05      	ldr	r3, [sp, #20]
 800c0ac:	1b9e      	subs	r6, r3, r6
 800c0ae:	4b59      	ldr	r3, [pc, #356]	; (800c214 <_strtod_l+0x5a4>)
 800c0b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c0b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c0b8:	4650      	mov	r0, sl
 800c0ba:	4659      	mov	r1, fp
 800c0bc:	f7f4 fbc6 	bl	800084c <__aeabi_ddiv>
 800c0c0:	e7d6      	b.n	800c070 <_strtod_l+0x400>
 800c0c2:	9b06      	ldr	r3, [sp, #24]
 800c0c4:	eba5 0808 	sub.w	r8, r5, r8
 800c0c8:	4498      	add	r8, r3
 800c0ca:	f1b8 0f00 	cmp.w	r8, #0
 800c0ce:	dd74      	ble.n	800c1ba <_strtod_l+0x54a>
 800c0d0:	f018 030f 	ands.w	r3, r8, #15
 800c0d4:	d00a      	beq.n	800c0ec <_strtod_l+0x47c>
 800c0d6:	494f      	ldr	r1, [pc, #316]	; (800c214 <_strtod_l+0x5a4>)
 800c0d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c0dc:	4652      	mov	r2, sl
 800c0de:	465b      	mov	r3, fp
 800c0e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0e4:	f7f4 fa88 	bl	80005f8 <__aeabi_dmul>
 800c0e8:	4682      	mov	sl, r0
 800c0ea:	468b      	mov	fp, r1
 800c0ec:	f038 080f 	bics.w	r8, r8, #15
 800c0f0:	d04f      	beq.n	800c192 <_strtod_l+0x522>
 800c0f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c0f6:	dd22      	ble.n	800c13e <_strtod_l+0x4ce>
 800c0f8:	2500      	movs	r5, #0
 800c0fa:	462e      	mov	r6, r5
 800c0fc:	9507      	str	r5, [sp, #28]
 800c0fe:	9505      	str	r5, [sp, #20]
 800c100:	2322      	movs	r3, #34	; 0x22
 800c102:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c21c <_strtod_l+0x5ac>
 800c106:	6023      	str	r3, [r4, #0]
 800c108:	f04f 0a00 	mov.w	sl, #0
 800c10c:	9b07      	ldr	r3, [sp, #28]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f43f adf2 	beq.w	800bcf8 <_strtod_l+0x88>
 800c114:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c116:	4620      	mov	r0, r4
 800c118:	f002 f9a0 	bl	800e45c <_Bfree>
 800c11c:	9905      	ldr	r1, [sp, #20]
 800c11e:	4620      	mov	r0, r4
 800c120:	f002 f99c 	bl	800e45c <_Bfree>
 800c124:	4631      	mov	r1, r6
 800c126:	4620      	mov	r0, r4
 800c128:	f002 f998 	bl	800e45c <_Bfree>
 800c12c:	9907      	ldr	r1, [sp, #28]
 800c12e:	4620      	mov	r0, r4
 800c130:	f002 f994 	bl	800e45c <_Bfree>
 800c134:	4629      	mov	r1, r5
 800c136:	4620      	mov	r0, r4
 800c138:	f002 f990 	bl	800e45c <_Bfree>
 800c13c:	e5dc      	b.n	800bcf8 <_strtod_l+0x88>
 800c13e:	4b36      	ldr	r3, [pc, #216]	; (800c218 <_strtod_l+0x5a8>)
 800c140:	9304      	str	r3, [sp, #16]
 800c142:	2300      	movs	r3, #0
 800c144:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c148:	4650      	mov	r0, sl
 800c14a:	4659      	mov	r1, fp
 800c14c:	4699      	mov	r9, r3
 800c14e:	f1b8 0f01 	cmp.w	r8, #1
 800c152:	dc21      	bgt.n	800c198 <_strtod_l+0x528>
 800c154:	b10b      	cbz	r3, 800c15a <_strtod_l+0x4ea>
 800c156:	4682      	mov	sl, r0
 800c158:	468b      	mov	fp, r1
 800c15a:	4b2f      	ldr	r3, [pc, #188]	; (800c218 <_strtod_l+0x5a8>)
 800c15c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c160:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c164:	4652      	mov	r2, sl
 800c166:	465b      	mov	r3, fp
 800c168:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c16c:	f7f4 fa44 	bl	80005f8 <__aeabi_dmul>
 800c170:	4b2a      	ldr	r3, [pc, #168]	; (800c21c <_strtod_l+0x5ac>)
 800c172:	460a      	mov	r2, r1
 800c174:	400b      	ands	r3, r1
 800c176:	492a      	ldr	r1, [pc, #168]	; (800c220 <_strtod_l+0x5b0>)
 800c178:	428b      	cmp	r3, r1
 800c17a:	4682      	mov	sl, r0
 800c17c:	d8bc      	bhi.n	800c0f8 <_strtod_l+0x488>
 800c17e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c182:	428b      	cmp	r3, r1
 800c184:	bf86      	itte	hi
 800c186:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c224 <_strtod_l+0x5b4>
 800c18a:	f04f 3aff 	movhi.w	sl, #4294967295
 800c18e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c192:	2300      	movs	r3, #0
 800c194:	9304      	str	r3, [sp, #16]
 800c196:	e084      	b.n	800c2a2 <_strtod_l+0x632>
 800c198:	f018 0f01 	tst.w	r8, #1
 800c19c:	d005      	beq.n	800c1aa <_strtod_l+0x53a>
 800c19e:	9b04      	ldr	r3, [sp, #16]
 800c1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a4:	f7f4 fa28 	bl	80005f8 <__aeabi_dmul>
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	9a04      	ldr	r2, [sp, #16]
 800c1ac:	3208      	adds	r2, #8
 800c1ae:	f109 0901 	add.w	r9, r9, #1
 800c1b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c1b6:	9204      	str	r2, [sp, #16]
 800c1b8:	e7c9      	b.n	800c14e <_strtod_l+0x4de>
 800c1ba:	d0ea      	beq.n	800c192 <_strtod_l+0x522>
 800c1bc:	f1c8 0800 	rsb	r8, r8, #0
 800c1c0:	f018 020f 	ands.w	r2, r8, #15
 800c1c4:	d00a      	beq.n	800c1dc <_strtod_l+0x56c>
 800c1c6:	4b13      	ldr	r3, [pc, #76]	; (800c214 <_strtod_l+0x5a4>)
 800c1c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c1cc:	4650      	mov	r0, sl
 800c1ce:	4659      	mov	r1, fp
 800c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d4:	f7f4 fb3a 	bl	800084c <__aeabi_ddiv>
 800c1d8:	4682      	mov	sl, r0
 800c1da:	468b      	mov	fp, r1
 800c1dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c1e0:	d0d7      	beq.n	800c192 <_strtod_l+0x522>
 800c1e2:	f1b8 0f1f 	cmp.w	r8, #31
 800c1e6:	dd1f      	ble.n	800c228 <_strtod_l+0x5b8>
 800c1e8:	2500      	movs	r5, #0
 800c1ea:	462e      	mov	r6, r5
 800c1ec:	9507      	str	r5, [sp, #28]
 800c1ee:	9505      	str	r5, [sp, #20]
 800c1f0:	2322      	movs	r3, #34	; 0x22
 800c1f2:	f04f 0a00 	mov.w	sl, #0
 800c1f6:	f04f 0b00 	mov.w	fp, #0
 800c1fa:	6023      	str	r3, [r4, #0]
 800c1fc:	e786      	b.n	800c10c <_strtod_l+0x49c>
 800c1fe:	bf00      	nop
 800c200:	0800f9e9 	.word	0x0800f9e9
 800c204:	0800fa9c 	.word	0x0800fa9c
 800c208:	0800f9e1 	.word	0x0800f9e1
 800c20c:	0800fc18 	.word	0x0800fc18
 800c210:	0800fb13 	.word	0x0800fb13
 800c214:	0800fdf0 	.word	0x0800fdf0
 800c218:	0800fdc8 	.word	0x0800fdc8
 800c21c:	7ff00000 	.word	0x7ff00000
 800c220:	7ca00000 	.word	0x7ca00000
 800c224:	7fefffff 	.word	0x7fefffff
 800c228:	f018 0310 	ands.w	r3, r8, #16
 800c22c:	bf18      	it	ne
 800c22e:	236a      	movne	r3, #106	; 0x6a
 800c230:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c5e0 <_strtod_l+0x970>
 800c234:	9304      	str	r3, [sp, #16]
 800c236:	4650      	mov	r0, sl
 800c238:	4659      	mov	r1, fp
 800c23a:	2300      	movs	r3, #0
 800c23c:	f018 0f01 	tst.w	r8, #1
 800c240:	d004      	beq.n	800c24c <_strtod_l+0x5dc>
 800c242:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c246:	f7f4 f9d7 	bl	80005f8 <__aeabi_dmul>
 800c24a:	2301      	movs	r3, #1
 800c24c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c250:	f109 0908 	add.w	r9, r9, #8
 800c254:	d1f2      	bne.n	800c23c <_strtod_l+0x5cc>
 800c256:	b10b      	cbz	r3, 800c25c <_strtod_l+0x5ec>
 800c258:	4682      	mov	sl, r0
 800c25a:	468b      	mov	fp, r1
 800c25c:	9b04      	ldr	r3, [sp, #16]
 800c25e:	b1c3      	cbz	r3, 800c292 <_strtod_l+0x622>
 800c260:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c264:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c268:	2b00      	cmp	r3, #0
 800c26a:	4659      	mov	r1, fp
 800c26c:	dd11      	ble.n	800c292 <_strtod_l+0x622>
 800c26e:	2b1f      	cmp	r3, #31
 800c270:	f340 8124 	ble.w	800c4bc <_strtod_l+0x84c>
 800c274:	2b34      	cmp	r3, #52	; 0x34
 800c276:	bfde      	ittt	le
 800c278:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c27c:	f04f 33ff 	movle.w	r3, #4294967295
 800c280:	fa03 f202 	lslle.w	r2, r3, r2
 800c284:	f04f 0a00 	mov.w	sl, #0
 800c288:	bfcc      	ite	gt
 800c28a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c28e:	ea02 0b01 	andle.w	fp, r2, r1
 800c292:	2200      	movs	r2, #0
 800c294:	2300      	movs	r3, #0
 800c296:	4650      	mov	r0, sl
 800c298:	4659      	mov	r1, fp
 800c29a:	f7f4 fc15 	bl	8000ac8 <__aeabi_dcmpeq>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	d1a2      	bne.n	800c1e8 <_strtod_l+0x578>
 800c2a2:	9b07      	ldr	r3, [sp, #28]
 800c2a4:	9300      	str	r3, [sp, #0]
 800c2a6:	9908      	ldr	r1, [sp, #32]
 800c2a8:	462b      	mov	r3, r5
 800c2aa:	463a      	mov	r2, r7
 800c2ac:	4620      	mov	r0, r4
 800c2ae:	f002 f93d 	bl	800e52c <__s2b>
 800c2b2:	9007      	str	r0, [sp, #28]
 800c2b4:	2800      	cmp	r0, #0
 800c2b6:	f43f af1f 	beq.w	800c0f8 <_strtod_l+0x488>
 800c2ba:	9b05      	ldr	r3, [sp, #20]
 800c2bc:	1b9e      	subs	r6, r3, r6
 800c2be:	9b06      	ldr	r3, [sp, #24]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	bfb4      	ite	lt
 800c2c4:	4633      	movlt	r3, r6
 800c2c6:	2300      	movge	r3, #0
 800c2c8:	930c      	str	r3, [sp, #48]	; 0x30
 800c2ca:	9b06      	ldr	r3, [sp, #24]
 800c2cc:	2500      	movs	r5, #0
 800c2ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c2d2:	9312      	str	r3, [sp, #72]	; 0x48
 800c2d4:	462e      	mov	r6, r5
 800c2d6:	9b07      	ldr	r3, [sp, #28]
 800c2d8:	4620      	mov	r0, r4
 800c2da:	6859      	ldr	r1, [r3, #4]
 800c2dc:	f002 f87e 	bl	800e3dc <_Balloc>
 800c2e0:	9005      	str	r0, [sp, #20]
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	f43f af0c 	beq.w	800c100 <_strtod_l+0x490>
 800c2e8:	9b07      	ldr	r3, [sp, #28]
 800c2ea:	691a      	ldr	r2, [r3, #16]
 800c2ec:	3202      	adds	r2, #2
 800c2ee:	f103 010c 	add.w	r1, r3, #12
 800c2f2:	0092      	lsls	r2, r2, #2
 800c2f4:	300c      	adds	r0, #12
 800c2f6:	f002 f863 	bl	800e3c0 <memcpy>
 800c2fa:	ec4b ab10 	vmov	d0, sl, fp
 800c2fe:	aa1a      	add	r2, sp, #104	; 0x68
 800c300:	a919      	add	r1, sp, #100	; 0x64
 800c302:	4620      	mov	r0, r4
 800c304:	f002 fc58 	bl	800ebb8 <__d2b>
 800c308:	ec4b ab18 	vmov	d8, sl, fp
 800c30c:	9018      	str	r0, [sp, #96]	; 0x60
 800c30e:	2800      	cmp	r0, #0
 800c310:	f43f aef6 	beq.w	800c100 <_strtod_l+0x490>
 800c314:	2101      	movs	r1, #1
 800c316:	4620      	mov	r0, r4
 800c318:	f002 f9a2 	bl	800e660 <__i2b>
 800c31c:	4606      	mov	r6, r0
 800c31e:	2800      	cmp	r0, #0
 800c320:	f43f aeee 	beq.w	800c100 <_strtod_l+0x490>
 800c324:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c326:	9904      	ldr	r1, [sp, #16]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	bfab      	itete	ge
 800c32c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c32e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c330:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c332:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c336:	bfac      	ite	ge
 800c338:	eb03 0902 	addge.w	r9, r3, r2
 800c33c:	1ad7      	sublt	r7, r2, r3
 800c33e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c340:	eba3 0801 	sub.w	r8, r3, r1
 800c344:	4490      	add	r8, r2
 800c346:	4ba1      	ldr	r3, [pc, #644]	; (800c5cc <_strtod_l+0x95c>)
 800c348:	f108 38ff 	add.w	r8, r8, #4294967295
 800c34c:	4598      	cmp	r8, r3
 800c34e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c352:	f280 80c7 	bge.w	800c4e4 <_strtod_l+0x874>
 800c356:	eba3 0308 	sub.w	r3, r3, r8
 800c35a:	2b1f      	cmp	r3, #31
 800c35c:	eba2 0203 	sub.w	r2, r2, r3
 800c360:	f04f 0101 	mov.w	r1, #1
 800c364:	f300 80b1 	bgt.w	800c4ca <_strtod_l+0x85a>
 800c368:	fa01 f303 	lsl.w	r3, r1, r3
 800c36c:	930d      	str	r3, [sp, #52]	; 0x34
 800c36e:	2300      	movs	r3, #0
 800c370:	9308      	str	r3, [sp, #32]
 800c372:	eb09 0802 	add.w	r8, r9, r2
 800c376:	9b04      	ldr	r3, [sp, #16]
 800c378:	45c1      	cmp	r9, r8
 800c37a:	4417      	add	r7, r2
 800c37c:	441f      	add	r7, r3
 800c37e:	464b      	mov	r3, r9
 800c380:	bfa8      	it	ge
 800c382:	4643      	movge	r3, r8
 800c384:	42bb      	cmp	r3, r7
 800c386:	bfa8      	it	ge
 800c388:	463b      	movge	r3, r7
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	bfc2      	ittt	gt
 800c38e:	eba8 0803 	subgt.w	r8, r8, r3
 800c392:	1aff      	subgt	r7, r7, r3
 800c394:	eba9 0903 	subgt.w	r9, r9, r3
 800c398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	dd17      	ble.n	800c3ce <_strtod_l+0x75e>
 800c39e:	4631      	mov	r1, r6
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	4620      	mov	r0, r4
 800c3a4:	f002 fa1c 	bl	800e7e0 <__pow5mult>
 800c3a8:	4606      	mov	r6, r0
 800c3aa:	2800      	cmp	r0, #0
 800c3ac:	f43f aea8 	beq.w	800c100 <_strtod_l+0x490>
 800c3b0:	4601      	mov	r1, r0
 800c3b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	f002 f969 	bl	800e68c <__multiply>
 800c3ba:	900b      	str	r0, [sp, #44]	; 0x2c
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	f43f ae9f 	beq.w	800c100 <_strtod_l+0x490>
 800c3c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f002 f849 	bl	800e45c <_Bfree>
 800c3ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3cc:	9318      	str	r3, [sp, #96]	; 0x60
 800c3ce:	f1b8 0f00 	cmp.w	r8, #0
 800c3d2:	f300 808c 	bgt.w	800c4ee <_strtod_l+0x87e>
 800c3d6:	9b06      	ldr	r3, [sp, #24]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	dd08      	ble.n	800c3ee <_strtod_l+0x77e>
 800c3dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c3de:	9905      	ldr	r1, [sp, #20]
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	f002 f9fd 	bl	800e7e0 <__pow5mult>
 800c3e6:	9005      	str	r0, [sp, #20]
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	f43f ae89 	beq.w	800c100 <_strtod_l+0x490>
 800c3ee:	2f00      	cmp	r7, #0
 800c3f0:	dd08      	ble.n	800c404 <_strtod_l+0x794>
 800c3f2:	9905      	ldr	r1, [sp, #20]
 800c3f4:	463a      	mov	r2, r7
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f002 fa4c 	bl	800e894 <__lshift>
 800c3fc:	9005      	str	r0, [sp, #20]
 800c3fe:	2800      	cmp	r0, #0
 800c400:	f43f ae7e 	beq.w	800c100 <_strtod_l+0x490>
 800c404:	f1b9 0f00 	cmp.w	r9, #0
 800c408:	dd08      	ble.n	800c41c <_strtod_l+0x7ac>
 800c40a:	4631      	mov	r1, r6
 800c40c:	464a      	mov	r2, r9
 800c40e:	4620      	mov	r0, r4
 800c410:	f002 fa40 	bl	800e894 <__lshift>
 800c414:	4606      	mov	r6, r0
 800c416:	2800      	cmp	r0, #0
 800c418:	f43f ae72 	beq.w	800c100 <_strtod_l+0x490>
 800c41c:	9a05      	ldr	r2, [sp, #20]
 800c41e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c420:	4620      	mov	r0, r4
 800c422:	f002 fac3 	bl	800e9ac <__mdiff>
 800c426:	4605      	mov	r5, r0
 800c428:	2800      	cmp	r0, #0
 800c42a:	f43f ae69 	beq.w	800c100 <_strtod_l+0x490>
 800c42e:	68c3      	ldr	r3, [r0, #12]
 800c430:	930b      	str	r3, [sp, #44]	; 0x2c
 800c432:	2300      	movs	r3, #0
 800c434:	60c3      	str	r3, [r0, #12]
 800c436:	4631      	mov	r1, r6
 800c438:	f002 fa9c 	bl	800e974 <__mcmp>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	da60      	bge.n	800c502 <_strtod_l+0x892>
 800c440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c442:	ea53 030a 	orrs.w	r3, r3, sl
 800c446:	f040 8082 	bne.w	800c54e <_strtod_l+0x8de>
 800c44a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d17d      	bne.n	800c54e <_strtod_l+0x8de>
 800c452:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c456:	0d1b      	lsrs	r3, r3, #20
 800c458:	051b      	lsls	r3, r3, #20
 800c45a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c45e:	d976      	bls.n	800c54e <_strtod_l+0x8de>
 800c460:	696b      	ldr	r3, [r5, #20]
 800c462:	b913      	cbnz	r3, 800c46a <_strtod_l+0x7fa>
 800c464:	692b      	ldr	r3, [r5, #16]
 800c466:	2b01      	cmp	r3, #1
 800c468:	dd71      	ble.n	800c54e <_strtod_l+0x8de>
 800c46a:	4629      	mov	r1, r5
 800c46c:	2201      	movs	r2, #1
 800c46e:	4620      	mov	r0, r4
 800c470:	f002 fa10 	bl	800e894 <__lshift>
 800c474:	4631      	mov	r1, r6
 800c476:	4605      	mov	r5, r0
 800c478:	f002 fa7c 	bl	800e974 <__mcmp>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	dd66      	ble.n	800c54e <_strtod_l+0x8de>
 800c480:	9904      	ldr	r1, [sp, #16]
 800c482:	4a53      	ldr	r2, [pc, #332]	; (800c5d0 <_strtod_l+0x960>)
 800c484:	465b      	mov	r3, fp
 800c486:	2900      	cmp	r1, #0
 800c488:	f000 8081 	beq.w	800c58e <_strtod_l+0x91e>
 800c48c:	ea02 010b 	and.w	r1, r2, fp
 800c490:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c494:	dc7b      	bgt.n	800c58e <_strtod_l+0x91e>
 800c496:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c49a:	f77f aea9 	ble.w	800c1f0 <_strtod_l+0x580>
 800c49e:	4b4d      	ldr	r3, [pc, #308]	; (800c5d4 <_strtod_l+0x964>)
 800c4a0:	4650      	mov	r0, sl
 800c4a2:	4659      	mov	r1, fp
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	f7f4 f8a7 	bl	80005f8 <__aeabi_dmul>
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	4303      	orrs	r3, r0
 800c4ae:	bf08      	it	eq
 800c4b0:	2322      	moveq	r3, #34	; 0x22
 800c4b2:	4682      	mov	sl, r0
 800c4b4:	468b      	mov	fp, r1
 800c4b6:	bf08      	it	eq
 800c4b8:	6023      	streq	r3, [r4, #0]
 800c4ba:	e62b      	b.n	800c114 <_strtod_l+0x4a4>
 800c4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c4c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c4c4:	ea03 0a0a 	and.w	sl, r3, sl
 800c4c8:	e6e3      	b.n	800c292 <_strtod_l+0x622>
 800c4ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c4ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c4d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c4d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c4da:	fa01 f308 	lsl.w	r3, r1, r8
 800c4de:	9308      	str	r3, [sp, #32]
 800c4e0:	910d      	str	r1, [sp, #52]	; 0x34
 800c4e2:	e746      	b.n	800c372 <_strtod_l+0x702>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	9308      	str	r3, [sp, #32]
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	930d      	str	r3, [sp, #52]	; 0x34
 800c4ec:	e741      	b.n	800c372 <_strtod_l+0x702>
 800c4ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c4f0:	4642      	mov	r2, r8
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f002 f9ce 	bl	800e894 <__lshift>
 800c4f8:	9018      	str	r0, [sp, #96]	; 0x60
 800c4fa:	2800      	cmp	r0, #0
 800c4fc:	f47f af6b 	bne.w	800c3d6 <_strtod_l+0x766>
 800c500:	e5fe      	b.n	800c100 <_strtod_l+0x490>
 800c502:	465f      	mov	r7, fp
 800c504:	d16e      	bne.n	800c5e4 <_strtod_l+0x974>
 800c506:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c508:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c50c:	b342      	cbz	r2, 800c560 <_strtod_l+0x8f0>
 800c50e:	4a32      	ldr	r2, [pc, #200]	; (800c5d8 <_strtod_l+0x968>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d128      	bne.n	800c566 <_strtod_l+0x8f6>
 800c514:	9b04      	ldr	r3, [sp, #16]
 800c516:	4651      	mov	r1, sl
 800c518:	b1eb      	cbz	r3, 800c556 <_strtod_l+0x8e6>
 800c51a:	4b2d      	ldr	r3, [pc, #180]	; (800c5d0 <_strtod_l+0x960>)
 800c51c:	403b      	ands	r3, r7
 800c51e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c522:	f04f 32ff 	mov.w	r2, #4294967295
 800c526:	d819      	bhi.n	800c55c <_strtod_l+0x8ec>
 800c528:	0d1b      	lsrs	r3, r3, #20
 800c52a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c52e:	fa02 f303 	lsl.w	r3, r2, r3
 800c532:	4299      	cmp	r1, r3
 800c534:	d117      	bne.n	800c566 <_strtod_l+0x8f6>
 800c536:	4b29      	ldr	r3, [pc, #164]	; (800c5dc <_strtod_l+0x96c>)
 800c538:	429f      	cmp	r7, r3
 800c53a:	d102      	bne.n	800c542 <_strtod_l+0x8d2>
 800c53c:	3101      	adds	r1, #1
 800c53e:	f43f addf 	beq.w	800c100 <_strtod_l+0x490>
 800c542:	4b23      	ldr	r3, [pc, #140]	; (800c5d0 <_strtod_l+0x960>)
 800c544:	403b      	ands	r3, r7
 800c546:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c54a:	f04f 0a00 	mov.w	sl, #0
 800c54e:	9b04      	ldr	r3, [sp, #16]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d1a4      	bne.n	800c49e <_strtod_l+0x82e>
 800c554:	e5de      	b.n	800c114 <_strtod_l+0x4a4>
 800c556:	f04f 33ff 	mov.w	r3, #4294967295
 800c55a:	e7ea      	b.n	800c532 <_strtod_l+0x8c2>
 800c55c:	4613      	mov	r3, r2
 800c55e:	e7e8      	b.n	800c532 <_strtod_l+0x8c2>
 800c560:	ea53 030a 	orrs.w	r3, r3, sl
 800c564:	d08c      	beq.n	800c480 <_strtod_l+0x810>
 800c566:	9b08      	ldr	r3, [sp, #32]
 800c568:	b1db      	cbz	r3, 800c5a2 <_strtod_l+0x932>
 800c56a:	423b      	tst	r3, r7
 800c56c:	d0ef      	beq.n	800c54e <_strtod_l+0x8de>
 800c56e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c570:	9a04      	ldr	r2, [sp, #16]
 800c572:	4650      	mov	r0, sl
 800c574:	4659      	mov	r1, fp
 800c576:	b1c3      	cbz	r3, 800c5aa <_strtod_l+0x93a>
 800c578:	f7ff fb5e 	bl	800bc38 <sulp>
 800c57c:	4602      	mov	r2, r0
 800c57e:	460b      	mov	r3, r1
 800c580:	ec51 0b18 	vmov	r0, r1, d8
 800c584:	f7f3 fe82 	bl	800028c <__adddf3>
 800c588:	4682      	mov	sl, r0
 800c58a:	468b      	mov	fp, r1
 800c58c:	e7df      	b.n	800c54e <_strtod_l+0x8de>
 800c58e:	4013      	ands	r3, r2
 800c590:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c594:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c598:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c59c:	f04f 3aff 	mov.w	sl, #4294967295
 800c5a0:	e7d5      	b.n	800c54e <_strtod_l+0x8de>
 800c5a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5a4:	ea13 0f0a 	tst.w	r3, sl
 800c5a8:	e7e0      	b.n	800c56c <_strtod_l+0x8fc>
 800c5aa:	f7ff fb45 	bl	800bc38 <sulp>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	ec51 0b18 	vmov	r0, r1, d8
 800c5b6:	f7f3 fe67 	bl	8000288 <__aeabi_dsub>
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	2300      	movs	r3, #0
 800c5be:	4682      	mov	sl, r0
 800c5c0:	468b      	mov	fp, r1
 800c5c2:	f7f4 fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5c6:	2800      	cmp	r0, #0
 800c5c8:	d0c1      	beq.n	800c54e <_strtod_l+0x8de>
 800c5ca:	e611      	b.n	800c1f0 <_strtod_l+0x580>
 800c5cc:	fffffc02 	.word	0xfffffc02
 800c5d0:	7ff00000 	.word	0x7ff00000
 800c5d4:	39500000 	.word	0x39500000
 800c5d8:	000fffff 	.word	0x000fffff
 800c5dc:	7fefffff 	.word	0x7fefffff
 800c5e0:	0800fab0 	.word	0x0800fab0
 800c5e4:	4631      	mov	r1, r6
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	f002 fb42 	bl	800ec70 <__ratio>
 800c5ec:	ec59 8b10 	vmov	r8, r9, d0
 800c5f0:	ee10 0a10 	vmov	r0, s0
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c5fa:	4649      	mov	r1, r9
 800c5fc:	f7f4 fa78 	bl	8000af0 <__aeabi_dcmple>
 800c600:	2800      	cmp	r0, #0
 800c602:	d07a      	beq.n	800c6fa <_strtod_l+0xa8a>
 800c604:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c606:	2b00      	cmp	r3, #0
 800c608:	d04a      	beq.n	800c6a0 <_strtod_l+0xa30>
 800c60a:	4b95      	ldr	r3, [pc, #596]	; (800c860 <_strtod_l+0xbf0>)
 800c60c:	2200      	movs	r2, #0
 800c60e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c612:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c860 <_strtod_l+0xbf0>
 800c616:	f04f 0800 	mov.w	r8, #0
 800c61a:	4b92      	ldr	r3, [pc, #584]	; (800c864 <_strtod_l+0xbf4>)
 800c61c:	403b      	ands	r3, r7
 800c61e:	930d      	str	r3, [sp, #52]	; 0x34
 800c620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c622:	4b91      	ldr	r3, [pc, #580]	; (800c868 <_strtod_l+0xbf8>)
 800c624:	429a      	cmp	r2, r3
 800c626:	f040 80b0 	bne.w	800c78a <_strtod_l+0xb1a>
 800c62a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c62e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c632:	ec4b ab10 	vmov	d0, sl, fp
 800c636:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c63a:	f002 fa41 	bl	800eac0 <__ulp>
 800c63e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c642:	ec53 2b10 	vmov	r2, r3, d0
 800c646:	f7f3 ffd7 	bl	80005f8 <__aeabi_dmul>
 800c64a:	4652      	mov	r2, sl
 800c64c:	465b      	mov	r3, fp
 800c64e:	f7f3 fe1d 	bl	800028c <__adddf3>
 800c652:	460b      	mov	r3, r1
 800c654:	4983      	ldr	r1, [pc, #524]	; (800c864 <_strtod_l+0xbf4>)
 800c656:	4a85      	ldr	r2, [pc, #532]	; (800c86c <_strtod_l+0xbfc>)
 800c658:	4019      	ands	r1, r3
 800c65a:	4291      	cmp	r1, r2
 800c65c:	4682      	mov	sl, r0
 800c65e:	d960      	bls.n	800c722 <_strtod_l+0xab2>
 800c660:	ee18 3a90 	vmov	r3, s17
 800c664:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c668:	4293      	cmp	r3, r2
 800c66a:	d104      	bne.n	800c676 <_strtod_l+0xa06>
 800c66c:	ee18 3a10 	vmov	r3, s16
 800c670:	3301      	adds	r3, #1
 800c672:	f43f ad45 	beq.w	800c100 <_strtod_l+0x490>
 800c676:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c878 <_strtod_l+0xc08>
 800c67a:	f04f 3aff 	mov.w	sl, #4294967295
 800c67e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c680:	4620      	mov	r0, r4
 800c682:	f001 feeb 	bl	800e45c <_Bfree>
 800c686:	9905      	ldr	r1, [sp, #20]
 800c688:	4620      	mov	r0, r4
 800c68a:	f001 fee7 	bl	800e45c <_Bfree>
 800c68e:	4631      	mov	r1, r6
 800c690:	4620      	mov	r0, r4
 800c692:	f001 fee3 	bl	800e45c <_Bfree>
 800c696:	4629      	mov	r1, r5
 800c698:	4620      	mov	r0, r4
 800c69a:	f001 fedf 	bl	800e45c <_Bfree>
 800c69e:	e61a      	b.n	800c2d6 <_strtod_l+0x666>
 800c6a0:	f1ba 0f00 	cmp.w	sl, #0
 800c6a4:	d11b      	bne.n	800c6de <_strtod_l+0xa6e>
 800c6a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c6aa:	b9f3      	cbnz	r3, 800c6ea <_strtod_l+0xa7a>
 800c6ac:	4b6c      	ldr	r3, [pc, #432]	; (800c860 <_strtod_l+0xbf0>)
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	4640      	mov	r0, r8
 800c6b2:	4649      	mov	r1, r9
 800c6b4:	f7f4 fa12 	bl	8000adc <__aeabi_dcmplt>
 800c6b8:	b9d0      	cbnz	r0, 800c6f0 <_strtod_l+0xa80>
 800c6ba:	4640      	mov	r0, r8
 800c6bc:	4649      	mov	r1, r9
 800c6be:	4b6c      	ldr	r3, [pc, #432]	; (800c870 <_strtod_l+0xc00>)
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f7f3 ff99 	bl	80005f8 <__aeabi_dmul>
 800c6c6:	4680      	mov	r8, r0
 800c6c8:	4689      	mov	r9, r1
 800c6ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c6ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c6d2:	9315      	str	r3, [sp, #84]	; 0x54
 800c6d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c6d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c6dc:	e79d      	b.n	800c61a <_strtod_l+0x9aa>
 800c6de:	f1ba 0f01 	cmp.w	sl, #1
 800c6e2:	d102      	bne.n	800c6ea <_strtod_l+0xa7a>
 800c6e4:	2f00      	cmp	r7, #0
 800c6e6:	f43f ad83 	beq.w	800c1f0 <_strtod_l+0x580>
 800c6ea:	4b62      	ldr	r3, [pc, #392]	; (800c874 <_strtod_l+0xc04>)
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	e78e      	b.n	800c60e <_strtod_l+0x99e>
 800c6f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c870 <_strtod_l+0xc00>
 800c6f4:	f04f 0800 	mov.w	r8, #0
 800c6f8:	e7e7      	b.n	800c6ca <_strtod_l+0xa5a>
 800c6fa:	4b5d      	ldr	r3, [pc, #372]	; (800c870 <_strtod_l+0xc00>)
 800c6fc:	4640      	mov	r0, r8
 800c6fe:	4649      	mov	r1, r9
 800c700:	2200      	movs	r2, #0
 800c702:	f7f3 ff79 	bl	80005f8 <__aeabi_dmul>
 800c706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c708:	4680      	mov	r8, r0
 800c70a:	4689      	mov	r9, r1
 800c70c:	b933      	cbnz	r3, 800c71c <_strtod_l+0xaac>
 800c70e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c712:	900e      	str	r0, [sp, #56]	; 0x38
 800c714:	930f      	str	r3, [sp, #60]	; 0x3c
 800c716:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c71a:	e7dd      	b.n	800c6d8 <_strtod_l+0xa68>
 800c71c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c720:	e7f9      	b.n	800c716 <_strtod_l+0xaa6>
 800c722:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c726:	9b04      	ldr	r3, [sp, #16]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1a8      	bne.n	800c67e <_strtod_l+0xa0e>
 800c72c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c730:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c732:	0d1b      	lsrs	r3, r3, #20
 800c734:	051b      	lsls	r3, r3, #20
 800c736:	429a      	cmp	r2, r3
 800c738:	d1a1      	bne.n	800c67e <_strtod_l+0xa0e>
 800c73a:	4640      	mov	r0, r8
 800c73c:	4649      	mov	r1, r9
 800c73e:	f7f4 fabb 	bl	8000cb8 <__aeabi_d2lz>
 800c742:	f7f3 ff2b 	bl	800059c <__aeabi_l2d>
 800c746:	4602      	mov	r2, r0
 800c748:	460b      	mov	r3, r1
 800c74a:	4640      	mov	r0, r8
 800c74c:	4649      	mov	r1, r9
 800c74e:	f7f3 fd9b 	bl	8000288 <__aeabi_dsub>
 800c752:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c754:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c758:	ea43 030a 	orr.w	r3, r3, sl
 800c75c:	4313      	orrs	r3, r2
 800c75e:	4680      	mov	r8, r0
 800c760:	4689      	mov	r9, r1
 800c762:	d055      	beq.n	800c810 <_strtod_l+0xba0>
 800c764:	a336      	add	r3, pc, #216	; (adr r3, 800c840 <_strtod_l+0xbd0>)
 800c766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76a:	f7f4 f9b7 	bl	8000adc <__aeabi_dcmplt>
 800c76e:	2800      	cmp	r0, #0
 800c770:	f47f acd0 	bne.w	800c114 <_strtod_l+0x4a4>
 800c774:	a334      	add	r3, pc, #208	; (adr r3, 800c848 <_strtod_l+0xbd8>)
 800c776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77a:	4640      	mov	r0, r8
 800c77c:	4649      	mov	r1, r9
 800c77e:	f7f4 f9cb 	bl	8000b18 <__aeabi_dcmpgt>
 800c782:	2800      	cmp	r0, #0
 800c784:	f43f af7b 	beq.w	800c67e <_strtod_l+0xa0e>
 800c788:	e4c4      	b.n	800c114 <_strtod_l+0x4a4>
 800c78a:	9b04      	ldr	r3, [sp, #16]
 800c78c:	b333      	cbz	r3, 800c7dc <_strtod_l+0xb6c>
 800c78e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c790:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c794:	d822      	bhi.n	800c7dc <_strtod_l+0xb6c>
 800c796:	a32e      	add	r3, pc, #184	; (adr r3, 800c850 <_strtod_l+0xbe0>)
 800c798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79c:	4640      	mov	r0, r8
 800c79e:	4649      	mov	r1, r9
 800c7a0:	f7f4 f9a6 	bl	8000af0 <__aeabi_dcmple>
 800c7a4:	b1a0      	cbz	r0, 800c7d0 <_strtod_l+0xb60>
 800c7a6:	4649      	mov	r1, r9
 800c7a8:	4640      	mov	r0, r8
 800c7aa:	f7f4 f9fd 	bl	8000ba8 <__aeabi_d2uiz>
 800c7ae:	2801      	cmp	r0, #1
 800c7b0:	bf38      	it	cc
 800c7b2:	2001      	movcc	r0, #1
 800c7b4:	f7f3 fea6 	bl	8000504 <__aeabi_ui2d>
 800c7b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7ba:	4680      	mov	r8, r0
 800c7bc:	4689      	mov	r9, r1
 800c7be:	bb23      	cbnz	r3, 800c80a <_strtod_l+0xb9a>
 800c7c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7c4:	9010      	str	r0, [sp, #64]	; 0x40
 800c7c6:	9311      	str	r3, [sp, #68]	; 0x44
 800c7c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c7cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c7d4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c7d8:	1a9b      	subs	r3, r3, r2
 800c7da:	9309      	str	r3, [sp, #36]	; 0x24
 800c7dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c7e0:	eeb0 0a48 	vmov.f32	s0, s16
 800c7e4:	eef0 0a68 	vmov.f32	s1, s17
 800c7e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c7ec:	f002 f968 	bl	800eac0 <__ulp>
 800c7f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c7f4:	ec53 2b10 	vmov	r2, r3, d0
 800c7f8:	f7f3 fefe 	bl	80005f8 <__aeabi_dmul>
 800c7fc:	ec53 2b18 	vmov	r2, r3, d8
 800c800:	f7f3 fd44 	bl	800028c <__adddf3>
 800c804:	4682      	mov	sl, r0
 800c806:	468b      	mov	fp, r1
 800c808:	e78d      	b.n	800c726 <_strtod_l+0xab6>
 800c80a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c80e:	e7db      	b.n	800c7c8 <_strtod_l+0xb58>
 800c810:	a311      	add	r3, pc, #68	; (adr r3, 800c858 <_strtod_l+0xbe8>)
 800c812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c816:	f7f4 f961 	bl	8000adc <__aeabi_dcmplt>
 800c81a:	e7b2      	b.n	800c782 <_strtod_l+0xb12>
 800c81c:	2300      	movs	r3, #0
 800c81e:	930a      	str	r3, [sp, #40]	; 0x28
 800c820:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c822:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c824:	6013      	str	r3, [r2, #0]
 800c826:	f7ff ba6b 	b.w	800bd00 <_strtod_l+0x90>
 800c82a:	2a65      	cmp	r2, #101	; 0x65
 800c82c:	f43f ab5f 	beq.w	800beee <_strtod_l+0x27e>
 800c830:	2a45      	cmp	r2, #69	; 0x45
 800c832:	f43f ab5c 	beq.w	800beee <_strtod_l+0x27e>
 800c836:	2301      	movs	r3, #1
 800c838:	f7ff bb94 	b.w	800bf64 <_strtod_l+0x2f4>
 800c83c:	f3af 8000 	nop.w
 800c840:	94a03595 	.word	0x94a03595
 800c844:	3fdfffff 	.word	0x3fdfffff
 800c848:	35afe535 	.word	0x35afe535
 800c84c:	3fe00000 	.word	0x3fe00000
 800c850:	ffc00000 	.word	0xffc00000
 800c854:	41dfffff 	.word	0x41dfffff
 800c858:	94a03595 	.word	0x94a03595
 800c85c:	3fcfffff 	.word	0x3fcfffff
 800c860:	3ff00000 	.word	0x3ff00000
 800c864:	7ff00000 	.word	0x7ff00000
 800c868:	7fe00000 	.word	0x7fe00000
 800c86c:	7c9fffff 	.word	0x7c9fffff
 800c870:	3fe00000 	.word	0x3fe00000
 800c874:	bff00000 	.word	0xbff00000
 800c878:	7fefffff 	.word	0x7fefffff

0800c87c <_strtod_r>:
 800c87c:	4b01      	ldr	r3, [pc, #4]	; (800c884 <_strtod_r+0x8>)
 800c87e:	f7ff b9f7 	b.w	800bc70 <_strtod_l>
 800c882:	bf00      	nop
 800c884:	20000098 	.word	0x20000098

0800c888 <_strtol_l.constprop.0>:
 800c888:	2b01      	cmp	r3, #1
 800c88a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c88e:	d001      	beq.n	800c894 <_strtol_l.constprop.0+0xc>
 800c890:	2b24      	cmp	r3, #36	; 0x24
 800c892:	d906      	bls.n	800c8a2 <_strtol_l.constprop.0+0x1a>
 800c894:	f7fe fa4a 	bl	800ad2c <__errno>
 800c898:	2316      	movs	r3, #22
 800c89a:	6003      	str	r3, [r0, #0]
 800c89c:	2000      	movs	r0, #0
 800c89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c988 <_strtol_l.constprop.0+0x100>
 800c8a6:	460d      	mov	r5, r1
 800c8a8:	462e      	mov	r6, r5
 800c8aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8ae:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c8b2:	f017 0708 	ands.w	r7, r7, #8
 800c8b6:	d1f7      	bne.n	800c8a8 <_strtol_l.constprop.0+0x20>
 800c8b8:	2c2d      	cmp	r4, #45	; 0x2d
 800c8ba:	d132      	bne.n	800c922 <_strtol_l.constprop.0+0x9a>
 800c8bc:	782c      	ldrb	r4, [r5, #0]
 800c8be:	2701      	movs	r7, #1
 800c8c0:	1cb5      	adds	r5, r6, #2
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d05b      	beq.n	800c97e <_strtol_l.constprop.0+0xf6>
 800c8c6:	2b10      	cmp	r3, #16
 800c8c8:	d109      	bne.n	800c8de <_strtol_l.constprop.0+0x56>
 800c8ca:	2c30      	cmp	r4, #48	; 0x30
 800c8cc:	d107      	bne.n	800c8de <_strtol_l.constprop.0+0x56>
 800c8ce:	782c      	ldrb	r4, [r5, #0]
 800c8d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c8d4:	2c58      	cmp	r4, #88	; 0x58
 800c8d6:	d14d      	bne.n	800c974 <_strtol_l.constprop.0+0xec>
 800c8d8:	786c      	ldrb	r4, [r5, #1]
 800c8da:	2310      	movs	r3, #16
 800c8dc:	3502      	adds	r5, #2
 800c8de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c8e2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8e6:	f04f 0c00 	mov.w	ip, #0
 800c8ea:	fbb8 f9f3 	udiv	r9, r8, r3
 800c8ee:	4666      	mov	r6, ip
 800c8f0:	fb03 8a19 	mls	sl, r3, r9, r8
 800c8f4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c8f8:	f1be 0f09 	cmp.w	lr, #9
 800c8fc:	d816      	bhi.n	800c92c <_strtol_l.constprop.0+0xa4>
 800c8fe:	4674      	mov	r4, lr
 800c900:	42a3      	cmp	r3, r4
 800c902:	dd24      	ble.n	800c94e <_strtol_l.constprop.0+0xc6>
 800c904:	f1bc 0f00 	cmp.w	ip, #0
 800c908:	db1e      	blt.n	800c948 <_strtol_l.constprop.0+0xc0>
 800c90a:	45b1      	cmp	r9, r6
 800c90c:	d31c      	bcc.n	800c948 <_strtol_l.constprop.0+0xc0>
 800c90e:	d101      	bne.n	800c914 <_strtol_l.constprop.0+0x8c>
 800c910:	45a2      	cmp	sl, r4
 800c912:	db19      	blt.n	800c948 <_strtol_l.constprop.0+0xc0>
 800c914:	fb06 4603 	mla	r6, r6, r3, r4
 800c918:	f04f 0c01 	mov.w	ip, #1
 800c91c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c920:	e7e8      	b.n	800c8f4 <_strtol_l.constprop.0+0x6c>
 800c922:	2c2b      	cmp	r4, #43	; 0x2b
 800c924:	bf04      	itt	eq
 800c926:	782c      	ldrbeq	r4, [r5, #0]
 800c928:	1cb5      	addeq	r5, r6, #2
 800c92a:	e7ca      	b.n	800c8c2 <_strtol_l.constprop.0+0x3a>
 800c92c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c930:	f1be 0f19 	cmp.w	lr, #25
 800c934:	d801      	bhi.n	800c93a <_strtol_l.constprop.0+0xb2>
 800c936:	3c37      	subs	r4, #55	; 0x37
 800c938:	e7e2      	b.n	800c900 <_strtol_l.constprop.0+0x78>
 800c93a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c93e:	f1be 0f19 	cmp.w	lr, #25
 800c942:	d804      	bhi.n	800c94e <_strtol_l.constprop.0+0xc6>
 800c944:	3c57      	subs	r4, #87	; 0x57
 800c946:	e7db      	b.n	800c900 <_strtol_l.constprop.0+0x78>
 800c948:	f04f 3cff 	mov.w	ip, #4294967295
 800c94c:	e7e6      	b.n	800c91c <_strtol_l.constprop.0+0x94>
 800c94e:	f1bc 0f00 	cmp.w	ip, #0
 800c952:	da05      	bge.n	800c960 <_strtol_l.constprop.0+0xd8>
 800c954:	2322      	movs	r3, #34	; 0x22
 800c956:	6003      	str	r3, [r0, #0]
 800c958:	4646      	mov	r6, r8
 800c95a:	b942      	cbnz	r2, 800c96e <_strtol_l.constprop.0+0xe6>
 800c95c:	4630      	mov	r0, r6
 800c95e:	e79e      	b.n	800c89e <_strtol_l.constprop.0+0x16>
 800c960:	b107      	cbz	r7, 800c964 <_strtol_l.constprop.0+0xdc>
 800c962:	4276      	negs	r6, r6
 800c964:	2a00      	cmp	r2, #0
 800c966:	d0f9      	beq.n	800c95c <_strtol_l.constprop.0+0xd4>
 800c968:	f1bc 0f00 	cmp.w	ip, #0
 800c96c:	d000      	beq.n	800c970 <_strtol_l.constprop.0+0xe8>
 800c96e:	1e69      	subs	r1, r5, #1
 800c970:	6011      	str	r1, [r2, #0]
 800c972:	e7f3      	b.n	800c95c <_strtol_l.constprop.0+0xd4>
 800c974:	2430      	movs	r4, #48	; 0x30
 800c976:	2b00      	cmp	r3, #0
 800c978:	d1b1      	bne.n	800c8de <_strtol_l.constprop.0+0x56>
 800c97a:	2308      	movs	r3, #8
 800c97c:	e7af      	b.n	800c8de <_strtol_l.constprop.0+0x56>
 800c97e:	2c30      	cmp	r4, #48	; 0x30
 800c980:	d0a5      	beq.n	800c8ce <_strtol_l.constprop.0+0x46>
 800c982:	230a      	movs	r3, #10
 800c984:	e7ab      	b.n	800c8de <_strtol_l.constprop.0+0x56>
 800c986:	bf00      	nop
 800c988:	0800fb15 	.word	0x0800fb15

0800c98c <_strtol_r>:
 800c98c:	f7ff bf7c 	b.w	800c888 <_strtol_l.constprop.0>

0800c990 <__swbuf_r>:
 800c990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c992:	460e      	mov	r6, r1
 800c994:	4614      	mov	r4, r2
 800c996:	4605      	mov	r5, r0
 800c998:	b118      	cbz	r0, 800c9a2 <__swbuf_r+0x12>
 800c99a:	6983      	ldr	r3, [r0, #24]
 800c99c:	b90b      	cbnz	r3, 800c9a2 <__swbuf_r+0x12>
 800c99e:	f001 f86b 	bl	800da78 <__sinit>
 800c9a2:	4b21      	ldr	r3, [pc, #132]	; (800ca28 <__swbuf_r+0x98>)
 800c9a4:	429c      	cmp	r4, r3
 800c9a6:	d12b      	bne.n	800ca00 <__swbuf_r+0x70>
 800c9a8:	686c      	ldr	r4, [r5, #4]
 800c9aa:	69a3      	ldr	r3, [r4, #24]
 800c9ac:	60a3      	str	r3, [r4, #8]
 800c9ae:	89a3      	ldrh	r3, [r4, #12]
 800c9b0:	071a      	lsls	r2, r3, #28
 800c9b2:	d52f      	bpl.n	800ca14 <__swbuf_r+0x84>
 800c9b4:	6923      	ldr	r3, [r4, #16]
 800c9b6:	b36b      	cbz	r3, 800ca14 <__swbuf_r+0x84>
 800c9b8:	6923      	ldr	r3, [r4, #16]
 800c9ba:	6820      	ldr	r0, [r4, #0]
 800c9bc:	1ac0      	subs	r0, r0, r3
 800c9be:	6963      	ldr	r3, [r4, #20]
 800c9c0:	b2f6      	uxtb	r6, r6
 800c9c2:	4283      	cmp	r3, r0
 800c9c4:	4637      	mov	r7, r6
 800c9c6:	dc04      	bgt.n	800c9d2 <__swbuf_r+0x42>
 800c9c8:	4621      	mov	r1, r4
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	f000 ffc0 	bl	800d950 <_fflush_r>
 800c9d0:	bb30      	cbnz	r0, 800ca20 <__swbuf_r+0x90>
 800c9d2:	68a3      	ldr	r3, [r4, #8]
 800c9d4:	3b01      	subs	r3, #1
 800c9d6:	60a3      	str	r3, [r4, #8]
 800c9d8:	6823      	ldr	r3, [r4, #0]
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	6022      	str	r2, [r4, #0]
 800c9de:	701e      	strb	r6, [r3, #0]
 800c9e0:	6963      	ldr	r3, [r4, #20]
 800c9e2:	3001      	adds	r0, #1
 800c9e4:	4283      	cmp	r3, r0
 800c9e6:	d004      	beq.n	800c9f2 <__swbuf_r+0x62>
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	07db      	lsls	r3, r3, #31
 800c9ec:	d506      	bpl.n	800c9fc <__swbuf_r+0x6c>
 800c9ee:	2e0a      	cmp	r6, #10
 800c9f0:	d104      	bne.n	800c9fc <__swbuf_r+0x6c>
 800c9f2:	4621      	mov	r1, r4
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	f000 ffab 	bl	800d950 <_fflush_r>
 800c9fa:	b988      	cbnz	r0, 800ca20 <__swbuf_r+0x90>
 800c9fc:	4638      	mov	r0, r7
 800c9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca00:	4b0a      	ldr	r3, [pc, #40]	; (800ca2c <__swbuf_r+0x9c>)
 800ca02:	429c      	cmp	r4, r3
 800ca04:	d101      	bne.n	800ca0a <__swbuf_r+0x7a>
 800ca06:	68ac      	ldr	r4, [r5, #8]
 800ca08:	e7cf      	b.n	800c9aa <__swbuf_r+0x1a>
 800ca0a:	4b09      	ldr	r3, [pc, #36]	; (800ca30 <__swbuf_r+0xa0>)
 800ca0c:	429c      	cmp	r4, r3
 800ca0e:	bf08      	it	eq
 800ca10:	68ec      	ldreq	r4, [r5, #12]
 800ca12:	e7ca      	b.n	800c9aa <__swbuf_r+0x1a>
 800ca14:	4621      	mov	r1, r4
 800ca16:	4628      	mov	r0, r5
 800ca18:	f000 f80c 	bl	800ca34 <__swsetup_r>
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d0cb      	beq.n	800c9b8 <__swbuf_r+0x28>
 800ca20:	f04f 37ff 	mov.w	r7, #4294967295
 800ca24:	e7ea      	b.n	800c9fc <__swbuf_r+0x6c>
 800ca26:	bf00      	nop
 800ca28:	0800fcb0 	.word	0x0800fcb0
 800ca2c:	0800fcd0 	.word	0x0800fcd0
 800ca30:	0800fc90 	.word	0x0800fc90

0800ca34 <__swsetup_r>:
 800ca34:	4b32      	ldr	r3, [pc, #200]	; (800cb00 <__swsetup_r+0xcc>)
 800ca36:	b570      	push	{r4, r5, r6, lr}
 800ca38:	681d      	ldr	r5, [r3, #0]
 800ca3a:	4606      	mov	r6, r0
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	b125      	cbz	r5, 800ca4a <__swsetup_r+0x16>
 800ca40:	69ab      	ldr	r3, [r5, #24]
 800ca42:	b913      	cbnz	r3, 800ca4a <__swsetup_r+0x16>
 800ca44:	4628      	mov	r0, r5
 800ca46:	f001 f817 	bl	800da78 <__sinit>
 800ca4a:	4b2e      	ldr	r3, [pc, #184]	; (800cb04 <__swsetup_r+0xd0>)
 800ca4c:	429c      	cmp	r4, r3
 800ca4e:	d10f      	bne.n	800ca70 <__swsetup_r+0x3c>
 800ca50:	686c      	ldr	r4, [r5, #4]
 800ca52:	89a3      	ldrh	r3, [r4, #12]
 800ca54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca58:	0719      	lsls	r1, r3, #28
 800ca5a:	d42c      	bmi.n	800cab6 <__swsetup_r+0x82>
 800ca5c:	06dd      	lsls	r5, r3, #27
 800ca5e:	d411      	bmi.n	800ca84 <__swsetup_r+0x50>
 800ca60:	2309      	movs	r3, #9
 800ca62:	6033      	str	r3, [r6, #0]
 800ca64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca68:	81a3      	strh	r3, [r4, #12]
 800ca6a:	f04f 30ff 	mov.w	r0, #4294967295
 800ca6e:	e03e      	b.n	800caee <__swsetup_r+0xba>
 800ca70:	4b25      	ldr	r3, [pc, #148]	; (800cb08 <__swsetup_r+0xd4>)
 800ca72:	429c      	cmp	r4, r3
 800ca74:	d101      	bne.n	800ca7a <__swsetup_r+0x46>
 800ca76:	68ac      	ldr	r4, [r5, #8]
 800ca78:	e7eb      	b.n	800ca52 <__swsetup_r+0x1e>
 800ca7a:	4b24      	ldr	r3, [pc, #144]	; (800cb0c <__swsetup_r+0xd8>)
 800ca7c:	429c      	cmp	r4, r3
 800ca7e:	bf08      	it	eq
 800ca80:	68ec      	ldreq	r4, [r5, #12]
 800ca82:	e7e6      	b.n	800ca52 <__swsetup_r+0x1e>
 800ca84:	0758      	lsls	r0, r3, #29
 800ca86:	d512      	bpl.n	800caae <__swsetup_r+0x7a>
 800ca88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca8a:	b141      	cbz	r1, 800ca9e <__swsetup_r+0x6a>
 800ca8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca90:	4299      	cmp	r1, r3
 800ca92:	d002      	beq.n	800ca9a <__swsetup_r+0x66>
 800ca94:	4630      	mov	r0, r6
 800ca96:	f002 f979 	bl	800ed8c <_free_r>
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	6363      	str	r3, [r4, #52]	; 0x34
 800ca9e:	89a3      	ldrh	r3, [r4, #12]
 800caa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800caa4:	81a3      	strh	r3, [r4, #12]
 800caa6:	2300      	movs	r3, #0
 800caa8:	6063      	str	r3, [r4, #4]
 800caaa:	6923      	ldr	r3, [r4, #16]
 800caac:	6023      	str	r3, [r4, #0]
 800caae:	89a3      	ldrh	r3, [r4, #12]
 800cab0:	f043 0308 	orr.w	r3, r3, #8
 800cab4:	81a3      	strh	r3, [r4, #12]
 800cab6:	6923      	ldr	r3, [r4, #16]
 800cab8:	b94b      	cbnz	r3, 800cace <__swsetup_r+0x9a>
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cac4:	d003      	beq.n	800cace <__swsetup_r+0x9a>
 800cac6:	4621      	mov	r1, r4
 800cac8:	4630      	mov	r0, r6
 800caca:	f001 fc1f 	bl	800e30c <__smakebuf_r>
 800cace:	89a0      	ldrh	r0, [r4, #12]
 800cad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cad4:	f010 0301 	ands.w	r3, r0, #1
 800cad8:	d00a      	beq.n	800caf0 <__swsetup_r+0xbc>
 800cada:	2300      	movs	r3, #0
 800cadc:	60a3      	str	r3, [r4, #8]
 800cade:	6963      	ldr	r3, [r4, #20]
 800cae0:	425b      	negs	r3, r3
 800cae2:	61a3      	str	r3, [r4, #24]
 800cae4:	6923      	ldr	r3, [r4, #16]
 800cae6:	b943      	cbnz	r3, 800cafa <__swsetup_r+0xc6>
 800cae8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800caec:	d1ba      	bne.n	800ca64 <__swsetup_r+0x30>
 800caee:	bd70      	pop	{r4, r5, r6, pc}
 800caf0:	0781      	lsls	r1, r0, #30
 800caf2:	bf58      	it	pl
 800caf4:	6963      	ldrpl	r3, [r4, #20]
 800caf6:	60a3      	str	r3, [r4, #8]
 800caf8:	e7f4      	b.n	800cae4 <__swsetup_r+0xb0>
 800cafa:	2000      	movs	r0, #0
 800cafc:	e7f7      	b.n	800caee <__swsetup_r+0xba>
 800cafe:	bf00      	nop
 800cb00:	20000030 	.word	0x20000030
 800cb04:	0800fcb0 	.word	0x0800fcb0
 800cb08:	0800fcd0 	.word	0x0800fcd0
 800cb0c:	0800fc90 	.word	0x0800fc90

0800cb10 <__assert_func>:
 800cb10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb12:	4614      	mov	r4, r2
 800cb14:	461a      	mov	r2, r3
 800cb16:	4b09      	ldr	r3, [pc, #36]	; (800cb3c <__assert_func+0x2c>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4605      	mov	r5, r0
 800cb1c:	68d8      	ldr	r0, [r3, #12]
 800cb1e:	b14c      	cbz	r4, 800cb34 <__assert_func+0x24>
 800cb20:	4b07      	ldr	r3, [pc, #28]	; (800cb40 <__assert_func+0x30>)
 800cb22:	9100      	str	r1, [sp, #0]
 800cb24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cb28:	4906      	ldr	r1, [pc, #24]	; (800cb44 <__assert_func+0x34>)
 800cb2a:	462b      	mov	r3, r5
 800cb2c:	f001 f822 	bl	800db74 <fiprintf>
 800cb30:	f002 fd50 	bl	800f5d4 <abort>
 800cb34:	4b04      	ldr	r3, [pc, #16]	; (800cb48 <__assert_func+0x38>)
 800cb36:	461c      	mov	r4, r3
 800cb38:	e7f3      	b.n	800cb22 <__assert_func+0x12>
 800cb3a:	bf00      	nop
 800cb3c:	20000030 	.word	0x20000030
 800cb40:	0800fad8 	.word	0x0800fad8
 800cb44:	0800fae5 	.word	0x0800fae5
 800cb48:	0800fb13 	.word	0x0800fb13

0800cb4c <quorem>:
 800cb4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb50:	6903      	ldr	r3, [r0, #16]
 800cb52:	690c      	ldr	r4, [r1, #16]
 800cb54:	42a3      	cmp	r3, r4
 800cb56:	4607      	mov	r7, r0
 800cb58:	f2c0 8081 	blt.w	800cc5e <quorem+0x112>
 800cb5c:	3c01      	subs	r4, #1
 800cb5e:	f101 0814 	add.w	r8, r1, #20
 800cb62:	f100 0514 	add.w	r5, r0, #20
 800cb66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb6a:	9301      	str	r3, [sp, #4]
 800cb6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb74:	3301      	adds	r3, #1
 800cb76:	429a      	cmp	r2, r3
 800cb78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cb7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb80:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb84:	d331      	bcc.n	800cbea <quorem+0x9e>
 800cb86:	f04f 0e00 	mov.w	lr, #0
 800cb8a:	4640      	mov	r0, r8
 800cb8c:	46ac      	mov	ip, r5
 800cb8e:	46f2      	mov	sl, lr
 800cb90:	f850 2b04 	ldr.w	r2, [r0], #4
 800cb94:	b293      	uxth	r3, r2
 800cb96:	fb06 e303 	mla	r3, r6, r3, lr
 800cb9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	ebaa 0303 	sub.w	r3, sl, r3
 800cba4:	f8dc a000 	ldr.w	sl, [ip]
 800cba8:	0c12      	lsrs	r2, r2, #16
 800cbaa:	fa13 f38a 	uxtah	r3, r3, sl
 800cbae:	fb06 e202 	mla	r2, r6, r2, lr
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	9b00      	ldr	r3, [sp, #0]
 800cbb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cbba:	b292      	uxth	r2, r2
 800cbbc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cbc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cbc4:	f8bd 3000 	ldrh.w	r3, [sp]
 800cbc8:	4581      	cmp	r9, r0
 800cbca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbce:	f84c 3b04 	str.w	r3, [ip], #4
 800cbd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cbd6:	d2db      	bcs.n	800cb90 <quorem+0x44>
 800cbd8:	f855 300b 	ldr.w	r3, [r5, fp]
 800cbdc:	b92b      	cbnz	r3, 800cbea <quorem+0x9e>
 800cbde:	9b01      	ldr	r3, [sp, #4]
 800cbe0:	3b04      	subs	r3, #4
 800cbe2:	429d      	cmp	r5, r3
 800cbe4:	461a      	mov	r2, r3
 800cbe6:	d32e      	bcc.n	800cc46 <quorem+0xfa>
 800cbe8:	613c      	str	r4, [r7, #16]
 800cbea:	4638      	mov	r0, r7
 800cbec:	f001 fec2 	bl	800e974 <__mcmp>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	db24      	blt.n	800cc3e <quorem+0xf2>
 800cbf4:	3601      	adds	r6, #1
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	f04f 0c00 	mov.w	ip, #0
 800cbfc:	f858 2b04 	ldr.w	r2, [r8], #4
 800cc00:	f8d0 e000 	ldr.w	lr, [r0]
 800cc04:	b293      	uxth	r3, r2
 800cc06:	ebac 0303 	sub.w	r3, ip, r3
 800cc0a:	0c12      	lsrs	r2, r2, #16
 800cc0c:	fa13 f38e 	uxtah	r3, r3, lr
 800cc10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cc14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc18:	b29b      	uxth	r3, r3
 800cc1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc1e:	45c1      	cmp	r9, r8
 800cc20:	f840 3b04 	str.w	r3, [r0], #4
 800cc24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cc28:	d2e8      	bcs.n	800cbfc <quorem+0xb0>
 800cc2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc32:	b922      	cbnz	r2, 800cc3e <quorem+0xf2>
 800cc34:	3b04      	subs	r3, #4
 800cc36:	429d      	cmp	r5, r3
 800cc38:	461a      	mov	r2, r3
 800cc3a:	d30a      	bcc.n	800cc52 <quorem+0x106>
 800cc3c:	613c      	str	r4, [r7, #16]
 800cc3e:	4630      	mov	r0, r6
 800cc40:	b003      	add	sp, #12
 800cc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc46:	6812      	ldr	r2, [r2, #0]
 800cc48:	3b04      	subs	r3, #4
 800cc4a:	2a00      	cmp	r2, #0
 800cc4c:	d1cc      	bne.n	800cbe8 <quorem+0x9c>
 800cc4e:	3c01      	subs	r4, #1
 800cc50:	e7c7      	b.n	800cbe2 <quorem+0x96>
 800cc52:	6812      	ldr	r2, [r2, #0]
 800cc54:	3b04      	subs	r3, #4
 800cc56:	2a00      	cmp	r2, #0
 800cc58:	d1f0      	bne.n	800cc3c <quorem+0xf0>
 800cc5a:	3c01      	subs	r4, #1
 800cc5c:	e7eb      	b.n	800cc36 <quorem+0xea>
 800cc5e:	2000      	movs	r0, #0
 800cc60:	e7ee      	b.n	800cc40 <quorem+0xf4>
 800cc62:	0000      	movs	r0, r0
 800cc64:	0000      	movs	r0, r0
	...

0800cc68 <_dtoa_r>:
 800cc68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc6c:	ed2d 8b04 	vpush	{d8-d9}
 800cc70:	ec57 6b10 	vmov	r6, r7, d0
 800cc74:	b093      	sub	sp, #76	; 0x4c
 800cc76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cc78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cc7c:	9106      	str	r1, [sp, #24]
 800cc7e:	ee10 aa10 	vmov	sl, s0
 800cc82:	4604      	mov	r4, r0
 800cc84:	9209      	str	r2, [sp, #36]	; 0x24
 800cc86:	930c      	str	r3, [sp, #48]	; 0x30
 800cc88:	46bb      	mov	fp, r7
 800cc8a:	b975      	cbnz	r5, 800ccaa <_dtoa_r+0x42>
 800cc8c:	2010      	movs	r0, #16
 800cc8e:	f001 fb7d 	bl	800e38c <malloc>
 800cc92:	4602      	mov	r2, r0
 800cc94:	6260      	str	r0, [r4, #36]	; 0x24
 800cc96:	b920      	cbnz	r0, 800cca2 <_dtoa_r+0x3a>
 800cc98:	4ba7      	ldr	r3, [pc, #668]	; (800cf38 <_dtoa_r+0x2d0>)
 800cc9a:	21ea      	movs	r1, #234	; 0xea
 800cc9c:	48a7      	ldr	r0, [pc, #668]	; (800cf3c <_dtoa_r+0x2d4>)
 800cc9e:	f7ff ff37 	bl	800cb10 <__assert_func>
 800cca2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cca6:	6005      	str	r5, [r0, #0]
 800cca8:	60c5      	str	r5, [r0, #12]
 800ccaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccac:	6819      	ldr	r1, [r3, #0]
 800ccae:	b151      	cbz	r1, 800ccc6 <_dtoa_r+0x5e>
 800ccb0:	685a      	ldr	r2, [r3, #4]
 800ccb2:	604a      	str	r2, [r1, #4]
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	4093      	lsls	r3, r2
 800ccb8:	608b      	str	r3, [r1, #8]
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f001 fbce 	bl	800e45c <_Bfree>
 800ccc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	601a      	str	r2, [r3, #0]
 800ccc6:	1e3b      	subs	r3, r7, #0
 800ccc8:	bfaa      	itet	ge
 800ccca:	2300      	movge	r3, #0
 800cccc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ccd0:	f8c8 3000 	strge.w	r3, [r8]
 800ccd4:	4b9a      	ldr	r3, [pc, #616]	; (800cf40 <_dtoa_r+0x2d8>)
 800ccd6:	bfbc      	itt	lt
 800ccd8:	2201      	movlt	r2, #1
 800ccda:	f8c8 2000 	strlt.w	r2, [r8]
 800ccde:	ea33 030b 	bics.w	r3, r3, fp
 800cce2:	d11b      	bne.n	800cd1c <_dtoa_r+0xb4>
 800cce4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cce6:	f242 730f 	movw	r3, #9999	; 0x270f
 800ccea:	6013      	str	r3, [r2, #0]
 800ccec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ccf0:	4333      	orrs	r3, r6
 800ccf2:	f000 8592 	beq.w	800d81a <_dtoa_r+0xbb2>
 800ccf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccf8:	b963      	cbnz	r3, 800cd14 <_dtoa_r+0xac>
 800ccfa:	4b92      	ldr	r3, [pc, #584]	; (800cf44 <_dtoa_r+0x2dc>)
 800ccfc:	e022      	b.n	800cd44 <_dtoa_r+0xdc>
 800ccfe:	4b92      	ldr	r3, [pc, #584]	; (800cf48 <_dtoa_r+0x2e0>)
 800cd00:	9301      	str	r3, [sp, #4]
 800cd02:	3308      	adds	r3, #8
 800cd04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cd06:	6013      	str	r3, [r2, #0]
 800cd08:	9801      	ldr	r0, [sp, #4]
 800cd0a:	b013      	add	sp, #76	; 0x4c
 800cd0c:	ecbd 8b04 	vpop	{d8-d9}
 800cd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd14:	4b8b      	ldr	r3, [pc, #556]	; (800cf44 <_dtoa_r+0x2dc>)
 800cd16:	9301      	str	r3, [sp, #4]
 800cd18:	3303      	adds	r3, #3
 800cd1a:	e7f3      	b.n	800cd04 <_dtoa_r+0x9c>
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	2300      	movs	r3, #0
 800cd20:	4650      	mov	r0, sl
 800cd22:	4659      	mov	r1, fp
 800cd24:	f7f3 fed0 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd28:	ec4b ab19 	vmov	d9, sl, fp
 800cd2c:	4680      	mov	r8, r0
 800cd2e:	b158      	cbz	r0, 800cd48 <_dtoa_r+0xe0>
 800cd30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd32:	2301      	movs	r3, #1
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	f000 856b 	beq.w	800d814 <_dtoa_r+0xbac>
 800cd3e:	4883      	ldr	r0, [pc, #524]	; (800cf4c <_dtoa_r+0x2e4>)
 800cd40:	6018      	str	r0, [r3, #0]
 800cd42:	1e43      	subs	r3, r0, #1
 800cd44:	9301      	str	r3, [sp, #4]
 800cd46:	e7df      	b.n	800cd08 <_dtoa_r+0xa0>
 800cd48:	ec4b ab10 	vmov	d0, sl, fp
 800cd4c:	aa10      	add	r2, sp, #64	; 0x40
 800cd4e:	a911      	add	r1, sp, #68	; 0x44
 800cd50:	4620      	mov	r0, r4
 800cd52:	f001 ff31 	bl	800ebb8 <__d2b>
 800cd56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cd5a:	ee08 0a10 	vmov	s16, r0
 800cd5e:	2d00      	cmp	r5, #0
 800cd60:	f000 8084 	beq.w	800ce6c <_dtoa_r+0x204>
 800cd64:	ee19 3a90 	vmov	r3, s19
 800cd68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cd70:	4656      	mov	r6, sl
 800cd72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cd76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cd7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cd7e:	4b74      	ldr	r3, [pc, #464]	; (800cf50 <_dtoa_r+0x2e8>)
 800cd80:	2200      	movs	r2, #0
 800cd82:	4630      	mov	r0, r6
 800cd84:	4639      	mov	r1, r7
 800cd86:	f7f3 fa7f 	bl	8000288 <__aeabi_dsub>
 800cd8a:	a365      	add	r3, pc, #404	; (adr r3, 800cf20 <_dtoa_r+0x2b8>)
 800cd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd90:	f7f3 fc32 	bl	80005f8 <__aeabi_dmul>
 800cd94:	a364      	add	r3, pc, #400	; (adr r3, 800cf28 <_dtoa_r+0x2c0>)
 800cd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9a:	f7f3 fa77 	bl	800028c <__adddf3>
 800cd9e:	4606      	mov	r6, r0
 800cda0:	4628      	mov	r0, r5
 800cda2:	460f      	mov	r7, r1
 800cda4:	f7f3 fbbe 	bl	8000524 <__aeabi_i2d>
 800cda8:	a361      	add	r3, pc, #388	; (adr r3, 800cf30 <_dtoa_r+0x2c8>)
 800cdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdae:	f7f3 fc23 	bl	80005f8 <__aeabi_dmul>
 800cdb2:	4602      	mov	r2, r0
 800cdb4:	460b      	mov	r3, r1
 800cdb6:	4630      	mov	r0, r6
 800cdb8:	4639      	mov	r1, r7
 800cdba:	f7f3 fa67 	bl	800028c <__adddf3>
 800cdbe:	4606      	mov	r6, r0
 800cdc0:	460f      	mov	r7, r1
 800cdc2:	f7f3 fec9 	bl	8000b58 <__aeabi_d2iz>
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	9000      	str	r0, [sp, #0]
 800cdca:	2300      	movs	r3, #0
 800cdcc:	4630      	mov	r0, r6
 800cdce:	4639      	mov	r1, r7
 800cdd0:	f7f3 fe84 	bl	8000adc <__aeabi_dcmplt>
 800cdd4:	b150      	cbz	r0, 800cdec <_dtoa_r+0x184>
 800cdd6:	9800      	ldr	r0, [sp, #0]
 800cdd8:	f7f3 fba4 	bl	8000524 <__aeabi_i2d>
 800cddc:	4632      	mov	r2, r6
 800cdde:	463b      	mov	r3, r7
 800cde0:	f7f3 fe72 	bl	8000ac8 <__aeabi_dcmpeq>
 800cde4:	b910      	cbnz	r0, 800cdec <_dtoa_r+0x184>
 800cde6:	9b00      	ldr	r3, [sp, #0]
 800cde8:	3b01      	subs	r3, #1
 800cdea:	9300      	str	r3, [sp, #0]
 800cdec:	9b00      	ldr	r3, [sp, #0]
 800cdee:	2b16      	cmp	r3, #22
 800cdf0:	d85a      	bhi.n	800cea8 <_dtoa_r+0x240>
 800cdf2:	9a00      	ldr	r2, [sp, #0]
 800cdf4:	4b57      	ldr	r3, [pc, #348]	; (800cf54 <_dtoa_r+0x2ec>)
 800cdf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfe:	ec51 0b19 	vmov	r0, r1, d9
 800ce02:	f7f3 fe6b 	bl	8000adc <__aeabi_dcmplt>
 800ce06:	2800      	cmp	r0, #0
 800ce08:	d050      	beq.n	800ceac <_dtoa_r+0x244>
 800ce0a:	9b00      	ldr	r3, [sp, #0]
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	2300      	movs	r3, #0
 800ce12:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce16:	1b5d      	subs	r5, r3, r5
 800ce18:	1e6b      	subs	r3, r5, #1
 800ce1a:	9305      	str	r3, [sp, #20]
 800ce1c:	bf45      	ittet	mi
 800ce1e:	f1c5 0301 	rsbmi	r3, r5, #1
 800ce22:	9304      	strmi	r3, [sp, #16]
 800ce24:	2300      	movpl	r3, #0
 800ce26:	2300      	movmi	r3, #0
 800ce28:	bf4c      	ite	mi
 800ce2a:	9305      	strmi	r3, [sp, #20]
 800ce2c:	9304      	strpl	r3, [sp, #16]
 800ce2e:	9b00      	ldr	r3, [sp, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	db3d      	blt.n	800ceb0 <_dtoa_r+0x248>
 800ce34:	9b05      	ldr	r3, [sp, #20]
 800ce36:	9a00      	ldr	r2, [sp, #0]
 800ce38:	920a      	str	r2, [sp, #40]	; 0x28
 800ce3a:	4413      	add	r3, r2
 800ce3c:	9305      	str	r3, [sp, #20]
 800ce3e:	2300      	movs	r3, #0
 800ce40:	9307      	str	r3, [sp, #28]
 800ce42:	9b06      	ldr	r3, [sp, #24]
 800ce44:	2b09      	cmp	r3, #9
 800ce46:	f200 8089 	bhi.w	800cf5c <_dtoa_r+0x2f4>
 800ce4a:	2b05      	cmp	r3, #5
 800ce4c:	bfc4      	itt	gt
 800ce4e:	3b04      	subgt	r3, #4
 800ce50:	9306      	strgt	r3, [sp, #24]
 800ce52:	9b06      	ldr	r3, [sp, #24]
 800ce54:	f1a3 0302 	sub.w	r3, r3, #2
 800ce58:	bfcc      	ite	gt
 800ce5a:	2500      	movgt	r5, #0
 800ce5c:	2501      	movle	r5, #1
 800ce5e:	2b03      	cmp	r3, #3
 800ce60:	f200 8087 	bhi.w	800cf72 <_dtoa_r+0x30a>
 800ce64:	e8df f003 	tbb	[pc, r3]
 800ce68:	59383a2d 	.word	0x59383a2d
 800ce6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ce70:	441d      	add	r5, r3
 800ce72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ce76:	2b20      	cmp	r3, #32
 800ce78:	bfc1      	itttt	gt
 800ce7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ce7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ce82:	fa0b f303 	lslgt.w	r3, fp, r3
 800ce86:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ce8a:	bfda      	itte	le
 800ce8c:	f1c3 0320 	rsble	r3, r3, #32
 800ce90:	fa06 f003 	lslle.w	r0, r6, r3
 800ce94:	4318      	orrgt	r0, r3
 800ce96:	f7f3 fb35 	bl	8000504 <__aeabi_ui2d>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	4606      	mov	r6, r0
 800ce9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cea2:	3d01      	subs	r5, #1
 800cea4:	930e      	str	r3, [sp, #56]	; 0x38
 800cea6:	e76a      	b.n	800cd7e <_dtoa_r+0x116>
 800cea8:	2301      	movs	r3, #1
 800ceaa:	e7b2      	b.n	800ce12 <_dtoa_r+0x1aa>
 800ceac:	900b      	str	r0, [sp, #44]	; 0x2c
 800ceae:	e7b1      	b.n	800ce14 <_dtoa_r+0x1ac>
 800ceb0:	9b04      	ldr	r3, [sp, #16]
 800ceb2:	9a00      	ldr	r2, [sp, #0]
 800ceb4:	1a9b      	subs	r3, r3, r2
 800ceb6:	9304      	str	r3, [sp, #16]
 800ceb8:	4253      	negs	r3, r2
 800ceba:	9307      	str	r3, [sp, #28]
 800cebc:	2300      	movs	r3, #0
 800cebe:	930a      	str	r3, [sp, #40]	; 0x28
 800cec0:	e7bf      	b.n	800ce42 <_dtoa_r+0x1da>
 800cec2:	2300      	movs	r3, #0
 800cec4:	9308      	str	r3, [sp, #32]
 800cec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	dc55      	bgt.n	800cf78 <_dtoa_r+0x310>
 800cecc:	2301      	movs	r3, #1
 800cece:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ced2:	461a      	mov	r2, r3
 800ced4:	9209      	str	r2, [sp, #36]	; 0x24
 800ced6:	e00c      	b.n	800cef2 <_dtoa_r+0x28a>
 800ced8:	2301      	movs	r3, #1
 800ceda:	e7f3      	b.n	800cec4 <_dtoa_r+0x25c>
 800cedc:	2300      	movs	r3, #0
 800cede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cee0:	9308      	str	r3, [sp, #32]
 800cee2:	9b00      	ldr	r3, [sp, #0]
 800cee4:	4413      	add	r3, r2
 800cee6:	9302      	str	r3, [sp, #8]
 800cee8:	3301      	adds	r3, #1
 800ceea:	2b01      	cmp	r3, #1
 800ceec:	9303      	str	r3, [sp, #12]
 800ceee:	bfb8      	it	lt
 800cef0:	2301      	movlt	r3, #1
 800cef2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cef4:	2200      	movs	r2, #0
 800cef6:	6042      	str	r2, [r0, #4]
 800cef8:	2204      	movs	r2, #4
 800cefa:	f102 0614 	add.w	r6, r2, #20
 800cefe:	429e      	cmp	r6, r3
 800cf00:	6841      	ldr	r1, [r0, #4]
 800cf02:	d93d      	bls.n	800cf80 <_dtoa_r+0x318>
 800cf04:	4620      	mov	r0, r4
 800cf06:	f001 fa69 	bl	800e3dc <_Balloc>
 800cf0a:	9001      	str	r0, [sp, #4]
 800cf0c:	2800      	cmp	r0, #0
 800cf0e:	d13b      	bne.n	800cf88 <_dtoa_r+0x320>
 800cf10:	4b11      	ldr	r3, [pc, #68]	; (800cf58 <_dtoa_r+0x2f0>)
 800cf12:	4602      	mov	r2, r0
 800cf14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cf18:	e6c0      	b.n	800cc9c <_dtoa_r+0x34>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	e7df      	b.n	800cede <_dtoa_r+0x276>
 800cf1e:	bf00      	nop
 800cf20:	636f4361 	.word	0x636f4361
 800cf24:	3fd287a7 	.word	0x3fd287a7
 800cf28:	8b60c8b3 	.word	0x8b60c8b3
 800cf2c:	3fc68a28 	.word	0x3fc68a28
 800cf30:	509f79fb 	.word	0x509f79fb
 800cf34:	3fd34413 	.word	0x3fd34413
 800cf38:	0800fa15 	.word	0x0800fa15
 800cf3c:	0800fc22 	.word	0x0800fc22
 800cf40:	7ff00000 	.word	0x7ff00000
 800cf44:	0800fc1e 	.word	0x0800fc1e
 800cf48:	0800fc15 	.word	0x0800fc15
 800cf4c:	0800f9ed 	.word	0x0800f9ed
 800cf50:	3ff80000 	.word	0x3ff80000
 800cf54:	0800fdf0 	.word	0x0800fdf0
 800cf58:	0800fc7d 	.word	0x0800fc7d
 800cf5c:	2501      	movs	r5, #1
 800cf5e:	2300      	movs	r3, #0
 800cf60:	9306      	str	r3, [sp, #24]
 800cf62:	9508      	str	r5, [sp, #32]
 800cf64:	f04f 33ff 	mov.w	r3, #4294967295
 800cf68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	2312      	movs	r3, #18
 800cf70:	e7b0      	b.n	800ced4 <_dtoa_r+0x26c>
 800cf72:	2301      	movs	r3, #1
 800cf74:	9308      	str	r3, [sp, #32]
 800cf76:	e7f5      	b.n	800cf64 <_dtoa_r+0x2fc>
 800cf78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf7e:	e7b8      	b.n	800cef2 <_dtoa_r+0x28a>
 800cf80:	3101      	adds	r1, #1
 800cf82:	6041      	str	r1, [r0, #4]
 800cf84:	0052      	lsls	r2, r2, #1
 800cf86:	e7b8      	b.n	800cefa <_dtoa_r+0x292>
 800cf88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf8a:	9a01      	ldr	r2, [sp, #4]
 800cf8c:	601a      	str	r2, [r3, #0]
 800cf8e:	9b03      	ldr	r3, [sp, #12]
 800cf90:	2b0e      	cmp	r3, #14
 800cf92:	f200 809d 	bhi.w	800d0d0 <_dtoa_r+0x468>
 800cf96:	2d00      	cmp	r5, #0
 800cf98:	f000 809a 	beq.w	800d0d0 <_dtoa_r+0x468>
 800cf9c:	9b00      	ldr	r3, [sp, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	dd32      	ble.n	800d008 <_dtoa_r+0x3a0>
 800cfa2:	4ab7      	ldr	r2, [pc, #732]	; (800d280 <_dtoa_r+0x618>)
 800cfa4:	f003 030f 	and.w	r3, r3, #15
 800cfa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cfac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cfb0:	9b00      	ldr	r3, [sp, #0]
 800cfb2:	05d8      	lsls	r0, r3, #23
 800cfb4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cfb8:	d516      	bpl.n	800cfe8 <_dtoa_r+0x380>
 800cfba:	4bb2      	ldr	r3, [pc, #712]	; (800d284 <_dtoa_r+0x61c>)
 800cfbc:	ec51 0b19 	vmov	r0, r1, d9
 800cfc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cfc4:	f7f3 fc42 	bl	800084c <__aeabi_ddiv>
 800cfc8:	f007 070f 	and.w	r7, r7, #15
 800cfcc:	4682      	mov	sl, r0
 800cfce:	468b      	mov	fp, r1
 800cfd0:	2503      	movs	r5, #3
 800cfd2:	4eac      	ldr	r6, [pc, #688]	; (800d284 <_dtoa_r+0x61c>)
 800cfd4:	b957      	cbnz	r7, 800cfec <_dtoa_r+0x384>
 800cfd6:	4642      	mov	r2, r8
 800cfd8:	464b      	mov	r3, r9
 800cfda:	4650      	mov	r0, sl
 800cfdc:	4659      	mov	r1, fp
 800cfde:	f7f3 fc35 	bl	800084c <__aeabi_ddiv>
 800cfe2:	4682      	mov	sl, r0
 800cfe4:	468b      	mov	fp, r1
 800cfe6:	e028      	b.n	800d03a <_dtoa_r+0x3d2>
 800cfe8:	2502      	movs	r5, #2
 800cfea:	e7f2      	b.n	800cfd2 <_dtoa_r+0x36a>
 800cfec:	07f9      	lsls	r1, r7, #31
 800cfee:	d508      	bpl.n	800d002 <_dtoa_r+0x39a>
 800cff0:	4640      	mov	r0, r8
 800cff2:	4649      	mov	r1, r9
 800cff4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cff8:	f7f3 fafe 	bl	80005f8 <__aeabi_dmul>
 800cffc:	3501      	adds	r5, #1
 800cffe:	4680      	mov	r8, r0
 800d000:	4689      	mov	r9, r1
 800d002:	107f      	asrs	r7, r7, #1
 800d004:	3608      	adds	r6, #8
 800d006:	e7e5      	b.n	800cfd4 <_dtoa_r+0x36c>
 800d008:	f000 809b 	beq.w	800d142 <_dtoa_r+0x4da>
 800d00c:	9b00      	ldr	r3, [sp, #0]
 800d00e:	4f9d      	ldr	r7, [pc, #628]	; (800d284 <_dtoa_r+0x61c>)
 800d010:	425e      	negs	r6, r3
 800d012:	4b9b      	ldr	r3, [pc, #620]	; (800d280 <_dtoa_r+0x618>)
 800d014:	f006 020f 	and.w	r2, r6, #15
 800d018:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d020:	ec51 0b19 	vmov	r0, r1, d9
 800d024:	f7f3 fae8 	bl	80005f8 <__aeabi_dmul>
 800d028:	1136      	asrs	r6, r6, #4
 800d02a:	4682      	mov	sl, r0
 800d02c:	468b      	mov	fp, r1
 800d02e:	2300      	movs	r3, #0
 800d030:	2502      	movs	r5, #2
 800d032:	2e00      	cmp	r6, #0
 800d034:	d17a      	bne.n	800d12c <_dtoa_r+0x4c4>
 800d036:	2b00      	cmp	r3, #0
 800d038:	d1d3      	bne.n	800cfe2 <_dtoa_r+0x37a>
 800d03a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f000 8082 	beq.w	800d146 <_dtoa_r+0x4de>
 800d042:	4b91      	ldr	r3, [pc, #580]	; (800d288 <_dtoa_r+0x620>)
 800d044:	2200      	movs	r2, #0
 800d046:	4650      	mov	r0, sl
 800d048:	4659      	mov	r1, fp
 800d04a:	f7f3 fd47 	bl	8000adc <__aeabi_dcmplt>
 800d04e:	2800      	cmp	r0, #0
 800d050:	d079      	beq.n	800d146 <_dtoa_r+0x4de>
 800d052:	9b03      	ldr	r3, [sp, #12]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d076      	beq.n	800d146 <_dtoa_r+0x4de>
 800d058:	9b02      	ldr	r3, [sp, #8]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	dd36      	ble.n	800d0cc <_dtoa_r+0x464>
 800d05e:	9b00      	ldr	r3, [sp, #0]
 800d060:	4650      	mov	r0, sl
 800d062:	4659      	mov	r1, fp
 800d064:	1e5f      	subs	r7, r3, #1
 800d066:	2200      	movs	r2, #0
 800d068:	4b88      	ldr	r3, [pc, #544]	; (800d28c <_dtoa_r+0x624>)
 800d06a:	f7f3 fac5 	bl	80005f8 <__aeabi_dmul>
 800d06e:	9e02      	ldr	r6, [sp, #8]
 800d070:	4682      	mov	sl, r0
 800d072:	468b      	mov	fp, r1
 800d074:	3501      	adds	r5, #1
 800d076:	4628      	mov	r0, r5
 800d078:	f7f3 fa54 	bl	8000524 <__aeabi_i2d>
 800d07c:	4652      	mov	r2, sl
 800d07e:	465b      	mov	r3, fp
 800d080:	f7f3 faba 	bl	80005f8 <__aeabi_dmul>
 800d084:	4b82      	ldr	r3, [pc, #520]	; (800d290 <_dtoa_r+0x628>)
 800d086:	2200      	movs	r2, #0
 800d088:	f7f3 f900 	bl	800028c <__adddf3>
 800d08c:	46d0      	mov	r8, sl
 800d08e:	46d9      	mov	r9, fp
 800d090:	4682      	mov	sl, r0
 800d092:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d096:	2e00      	cmp	r6, #0
 800d098:	d158      	bne.n	800d14c <_dtoa_r+0x4e4>
 800d09a:	4b7e      	ldr	r3, [pc, #504]	; (800d294 <_dtoa_r+0x62c>)
 800d09c:	2200      	movs	r2, #0
 800d09e:	4640      	mov	r0, r8
 800d0a0:	4649      	mov	r1, r9
 800d0a2:	f7f3 f8f1 	bl	8000288 <__aeabi_dsub>
 800d0a6:	4652      	mov	r2, sl
 800d0a8:	465b      	mov	r3, fp
 800d0aa:	4680      	mov	r8, r0
 800d0ac:	4689      	mov	r9, r1
 800d0ae:	f7f3 fd33 	bl	8000b18 <__aeabi_dcmpgt>
 800d0b2:	2800      	cmp	r0, #0
 800d0b4:	f040 8295 	bne.w	800d5e2 <_dtoa_r+0x97a>
 800d0b8:	4652      	mov	r2, sl
 800d0ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d0be:	4640      	mov	r0, r8
 800d0c0:	4649      	mov	r1, r9
 800d0c2:	f7f3 fd0b 	bl	8000adc <__aeabi_dcmplt>
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	f040 8289 	bne.w	800d5de <_dtoa_r+0x976>
 800d0cc:	ec5b ab19 	vmov	sl, fp, d9
 800d0d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	f2c0 8148 	blt.w	800d368 <_dtoa_r+0x700>
 800d0d8:	9a00      	ldr	r2, [sp, #0]
 800d0da:	2a0e      	cmp	r2, #14
 800d0dc:	f300 8144 	bgt.w	800d368 <_dtoa_r+0x700>
 800d0e0:	4b67      	ldr	r3, [pc, #412]	; (800d280 <_dtoa_r+0x618>)
 800d0e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d0ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f280 80d5 	bge.w	800d29c <_dtoa_r+0x634>
 800d0f2:	9b03      	ldr	r3, [sp, #12]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f300 80d1 	bgt.w	800d29c <_dtoa_r+0x634>
 800d0fa:	f040 826f 	bne.w	800d5dc <_dtoa_r+0x974>
 800d0fe:	4b65      	ldr	r3, [pc, #404]	; (800d294 <_dtoa_r+0x62c>)
 800d100:	2200      	movs	r2, #0
 800d102:	4640      	mov	r0, r8
 800d104:	4649      	mov	r1, r9
 800d106:	f7f3 fa77 	bl	80005f8 <__aeabi_dmul>
 800d10a:	4652      	mov	r2, sl
 800d10c:	465b      	mov	r3, fp
 800d10e:	f7f3 fcf9 	bl	8000b04 <__aeabi_dcmpge>
 800d112:	9e03      	ldr	r6, [sp, #12]
 800d114:	4637      	mov	r7, r6
 800d116:	2800      	cmp	r0, #0
 800d118:	f040 8245 	bne.w	800d5a6 <_dtoa_r+0x93e>
 800d11c:	9d01      	ldr	r5, [sp, #4]
 800d11e:	2331      	movs	r3, #49	; 0x31
 800d120:	f805 3b01 	strb.w	r3, [r5], #1
 800d124:	9b00      	ldr	r3, [sp, #0]
 800d126:	3301      	adds	r3, #1
 800d128:	9300      	str	r3, [sp, #0]
 800d12a:	e240      	b.n	800d5ae <_dtoa_r+0x946>
 800d12c:	07f2      	lsls	r2, r6, #31
 800d12e:	d505      	bpl.n	800d13c <_dtoa_r+0x4d4>
 800d130:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d134:	f7f3 fa60 	bl	80005f8 <__aeabi_dmul>
 800d138:	3501      	adds	r5, #1
 800d13a:	2301      	movs	r3, #1
 800d13c:	1076      	asrs	r6, r6, #1
 800d13e:	3708      	adds	r7, #8
 800d140:	e777      	b.n	800d032 <_dtoa_r+0x3ca>
 800d142:	2502      	movs	r5, #2
 800d144:	e779      	b.n	800d03a <_dtoa_r+0x3d2>
 800d146:	9f00      	ldr	r7, [sp, #0]
 800d148:	9e03      	ldr	r6, [sp, #12]
 800d14a:	e794      	b.n	800d076 <_dtoa_r+0x40e>
 800d14c:	9901      	ldr	r1, [sp, #4]
 800d14e:	4b4c      	ldr	r3, [pc, #304]	; (800d280 <_dtoa_r+0x618>)
 800d150:	4431      	add	r1, r6
 800d152:	910d      	str	r1, [sp, #52]	; 0x34
 800d154:	9908      	ldr	r1, [sp, #32]
 800d156:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d15a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d15e:	2900      	cmp	r1, #0
 800d160:	d043      	beq.n	800d1ea <_dtoa_r+0x582>
 800d162:	494d      	ldr	r1, [pc, #308]	; (800d298 <_dtoa_r+0x630>)
 800d164:	2000      	movs	r0, #0
 800d166:	f7f3 fb71 	bl	800084c <__aeabi_ddiv>
 800d16a:	4652      	mov	r2, sl
 800d16c:	465b      	mov	r3, fp
 800d16e:	f7f3 f88b 	bl	8000288 <__aeabi_dsub>
 800d172:	9d01      	ldr	r5, [sp, #4]
 800d174:	4682      	mov	sl, r0
 800d176:	468b      	mov	fp, r1
 800d178:	4649      	mov	r1, r9
 800d17a:	4640      	mov	r0, r8
 800d17c:	f7f3 fcec 	bl	8000b58 <__aeabi_d2iz>
 800d180:	4606      	mov	r6, r0
 800d182:	f7f3 f9cf 	bl	8000524 <__aeabi_i2d>
 800d186:	4602      	mov	r2, r0
 800d188:	460b      	mov	r3, r1
 800d18a:	4640      	mov	r0, r8
 800d18c:	4649      	mov	r1, r9
 800d18e:	f7f3 f87b 	bl	8000288 <__aeabi_dsub>
 800d192:	3630      	adds	r6, #48	; 0x30
 800d194:	f805 6b01 	strb.w	r6, [r5], #1
 800d198:	4652      	mov	r2, sl
 800d19a:	465b      	mov	r3, fp
 800d19c:	4680      	mov	r8, r0
 800d19e:	4689      	mov	r9, r1
 800d1a0:	f7f3 fc9c 	bl	8000adc <__aeabi_dcmplt>
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d163      	bne.n	800d270 <_dtoa_r+0x608>
 800d1a8:	4642      	mov	r2, r8
 800d1aa:	464b      	mov	r3, r9
 800d1ac:	4936      	ldr	r1, [pc, #216]	; (800d288 <_dtoa_r+0x620>)
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	f7f3 f86a 	bl	8000288 <__aeabi_dsub>
 800d1b4:	4652      	mov	r2, sl
 800d1b6:	465b      	mov	r3, fp
 800d1b8:	f7f3 fc90 	bl	8000adc <__aeabi_dcmplt>
 800d1bc:	2800      	cmp	r0, #0
 800d1be:	f040 80b5 	bne.w	800d32c <_dtoa_r+0x6c4>
 800d1c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1c4:	429d      	cmp	r5, r3
 800d1c6:	d081      	beq.n	800d0cc <_dtoa_r+0x464>
 800d1c8:	4b30      	ldr	r3, [pc, #192]	; (800d28c <_dtoa_r+0x624>)
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	4650      	mov	r0, sl
 800d1ce:	4659      	mov	r1, fp
 800d1d0:	f7f3 fa12 	bl	80005f8 <__aeabi_dmul>
 800d1d4:	4b2d      	ldr	r3, [pc, #180]	; (800d28c <_dtoa_r+0x624>)
 800d1d6:	4682      	mov	sl, r0
 800d1d8:	468b      	mov	fp, r1
 800d1da:	4640      	mov	r0, r8
 800d1dc:	4649      	mov	r1, r9
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f7f3 fa0a 	bl	80005f8 <__aeabi_dmul>
 800d1e4:	4680      	mov	r8, r0
 800d1e6:	4689      	mov	r9, r1
 800d1e8:	e7c6      	b.n	800d178 <_dtoa_r+0x510>
 800d1ea:	4650      	mov	r0, sl
 800d1ec:	4659      	mov	r1, fp
 800d1ee:	f7f3 fa03 	bl	80005f8 <__aeabi_dmul>
 800d1f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1f4:	9d01      	ldr	r5, [sp, #4]
 800d1f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1f8:	4682      	mov	sl, r0
 800d1fa:	468b      	mov	fp, r1
 800d1fc:	4649      	mov	r1, r9
 800d1fe:	4640      	mov	r0, r8
 800d200:	f7f3 fcaa 	bl	8000b58 <__aeabi_d2iz>
 800d204:	4606      	mov	r6, r0
 800d206:	f7f3 f98d 	bl	8000524 <__aeabi_i2d>
 800d20a:	3630      	adds	r6, #48	; 0x30
 800d20c:	4602      	mov	r2, r0
 800d20e:	460b      	mov	r3, r1
 800d210:	4640      	mov	r0, r8
 800d212:	4649      	mov	r1, r9
 800d214:	f7f3 f838 	bl	8000288 <__aeabi_dsub>
 800d218:	f805 6b01 	strb.w	r6, [r5], #1
 800d21c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d21e:	429d      	cmp	r5, r3
 800d220:	4680      	mov	r8, r0
 800d222:	4689      	mov	r9, r1
 800d224:	f04f 0200 	mov.w	r2, #0
 800d228:	d124      	bne.n	800d274 <_dtoa_r+0x60c>
 800d22a:	4b1b      	ldr	r3, [pc, #108]	; (800d298 <_dtoa_r+0x630>)
 800d22c:	4650      	mov	r0, sl
 800d22e:	4659      	mov	r1, fp
 800d230:	f7f3 f82c 	bl	800028c <__adddf3>
 800d234:	4602      	mov	r2, r0
 800d236:	460b      	mov	r3, r1
 800d238:	4640      	mov	r0, r8
 800d23a:	4649      	mov	r1, r9
 800d23c:	f7f3 fc6c 	bl	8000b18 <__aeabi_dcmpgt>
 800d240:	2800      	cmp	r0, #0
 800d242:	d173      	bne.n	800d32c <_dtoa_r+0x6c4>
 800d244:	4652      	mov	r2, sl
 800d246:	465b      	mov	r3, fp
 800d248:	4913      	ldr	r1, [pc, #76]	; (800d298 <_dtoa_r+0x630>)
 800d24a:	2000      	movs	r0, #0
 800d24c:	f7f3 f81c 	bl	8000288 <__aeabi_dsub>
 800d250:	4602      	mov	r2, r0
 800d252:	460b      	mov	r3, r1
 800d254:	4640      	mov	r0, r8
 800d256:	4649      	mov	r1, r9
 800d258:	f7f3 fc40 	bl	8000adc <__aeabi_dcmplt>
 800d25c:	2800      	cmp	r0, #0
 800d25e:	f43f af35 	beq.w	800d0cc <_dtoa_r+0x464>
 800d262:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d264:	1e6b      	subs	r3, r5, #1
 800d266:	930f      	str	r3, [sp, #60]	; 0x3c
 800d268:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d26c:	2b30      	cmp	r3, #48	; 0x30
 800d26e:	d0f8      	beq.n	800d262 <_dtoa_r+0x5fa>
 800d270:	9700      	str	r7, [sp, #0]
 800d272:	e049      	b.n	800d308 <_dtoa_r+0x6a0>
 800d274:	4b05      	ldr	r3, [pc, #20]	; (800d28c <_dtoa_r+0x624>)
 800d276:	f7f3 f9bf 	bl	80005f8 <__aeabi_dmul>
 800d27a:	4680      	mov	r8, r0
 800d27c:	4689      	mov	r9, r1
 800d27e:	e7bd      	b.n	800d1fc <_dtoa_r+0x594>
 800d280:	0800fdf0 	.word	0x0800fdf0
 800d284:	0800fdc8 	.word	0x0800fdc8
 800d288:	3ff00000 	.word	0x3ff00000
 800d28c:	40240000 	.word	0x40240000
 800d290:	401c0000 	.word	0x401c0000
 800d294:	40140000 	.word	0x40140000
 800d298:	3fe00000 	.word	0x3fe00000
 800d29c:	9d01      	ldr	r5, [sp, #4]
 800d29e:	4656      	mov	r6, sl
 800d2a0:	465f      	mov	r7, fp
 800d2a2:	4642      	mov	r2, r8
 800d2a4:	464b      	mov	r3, r9
 800d2a6:	4630      	mov	r0, r6
 800d2a8:	4639      	mov	r1, r7
 800d2aa:	f7f3 facf 	bl	800084c <__aeabi_ddiv>
 800d2ae:	f7f3 fc53 	bl	8000b58 <__aeabi_d2iz>
 800d2b2:	4682      	mov	sl, r0
 800d2b4:	f7f3 f936 	bl	8000524 <__aeabi_i2d>
 800d2b8:	4642      	mov	r2, r8
 800d2ba:	464b      	mov	r3, r9
 800d2bc:	f7f3 f99c 	bl	80005f8 <__aeabi_dmul>
 800d2c0:	4602      	mov	r2, r0
 800d2c2:	460b      	mov	r3, r1
 800d2c4:	4630      	mov	r0, r6
 800d2c6:	4639      	mov	r1, r7
 800d2c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d2cc:	f7f2 ffdc 	bl	8000288 <__aeabi_dsub>
 800d2d0:	f805 6b01 	strb.w	r6, [r5], #1
 800d2d4:	9e01      	ldr	r6, [sp, #4]
 800d2d6:	9f03      	ldr	r7, [sp, #12]
 800d2d8:	1bae      	subs	r6, r5, r6
 800d2da:	42b7      	cmp	r7, r6
 800d2dc:	4602      	mov	r2, r0
 800d2de:	460b      	mov	r3, r1
 800d2e0:	d135      	bne.n	800d34e <_dtoa_r+0x6e6>
 800d2e2:	f7f2 ffd3 	bl	800028c <__adddf3>
 800d2e6:	4642      	mov	r2, r8
 800d2e8:	464b      	mov	r3, r9
 800d2ea:	4606      	mov	r6, r0
 800d2ec:	460f      	mov	r7, r1
 800d2ee:	f7f3 fc13 	bl	8000b18 <__aeabi_dcmpgt>
 800d2f2:	b9d0      	cbnz	r0, 800d32a <_dtoa_r+0x6c2>
 800d2f4:	4642      	mov	r2, r8
 800d2f6:	464b      	mov	r3, r9
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	4639      	mov	r1, r7
 800d2fc:	f7f3 fbe4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d300:	b110      	cbz	r0, 800d308 <_dtoa_r+0x6a0>
 800d302:	f01a 0f01 	tst.w	sl, #1
 800d306:	d110      	bne.n	800d32a <_dtoa_r+0x6c2>
 800d308:	4620      	mov	r0, r4
 800d30a:	ee18 1a10 	vmov	r1, s16
 800d30e:	f001 f8a5 	bl	800e45c <_Bfree>
 800d312:	2300      	movs	r3, #0
 800d314:	9800      	ldr	r0, [sp, #0]
 800d316:	702b      	strb	r3, [r5, #0]
 800d318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d31a:	3001      	adds	r0, #1
 800d31c:	6018      	str	r0, [r3, #0]
 800d31e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d320:	2b00      	cmp	r3, #0
 800d322:	f43f acf1 	beq.w	800cd08 <_dtoa_r+0xa0>
 800d326:	601d      	str	r5, [r3, #0]
 800d328:	e4ee      	b.n	800cd08 <_dtoa_r+0xa0>
 800d32a:	9f00      	ldr	r7, [sp, #0]
 800d32c:	462b      	mov	r3, r5
 800d32e:	461d      	mov	r5, r3
 800d330:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d334:	2a39      	cmp	r2, #57	; 0x39
 800d336:	d106      	bne.n	800d346 <_dtoa_r+0x6de>
 800d338:	9a01      	ldr	r2, [sp, #4]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d1f7      	bne.n	800d32e <_dtoa_r+0x6c6>
 800d33e:	9901      	ldr	r1, [sp, #4]
 800d340:	2230      	movs	r2, #48	; 0x30
 800d342:	3701      	adds	r7, #1
 800d344:	700a      	strb	r2, [r1, #0]
 800d346:	781a      	ldrb	r2, [r3, #0]
 800d348:	3201      	adds	r2, #1
 800d34a:	701a      	strb	r2, [r3, #0]
 800d34c:	e790      	b.n	800d270 <_dtoa_r+0x608>
 800d34e:	4ba6      	ldr	r3, [pc, #664]	; (800d5e8 <_dtoa_r+0x980>)
 800d350:	2200      	movs	r2, #0
 800d352:	f7f3 f951 	bl	80005f8 <__aeabi_dmul>
 800d356:	2200      	movs	r2, #0
 800d358:	2300      	movs	r3, #0
 800d35a:	4606      	mov	r6, r0
 800d35c:	460f      	mov	r7, r1
 800d35e:	f7f3 fbb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d362:	2800      	cmp	r0, #0
 800d364:	d09d      	beq.n	800d2a2 <_dtoa_r+0x63a>
 800d366:	e7cf      	b.n	800d308 <_dtoa_r+0x6a0>
 800d368:	9a08      	ldr	r2, [sp, #32]
 800d36a:	2a00      	cmp	r2, #0
 800d36c:	f000 80d7 	beq.w	800d51e <_dtoa_r+0x8b6>
 800d370:	9a06      	ldr	r2, [sp, #24]
 800d372:	2a01      	cmp	r2, #1
 800d374:	f300 80ba 	bgt.w	800d4ec <_dtoa_r+0x884>
 800d378:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d37a:	2a00      	cmp	r2, #0
 800d37c:	f000 80b2 	beq.w	800d4e4 <_dtoa_r+0x87c>
 800d380:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d384:	9e07      	ldr	r6, [sp, #28]
 800d386:	9d04      	ldr	r5, [sp, #16]
 800d388:	9a04      	ldr	r2, [sp, #16]
 800d38a:	441a      	add	r2, r3
 800d38c:	9204      	str	r2, [sp, #16]
 800d38e:	9a05      	ldr	r2, [sp, #20]
 800d390:	2101      	movs	r1, #1
 800d392:	441a      	add	r2, r3
 800d394:	4620      	mov	r0, r4
 800d396:	9205      	str	r2, [sp, #20]
 800d398:	f001 f962 	bl	800e660 <__i2b>
 800d39c:	4607      	mov	r7, r0
 800d39e:	2d00      	cmp	r5, #0
 800d3a0:	dd0c      	ble.n	800d3bc <_dtoa_r+0x754>
 800d3a2:	9b05      	ldr	r3, [sp, #20]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	dd09      	ble.n	800d3bc <_dtoa_r+0x754>
 800d3a8:	42ab      	cmp	r3, r5
 800d3aa:	9a04      	ldr	r2, [sp, #16]
 800d3ac:	bfa8      	it	ge
 800d3ae:	462b      	movge	r3, r5
 800d3b0:	1ad2      	subs	r2, r2, r3
 800d3b2:	9204      	str	r2, [sp, #16]
 800d3b4:	9a05      	ldr	r2, [sp, #20]
 800d3b6:	1aed      	subs	r5, r5, r3
 800d3b8:	1ad3      	subs	r3, r2, r3
 800d3ba:	9305      	str	r3, [sp, #20]
 800d3bc:	9b07      	ldr	r3, [sp, #28]
 800d3be:	b31b      	cbz	r3, 800d408 <_dtoa_r+0x7a0>
 800d3c0:	9b08      	ldr	r3, [sp, #32]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f000 80af 	beq.w	800d526 <_dtoa_r+0x8be>
 800d3c8:	2e00      	cmp	r6, #0
 800d3ca:	dd13      	ble.n	800d3f4 <_dtoa_r+0x78c>
 800d3cc:	4639      	mov	r1, r7
 800d3ce:	4632      	mov	r2, r6
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f001 fa05 	bl	800e7e0 <__pow5mult>
 800d3d6:	ee18 2a10 	vmov	r2, s16
 800d3da:	4601      	mov	r1, r0
 800d3dc:	4607      	mov	r7, r0
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f001 f954 	bl	800e68c <__multiply>
 800d3e4:	ee18 1a10 	vmov	r1, s16
 800d3e8:	4680      	mov	r8, r0
 800d3ea:	4620      	mov	r0, r4
 800d3ec:	f001 f836 	bl	800e45c <_Bfree>
 800d3f0:	ee08 8a10 	vmov	s16, r8
 800d3f4:	9b07      	ldr	r3, [sp, #28]
 800d3f6:	1b9a      	subs	r2, r3, r6
 800d3f8:	d006      	beq.n	800d408 <_dtoa_r+0x7a0>
 800d3fa:	ee18 1a10 	vmov	r1, s16
 800d3fe:	4620      	mov	r0, r4
 800d400:	f001 f9ee 	bl	800e7e0 <__pow5mult>
 800d404:	ee08 0a10 	vmov	s16, r0
 800d408:	2101      	movs	r1, #1
 800d40a:	4620      	mov	r0, r4
 800d40c:	f001 f928 	bl	800e660 <__i2b>
 800d410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d412:	2b00      	cmp	r3, #0
 800d414:	4606      	mov	r6, r0
 800d416:	f340 8088 	ble.w	800d52a <_dtoa_r+0x8c2>
 800d41a:	461a      	mov	r2, r3
 800d41c:	4601      	mov	r1, r0
 800d41e:	4620      	mov	r0, r4
 800d420:	f001 f9de 	bl	800e7e0 <__pow5mult>
 800d424:	9b06      	ldr	r3, [sp, #24]
 800d426:	2b01      	cmp	r3, #1
 800d428:	4606      	mov	r6, r0
 800d42a:	f340 8081 	ble.w	800d530 <_dtoa_r+0x8c8>
 800d42e:	f04f 0800 	mov.w	r8, #0
 800d432:	6933      	ldr	r3, [r6, #16]
 800d434:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d438:	6918      	ldr	r0, [r3, #16]
 800d43a:	f001 f8c1 	bl	800e5c0 <__hi0bits>
 800d43e:	f1c0 0020 	rsb	r0, r0, #32
 800d442:	9b05      	ldr	r3, [sp, #20]
 800d444:	4418      	add	r0, r3
 800d446:	f010 001f 	ands.w	r0, r0, #31
 800d44a:	f000 8092 	beq.w	800d572 <_dtoa_r+0x90a>
 800d44e:	f1c0 0320 	rsb	r3, r0, #32
 800d452:	2b04      	cmp	r3, #4
 800d454:	f340 808a 	ble.w	800d56c <_dtoa_r+0x904>
 800d458:	f1c0 001c 	rsb	r0, r0, #28
 800d45c:	9b04      	ldr	r3, [sp, #16]
 800d45e:	4403      	add	r3, r0
 800d460:	9304      	str	r3, [sp, #16]
 800d462:	9b05      	ldr	r3, [sp, #20]
 800d464:	4403      	add	r3, r0
 800d466:	4405      	add	r5, r0
 800d468:	9305      	str	r3, [sp, #20]
 800d46a:	9b04      	ldr	r3, [sp, #16]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	dd07      	ble.n	800d480 <_dtoa_r+0x818>
 800d470:	ee18 1a10 	vmov	r1, s16
 800d474:	461a      	mov	r2, r3
 800d476:	4620      	mov	r0, r4
 800d478:	f001 fa0c 	bl	800e894 <__lshift>
 800d47c:	ee08 0a10 	vmov	s16, r0
 800d480:	9b05      	ldr	r3, [sp, #20]
 800d482:	2b00      	cmp	r3, #0
 800d484:	dd05      	ble.n	800d492 <_dtoa_r+0x82a>
 800d486:	4631      	mov	r1, r6
 800d488:	461a      	mov	r2, r3
 800d48a:	4620      	mov	r0, r4
 800d48c:	f001 fa02 	bl	800e894 <__lshift>
 800d490:	4606      	mov	r6, r0
 800d492:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d494:	2b00      	cmp	r3, #0
 800d496:	d06e      	beq.n	800d576 <_dtoa_r+0x90e>
 800d498:	ee18 0a10 	vmov	r0, s16
 800d49c:	4631      	mov	r1, r6
 800d49e:	f001 fa69 	bl	800e974 <__mcmp>
 800d4a2:	2800      	cmp	r0, #0
 800d4a4:	da67      	bge.n	800d576 <_dtoa_r+0x90e>
 800d4a6:	9b00      	ldr	r3, [sp, #0]
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	ee18 1a10 	vmov	r1, s16
 800d4ae:	9300      	str	r3, [sp, #0]
 800d4b0:	220a      	movs	r2, #10
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	f000 fff3 	bl	800e4a0 <__multadd>
 800d4ba:	9b08      	ldr	r3, [sp, #32]
 800d4bc:	ee08 0a10 	vmov	s16, r0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	f000 81b1 	beq.w	800d828 <_dtoa_r+0xbc0>
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	4639      	mov	r1, r7
 800d4ca:	220a      	movs	r2, #10
 800d4cc:	4620      	mov	r0, r4
 800d4ce:	f000 ffe7 	bl	800e4a0 <__multadd>
 800d4d2:	9b02      	ldr	r3, [sp, #8]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	4607      	mov	r7, r0
 800d4d8:	f300 808e 	bgt.w	800d5f8 <_dtoa_r+0x990>
 800d4dc:	9b06      	ldr	r3, [sp, #24]
 800d4de:	2b02      	cmp	r3, #2
 800d4e0:	dc51      	bgt.n	800d586 <_dtoa_r+0x91e>
 800d4e2:	e089      	b.n	800d5f8 <_dtoa_r+0x990>
 800d4e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d4e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d4ea:	e74b      	b.n	800d384 <_dtoa_r+0x71c>
 800d4ec:	9b03      	ldr	r3, [sp, #12]
 800d4ee:	1e5e      	subs	r6, r3, #1
 800d4f0:	9b07      	ldr	r3, [sp, #28]
 800d4f2:	42b3      	cmp	r3, r6
 800d4f4:	bfbf      	itttt	lt
 800d4f6:	9b07      	ldrlt	r3, [sp, #28]
 800d4f8:	9607      	strlt	r6, [sp, #28]
 800d4fa:	1af2      	sublt	r2, r6, r3
 800d4fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d4fe:	bfb6      	itet	lt
 800d500:	189b      	addlt	r3, r3, r2
 800d502:	1b9e      	subge	r6, r3, r6
 800d504:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d506:	9b03      	ldr	r3, [sp, #12]
 800d508:	bfb8      	it	lt
 800d50a:	2600      	movlt	r6, #0
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	bfb7      	itett	lt
 800d510:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d514:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d518:	1a9d      	sublt	r5, r3, r2
 800d51a:	2300      	movlt	r3, #0
 800d51c:	e734      	b.n	800d388 <_dtoa_r+0x720>
 800d51e:	9e07      	ldr	r6, [sp, #28]
 800d520:	9d04      	ldr	r5, [sp, #16]
 800d522:	9f08      	ldr	r7, [sp, #32]
 800d524:	e73b      	b.n	800d39e <_dtoa_r+0x736>
 800d526:	9a07      	ldr	r2, [sp, #28]
 800d528:	e767      	b.n	800d3fa <_dtoa_r+0x792>
 800d52a:	9b06      	ldr	r3, [sp, #24]
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	dc18      	bgt.n	800d562 <_dtoa_r+0x8fa>
 800d530:	f1ba 0f00 	cmp.w	sl, #0
 800d534:	d115      	bne.n	800d562 <_dtoa_r+0x8fa>
 800d536:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d53a:	b993      	cbnz	r3, 800d562 <_dtoa_r+0x8fa>
 800d53c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d540:	0d1b      	lsrs	r3, r3, #20
 800d542:	051b      	lsls	r3, r3, #20
 800d544:	b183      	cbz	r3, 800d568 <_dtoa_r+0x900>
 800d546:	9b04      	ldr	r3, [sp, #16]
 800d548:	3301      	adds	r3, #1
 800d54a:	9304      	str	r3, [sp, #16]
 800d54c:	9b05      	ldr	r3, [sp, #20]
 800d54e:	3301      	adds	r3, #1
 800d550:	9305      	str	r3, [sp, #20]
 800d552:	f04f 0801 	mov.w	r8, #1
 800d556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d558:	2b00      	cmp	r3, #0
 800d55a:	f47f af6a 	bne.w	800d432 <_dtoa_r+0x7ca>
 800d55e:	2001      	movs	r0, #1
 800d560:	e76f      	b.n	800d442 <_dtoa_r+0x7da>
 800d562:	f04f 0800 	mov.w	r8, #0
 800d566:	e7f6      	b.n	800d556 <_dtoa_r+0x8ee>
 800d568:	4698      	mov	r8, r3
 800d56a:	e7f4      	b.n	800d556 <_dtoa_r+0x8ee>
 800d56c:	f43f af7d 	beq.w	800d46a <_dtoa_r+0x802>
 800d570:	4618      	mov	r0, r3
 800d572:	301c      	adds	r0, #28
 800d574:	e772      	b.n	800d45c <_dtoa_r+0x7f4>
 800d576:	9b03      	ldr	r3, [sp, #12]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	dc37      	bgt.n	800d5ec <_dtoa_r+0x984>
 800d57c:	9b06      	ldr	r3, [sp, #24]
 800d57e:	2b02      	cmp	r3, #2
 800d580:	dd34      	ble.n	800d5ec <_dtoa_r+0x984>
 800d582:	9b03      	ldr	r3, [sp, #12]
 800d584:	9302      	str	r3, [sp, #8]
 800d586:	9b02      	ldr	r3, [sp, #8]
 800d588:	b96b      	cbnz	r3, 800d5a6 <_dtoa_r+0x93e>
 800d58a:	4631      	mov	r1, r6
 800d58c:	2205      	movs	r2, #5
 800d58e:	4620      	mov	r0, r4
 800d590:	f000 ff86 	bl	800e4a0 <__multadd>
 800d594:	4601      	mov	r1, r0
 800d596:	4606      	mov	r6, r0
 800d598:	ee18 0a10 	vmov	r0, s16
 800d59c:	f001 f9ea 	bl	800e974 <__mcmp>
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	f73f adbb 	bgt.w	800d11c <_dtoa_r+0x4b4>
 800d5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5a8:	9d01      	ldr	r5, [sp, #4]
 800d5aa:	43db      	mvns	r3, r3
 800d5ac:	9300      	str	r3, [sp, #0]
 800d5ae:	f04f 0800 	mov.w	r8, #0
 800d5b2:	4631      	mov	r1, r6
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	f000 ff51 	bl	800e45c <_Bfree>
 800d5ba:	2f00      	cmp	r7, #0
 800d5bc:	f43f aea4 	beq.w	800d308 <_dtoa_r+0x6a0>
 800d5c0:	f1b8 0f00 	cmp.w	r8, #0
 800d5c4:	d005      	beq.n	800d5d2 <_dtoa_r+0x96a>
 800d5c6:	45b8      	cmp	r8, r7
 800d5c8:	d003      	beq.n	800d5d2 <_dtoa_r+0x96a>
 800d5ca:	4641      	mov	r1, r8
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	f000 ff45 	bl	800e45c <_Bfree>
 800d5d2:	4639      	mov	r1, r7
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f000 ff41 	bl	800e45c <_Bfree>
 800d5da:	e695      	b.n	800d308 <_dtoa_r+0x6a0>
 800d5dc:	2600      	movs	r6, #0
 800d5de:	4637      	mov	r7, r6
 800d5e0:	e7e1      	b.n	800d5a6 <_dtoa_r+0x93e>
 800d5e2:	9700      	str	r7, [sp, #0]
 800d5e4:	4637      	mov	r7, r6
 800d5e6:	e599      	b.n	800d11c <_dtoa_r+0x4b4>
 800d5e8:	40240000 	.word	0x40240000
 800d5ec:	9b08      	ldr	r3, [sp, #32]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	f000 80ca 	beq.w	800d788 <_dtoa_r+0xb20>
 800d5f4:	9b03      	ldr	r3, [sp, #12]
 800d5f6:	9302      	str	r3, [sp, #8]
 800d5f8:	2d00      	cmp	r5, #0
 800d5fa:	dd05      	ble.n	800d608 <_dtoa_r+0x9a0>
 800d5fc:	4639      	mov	r1, r7
 800d5fe:	462a      	mov	r2, r5
 800d600:	4620      	mov	r0, r4
 800d602:	f001 f947 	bl	800e894 <__lshift>
 800d606:	4607      	mov	r7, r0
 800d608:	f1b8 0f00 	cmp.w	r8, #0
 800d60c:	d05b      	beq.n	800d6c6 <_dtoa_r+0xa5e>
 800d60e:	6879      	ldr	r1, [r7, #4]
 800d610:	4620      	mov	r0, r4
 800d612:	f000 fee3 	bl	800e3dc <_Balloc>
 800d616:	4605      	mov	r5, r0
 800d618:	b928      	cbnz	r0, 800d626 <_dtoa_r+0x9be>
 800d61a:	4b87      	ldr	r3, [pc, #540]	; (800d838 <_dtoa_r+0xbd0>)
 800d61c:	4602      	mov	r2, r0
 800d61e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d622:	f7ff bb3b 	b.w	800cc9c <_dtoa_r+0x34>
 800d626:	693a      	ldr	r2, [r7, #16]
 800d628:	3202      	adds	r2, #2
 800d62a:	0092      	lsls	r2, r2, #2
 800d62c:	f107 010c 	add.w	r1, r7, #12
 800d630:	300c      	adds	r0, #12
 800d632:	f000 fec5 	bl	800e3c0 <memcpy>
 800d636:	2201      	movs	r2, #1
 800d638:	4629      	mov	r1, r5
 800d63a:	4620      	mov	r0, r4
 800d63c:	f001 f92a 	bl	800e894 <__lshift>
 800d640:	9b01      	ldr	r3, [sp, #4]
 800d642:	f103 0901 	add.w	r9, r3, #1
 800d646:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d64a:	4413      	add	r3, r2
 800d64c:	9305      	str	r3, [sp, #20]
 800d64e:	f00a 0301 	and.w	r3, sl, #1
 800d652:	46b8      	mov	r8, r7
 800d654:	9304      	str	r3, [sp, #16]
 800d656:	4607      	mov	r7, r0
 800d658:	4631      	mov	r1, r6
 800d65a:	ee18 0a10 	vmov	r0, s16
 800d65e:	f7ff fa75 	bl	800cb4c <quorem>
 800d662:	4641      	mov	r1, r8
 800d664:	9002      	str	r0, [sp, #8]
 800d666:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d66a:	ee18 0a10 	vmov	r0, s16
 800d66e:	f001 f981 	bl	800e974 <__mcmp>
 800d672:	463a      	mov	r2, r7
 800d674:	9003      	str	r0, [sp, #12]
 800d676:	4631      	mov	r1, r6
 800d678:	4620      	mov	r0, r4
 800d67a:	f001 f997 	bl	800e9ac <__mdiff>
 800d67e:	68c2      	ldr	r2, [r0, #12]
 800d680:	f109 3bff 	add.w	fp, r9, #4294967295
 800d684:	4605      	mov	r5, r0
 800d686:	bb02      	cbnz	r2, 800d6ca <_dtoa_r+0xa62>
 800d688:	4601      	mov	r1, r0
 800d68a:	ee18 0a10 	vmov	r0, s16
 800d68e:	f001 f971 	bl	800e974 <__mcmp>
 800d692:	4602      	mov	r2, r0
 800d694:	4629      	mov	r1, r5
 800d696:	4620      	mov	r0, r4
 800d698:	9207      	str	r2, [sp, #28]
 800d69a:	f000 fedf 	bl	800e45c <_Bfree>
 800d69e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d6a2:	ea43 0102 	orr.w	r1, r3, r2
 800d6a6:	9b04      	ldr	r3, [sp, #16]
 800d6a8:	430b      	orrs	r3, r1
 800d6aa:	464d      	mov	r5, r9
 800d6ac:	d10f      	bne.n	800d6ce <_dtoa_r+0xa66>
 800d6ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d6b2:	d02a      	beq.n	800d70a <_dtoa_r+0xaa2>
 800d6b4:	9b03      	ldr	r3, [sp, #12]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	dd02      	ble.n	800d6c0 <_dtoa_r+0xa58>
 800d6ba:	9b02      	ldr	r3, [sp, #8]
 800d6bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d6c0:	f88b a000 	strb.w	sl, [fp]
 800d6c4:	e775      	b.n	800d5b2 <_dtoa_r+0x94a>
 800d6c6:	4638      	mov	r0, r7
 800d6c8:	e7ba      	b.n	800d640 <_dtoa_r+0x9d8>
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	e7e2      	b.n	800d694 <_dtoa_r+0xa2c>
 800d6ce:	9b03      	ldr	r3, [sp, #12]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	db04      	blt.n	800d6de <_dtoa_r+0xa76>
 800d6d4:	9906      	ldr	r1, [sp, #24]
 800d6d6:	430b      	orrs	r3, r1
 800d6d8:	9904      	ldr	r1, [sp, #16]
 800d6da:	430b      	orrs	r3, r1
 800d6dc:	d122      	bne.n	800d724 <_dtoa_r+0xabc>
 800d6de:	2a00      	cmp	r2, #0
 800d6e0:	ddee      	ble.n	800d6c0 <_dtoa_r+0xa58>
 800d6e2:	ee18 1a10 	vmov	r1, s16
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	4620      	mov	r0, r4
 800d6ea:	f001 f8d3 	bl	800e894 <__lshift>
 800d6ee:	4631      	mov	r1, r6
 800d6f0:	ee08 0a10 	vmov	s16, r0
 800d6f4:	f001 f93e 	bl	800e974 <__mcmp>
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	dc03      	bgt.n	800d704 <_dtoa_r+0xa9c>
 800d6fc:	d1e0      	bne.n	800d6c0 <_dtoa_r+0xa58>
 800d6fe:	f01a 0f01 	tst.w	sl, #1
 800d702:	d0dd      	beq.n	800d6c0 <_dtoa_r+0xa58>
 800d704:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d708:	d1d7      	bne.n	800d6ba <_dtoa_r+0xa52>
 800d70a:	2339      	movs	r3, #57	; 0x39
 800d70c:	f88b 3000 	strb.w	r3, [fp]
 800d710:	462b      	mov	r3, r5
 800d712:	461d      	mov	r5, r3
 800d714:	3b01      	subs	r3, #1
 800d716:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d71a:	2a39      	cmp	r2, #57	; 0x39
 800d71c:	d071      	beq.n	800d802 <_dtoa_r+0xb9a>
 800d71e:	3201      	adds	r2, #1
 800d720:	701a      	strb	r2, [r3, #0]
 800d722:	e746      	b.n	800d5b2 <_dtoa_r+0x94a>
 800d724:	2a00      	cmp	r2, #0
 800d726:	dd07      	ble.n	800d738 <_dtoa_r+0xad0>
 800d728:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d72c:	d0ed      	beq.n	800d70a <_dtoa_r+0xaa2>
 800d72e:	f10a 0301 	add.w	r3, sl, #1
 800d732:	f88b 3000 	strb.w	r3, [fp]
 800d736:	e73c      	b.n	800d5b2 <_dtoa_r+0x94a>
 800d738:	9b05      	ldr	r3, [sp, #20]
 800d73a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d73e:	4599      	cmp	r9, r3
 800d740:	d047      	beq.n	800d7d2 <_dtoa_r+0xb6a>
 800d742:	ee18 1a10 	vmov	r1, s16
 800d746:	2300      	movs	r3, #0
 800d748:	220a      	movs	r2, #10
 800d74a:	4620      	mov	r0, r4
 800d74c:	f000 fea8 	bl	800e4a0 <__multadd>
 800d750:	45b8      	cmp	r8, r7
 800d752:	ee08 0a10 	vmov	s16, r0
 800d756:	f04f 0300 	mov.w	r3, #0
 800d75a:	f04f 020a 	mov.w	r2, #10
 800d75e:	4641      	mov	r1, r8
 800d760:	4620      	mov	r0, r4
 800d762:	d106      	bne.n	800d772 <_dtoa_r+0xb0a>
 800d764:	f000 fe9c 	bl	800e4a0 <__multadd>
 800d768:	4680      	mov	r8, r0
 800d76a:	4607      	mov	r7, r0
 800d76c:	f109 0901 	add.w	r9, r9, #1
 800d770:	e772      	b.n	800d658 <_dtoa_r+0x9f0>
 800d772:	f000 fe95 	bl	800e4a0 <__multadd>
 800d776:	4639      	mov	r1, r7
 800d778:	4680      	mov	r8, r0
 800d77a:	2300      	movs	r3, #0
 800d77c:	220a      	movs	r2, #10
 800d77e:	4620      	mov	r0, r4
 800d780:	f000 fe8e 	bl	800e4a0 <__multadd>
 800d784:	4607      	mov	r7, r0
 800d786:	e7f1      	b.n	800d76c <_dtoa_r+0xb04>
 800d788:	9b03      	ldr	r3, [sp, #12]
 800d78a:	9302      	str	r3, [sp, #8]
 800d78c:	9d01      	ldr	r5, [sp, #4]
 800d78e:	ee18 0a10 	vmov	r0, s16
 800d792:	4631      	mov	r1, r6
 800d794:	f7ff f9da 	bl	800cb4c <quorem>
 800d798:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d79c:	9b01      	ldr	r3, [sp, #4]
 800d79e:	f805 ab01 	strb.w	sl, [r5], #1
 800d7a2:	1aea      	subs	r2, r5, r3
 800d7a4:	9b02      	ldr	r3, [sp, #8]
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	dd09      	ble.n	800d7be <_dtoa_r+0xb56>
 800d7aa:	ee18 1a10 	vmov	r1, s16
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	220a      	movs	r2, #10
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	f000 fe74 	bl	800e4a0 <__multadd>
 800d7b8:	ee08 0a10 	vmov	s16, r0
 800d7bc:	e7e7      	b.n	800d78e <_dtoa_r+0xb26>
 800d7be:	9b02      	ldr	r3, [sp, #8]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	bfc8      	it	gt
 800d7c4:	461d      	movgt	r5, r3
 800d7c6:	9b01      	ldr	r3, [sp, #4]
 800d7c8:	bfd8      	it	le
 800d7ca:	2501      	movle	r5, #1
 800d7cc:	441d      	add	r5, r3
 800d7ce:	f04f 0800 	mov.w	r8, #0
 800d7d2:	ee18 1a10 	vmov	r1, s16
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	4620      	mov	r0, r4
 800d7da:	f001 f85b 	bl	800e894 <__lshift>
 800d7de:	4631      	mov	r1, r6
 800d7e0:	ee08 0a10 	vmov	s16, r0
 800d7e4:	f001 f8c6 	bl	800e974 <__mcmp>
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	dc91      	bgt.n	800d710 <_dtoa_r+0xaa8>
 800d7ec:	d102      	bne.n	800d7f4 <_dtoa_r+0xb8c>
 800d7ee:	f01a 0f01 	tst.w	sl, #1
 800d7f2:	d18d      	bne.n	800d710 <_dtoa_r+0xaa8>
 800d7f4:	462b      	mov	r3, r5
 800d7f6:	461d      	mov	r5, r3
 800d7f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7fc:	2a30      	cmp	r2, #48	; 0x30
 800d7fe:	d0fa      	beq.n	800d7f6 <_dtoa_r+0xb8e>
 800d800:	e6d7      	b.n	800d5b2 <_dtoa_r+0x94a>
 800d802:	9a01      	ldr	r2, [sp, #4]
 800d804:	429a      	cmp	r2, r3
 800d806:	d184      	bne.n	800d712 <_dtoa_r+0xaaa>
 800d808:	9b00      	ldr	r3, [sp, #0]
 800d80a:	3301      	adds	r3, #1
 800d80c:	9300      	str	r3, [sp, #0]
 800d80e:	2331      	movs	r3, #49	; 0x31
 800d810:	7013      	strb	r3, [r2, #0]
 800d812:	e6ce      	b.n	800d5b2 <_dtoa_r+0x94a>
 800d814:	4b09      	ldr	r3, [pc, #36]	; (800d83c <_dtoa_r+0xbd4>)
 800d816:	f7ff ba95 	b.w	800cd44 <_dtoa_r+0xdc>
 800d81a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f47f aa6e 	bne.w	800ccfe <_dtoa_r+0x96>
 800d822:	4b07      	ldr	r3, [pc, #28]	; (800d840 <_dtoa_r+0xbd8>)
 800d824:	f7ff ba8e 	b.w	800cd44 <_dtoa_r+0xdc>
 800d828:	9b02      	ldr	r3, [sp, #8]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	dcae      	bgt.n	800d78c <_dtoa_r+0xb24>
 800d82e:	9b06      	ldr	r3, [sp, #24]
 800d830:	2b02      	cmp	r3, #2
 800d832:	f73f aea8 	bgt.w	800d586 <_dtoa_r+0x91e>
 800d836:	e7a9      	b.n	800d78c <_dtoa_r+0xb24>
 800d838:	0800fc7d 	.word	0x0800fc7d
 800d83c:	0800f9ec 	.word	0x0800f9ec
 800d840:	0800fc15 	.word	0x0800fc15

0800d844 <__sflush_r>:
 800d844:	898a      	ldrh	r2, [r1, #12]
 800d846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d84a:	4605      	mov	r5, r0
 800d84c:	0710      	lsls	r0, r2, #28
 800d84e:	460c      	mov	r4, r1
 800d850:	d458      	bmi.n	800d904 <__sflush_r+0xc0>
 800d852:	684b      	ldr	r3, [r1, #4]
 800d854:	2b00      	cmp	r3, #0
 800d856:	dc05      	bgt.n	800d864 <__sflush_r+0x20>
 800d858:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	dc02      	bgt.n	800d864 <__sflush_r+0x20>
 800d85e:	2000      	movs	r0, #0
 800d860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d864:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d866:	2e00      	cmp	r6, #0
 800d868:	d0f9      	beq.n	800d85e <__sflush_r+0x1a>
 800d86a:	2300      	movs	r3, #0
 800d86c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d870:	682f      	ldr	r7, [r5, #0]
 800d872:	602b      	str	r3, [r5, #0]
 800d874:	d032      	beq.n	800d8dc <__sflush_r+0x98>
 800d876:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d878:	89a3      	ldrh	r3, [r4, #12]
 800d87a:	075a      	lsls	r2, r3, #29
 800d87c:	d505      	bpl.n	800d88a <__sflush_r+0x46>
 800d87e:	6863      	ldr	r3, [r4, #4]
 800d880:	1ac0      	subs	r0, r0, r3
 800d882:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d884:	b10b      	cbz	r3, 800d88a <__sflush_r+0x46>
 800d886:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d888:	1ac0      	subs	r0, r0, r3
 800d88a:	2300      	movs	r3, #0
 800d88c:	4602      	mov	r2, r0
 800d88e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d890:	6a21      	ldr	r1, [r4, #32]
 800d892:	4628      	mov	r0, r5
 800d894:	47b0      	blx	r6
 800d896:	1c43      	adds	r3, r0, #1
 800d898:	89a3      	ldrh	r3, [r4, #12]
 800d89a:	d106      	bne.n	800d8aa <__sflush_r+0x66>
 800d89c:	6829      	ldr	r1, [r5, #0]
 800d89e:	291d      	cmp	r1, #29
 800d8a0:	d82c      	bhi.n	800d8fc <__sflush_r+0xb8>
 800d8a2:	4a2a      	ldr	r2, [pc, #168]	; (800d94c <__sflush_r+0x108>)
 800d8a4:	40ca      	lsrs	r2, r1
 800d8a6:	07d6      	lsls	r6, r2, #31
 800d8a8:	d528      	bpl.n	800d8fc <__sflush_r+0xb8>
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	6062      	str	r2, [r4, #4]
 800d8ae:	04d9      	lsls	r1, r3, #19
 800d8b0:	6922      	ldr	r2, [r4, #16]
 800d8b2:	6022      	str	r2, [r4, #0]
 800d8b4:	d504      	bpl.n	800d8c0 <__sflush_r+0x7c>
 800d8b6:	1c42      	adds	r2, r0, #1
 800d8b8:	d101      	bne.n	800d8be <__sflush_r+0x7a>
 800d8ba:	682b      	ldr	r3, [r5, #0]
 800d8bc:	b903      	cbnz	r3, 800d8c0 <__sflush_r+0x7c>
 800d8be:	6560      	str	r0, [r4, #84]	; 0x54
 800d8c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8c2:	602f      	str	r7, [r5, #0]
 800d8c4:	2900      	cmp	r1, #0
 800d8c6:	d0ca      	beq.n	800d85e <__sflush_r+0x1a>
 800d8c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8cc:	4299      	cmp	r1, r3
 800d8ce:	d002      	beq.n	800d8d6 <__sflush_r+0x92>
 800d8d0:	4628      	mov	r0, r5
 800d8d2:	f001 fa5b 	bl	800ed8c <_free_r>
 800d8d6:	2000      	movs	r0, #0
 800d8d8:	6360      	str	r0, [r4, #52]	; 0x34
 800d8da:	e7c1      	b.n	800d860 <__sflush_r+0x1c>
 800d8dc:	6a21      	ldr	r1, [r4, #32]
 800d8de:	2301      	movs	r3, #1
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	47b0      	blx	r6
 800d8e4:	1c41      	adds	r1, r0, #1
 800d8e6:	d1c7      	bne.n	800d878 <__sflush_r+0x34>
 800d8e8:	682b      	ldr	r3, [r5, #0]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d0c4      	beq.n	800d878 <__sflush_r+0x34>
 800d8ee:	2b1d      	cmp	r3, #29
 800d8f0:	d001      	beq.n	800d8f6 <__sflush_r+0xb2>
 800d8f2:	2b16      	cmp	r3, #22
 800d8f4:	d101      	bne.n	800d8fa <__sflush_r+0xb6>
 800d8f6:	602f      	str	r7, [r5, #0]
 800d8f8:	e7b1      	b.n	800d85e <__sflush_r+0x1a>
 800d8fa:	89a3      	ldrh	r3, [r4, #12]
 800d8fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d900:	81a3      	strh	r3, [r4, #12]
 800d902:	e7ad      	b.n	800d860 <__sflush_r+0x1c>
 800d904:	690f      	ldr	r7, [r1, #16]
 800d906:	2f00      	cmp	r7, #0
 800d908:	d0a9      	beq.n	800d85e <__sflush_r+0x1a>
 800d90a:	0793      	lsls	r3, r2, #30
 800d90c:	680e      	ldr	r6, [r1, #0]
 800d90e:	bf08      	it	eq
 800d910:	694b      	ldreq	r3, [r1, #20]
 800d912:	600f      	str	r7, [r1, #0]
 800d914:	bf18      	it	ne
 800d916:	2300      	movne	r3, #0
 800d918:	eba6 0807 	sub.w	r8, r6, r7
 800d91c:	608b      	str	r3, [r1, #8]
 800d91e:	f1b8 0f00 	cmp.w	r8, #0
 800d922:	dd9c      	ble.n	800d85e <__sflush_r+0x1a>
 800d924:	6a21      	ldr	r1, [r4, #32]
 800d926:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d928:	4643      	mov	r3, r8
 800d92a:	463a      	mov	r2, r7
 800d92c:	4628      	mov	r0, r5
 800d92e:	47b0      	blx	r6
 800d930:	2800      	cmp	r0, #0
 800d932:	dc06      	bgt.n	800d942 <__sflush_r+0xfe>
 800d934:	89a3      	ldrh	r3, [r4, #12]
 800d936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d93a:	81a3      	strh	r3, [r4, #12]
 800d93c:	f04f 30ff 	mov.w	r0, #4294967295
 800d940:	e78e      	b.n	800d860 <__sflush_r+0x1c>
 800d942:	4407      	add	r7, r0
 800d944:	eba8 0800 	sub.w	r8, r8, r0
 800d948:	e7e9      	b.n	800d91e <__sflush_r+0xda>
 800d94a:	bf00      	nop
 800d94c:	20400001 	.word	0x20400001

0800d950 <_fflush_r>:
 800d950:	b538      	push	{r3, r4, r5, lr}
 800d952:	690b      	ldr	r3, [r1, #16]
 800d954:	4605      	mov	r5, r0
 800d956:	460c      	mov	r4, r1
 800d958:	b913      	cbnz	r3, 800d960 <_fflush_r+0x10>
 800d95a:	2500      	movs	r5, #0
 800d95c:	4628      	mov	r0, r5
 800d95e:	bd38      	pop	{r3, r4, r5, pc}
 800d960:	b118      	cbz	r0, 800d96a <_fflush_r+0x1a>
 800d962:	6983      	ldr	r3, [r0, #24]
 800d964:	b90b      	cbnz	r3, 800d96a <_fflush_r+0x1a>
 800d966:	f000 f887 	bl	800da78 <__sinit>
 800d96a:	4b14      	ldr	r3, [pc, #80]	; (800d9bc <_fflush_r+0x6c>)
 800d96c:	429c      	cmp	r4, r3
 800d96e:	d11b      	bne.n	800d9a8 <_fflush_r+0x58>
 800d970:	686c      	ldr	r4, [r5, #4]
 800d972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d0ef      	beq.n	800d95a <_fflush_r+0xa>
 800d97a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d97c:	07d0      	lsls	r0, r2, #31
 800d97e:	d404      	bmi.n	800d98a <_fflush_r+0x3a>
 800d980:	0599      	lsls	r1, r3, #22
 800d982:	d402      	bmi.n	800d98a <_fflush_r+0x3a>
 800d984:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d986:	f000 fc9a 	bl	800e2be <__retarget_lock_acquire_recursive>
 800d98a:	4628      	mov	r0, r5
 800d98c:	4621      	mov	r1, r4
 800d98e:	f7ff ff59 	bl	800d844 <__sflush_r>
 800d992:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d994:	07da      	lsls	r2, r3, #31
 800d996:	4605      	mov	r5, r0
 800d998:	d4e0      	bmi.n	800d95c <_fflush_r+0xc>
 800d99a:	89a3      	ldrh	r3, [r4, #12]
 800d99c:	059b      	lsls	r3, r3, #22
 800d99e:	d4dd      	bmi.n	800d95c <_fflush_r+0xc>
 800d9a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9a2:	f000 fc8d 	bl	800e2c0 <__retarget_lock_release_recursive>
 800d9a6:	e7d9      	b.n	800d95c <_fflush_r+0xc>
 800d9a8:	4b05      	ldr	r3, [pc, #20]	; (800d9c0 <_fflush_r+0x70>)
 800d9aa:	429c      	cmp	r4, r3
 800d9ac:	d101      	bne.n	800d9b2 <_fflush_r+0x62>
 800d9ae:	68ac      	ldr	r4, [r5, #8]
 800d9b0:	e7df      	b.n	800d972 <_fflush_r+0x22>
 800d9b2:	4b04      	ldr	r3, [pc, #16]	; (800d9c4 <_fflush_r+0x74>)
 800d9b4:	429c      	cmp	r4, r3
 800d9b6:	bf08      	it	eq
 800d9b8:	68ec      	ldreq	r4, [r5, #12]
 800d9ba:	e7da      	b.n	800d972 <_fflush_r+0x22>
 800d9bc:	0800fcb0 	.word	0x0800fcb0
 800d9c0:	0800fcd0 	.word	0x0800fcd0
 800d9c4:	0800fc90 	.word	0x0800fc90

0800d9c8 <std>:
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	b510      	push	{r4, lr}
 800d9cc:	4604      	mov	r4, r0
 800d9ce:	e9c0 3300 	strd	r3, r3, [r0]
 800d9d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9d6:	6083      	str	r3, [r0, #8]
 800d9d8:	8181      	strh	r1, [r0, #12]
 800d9da:	6643      	str	r3, [r0, #100]	; 0x64
 800d9dc:	81c2      	strh	r2, [r0, #14]
 800d9de:	6183      	str	r3, [r0, #24]
 800d9e0:	4619      	mov	r1, r3
 800d9e2:	2208      	movs	r2, #8
 800d9e4:	305c      	adds	r0, #92	; 0x5c
 800d9e6:	f7fd f9cb 	bl	800ad80 <memset>
 800d9ea:	4b05      	ldr	r3, [pc, #20]	; (800da00 <std+0x38>)
 800d9ec:	6263      	str	r3, [r4, #36]	; 0x24
 800d9ee:	4b05      	ldr	r3, [pc, #20]	; (800da04 <std+0x3c>)
 800d9f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d9f2:	4b05      	ldr	r3, [pc, #20]	; (800da08 <std+0x40>)
 800d9f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d9f6:	4b05      	ldr	r3, [pc, #20]	; (800da0c <std+0x44>)
 800d9f8:	6224      	str	r4, [r4, #32]
 800d9fa:	6323      	str	r3, [r4, #48]	; 0x30
 800d9fc:	bd10      	pop	{r4, pc}
 800d9fe:	bf00      	nop
 800da00:	0800f4e9 	.word	0x0800f4e9
 800da04:	0800f50b 	.word	0x0800f50b
 800da08:	0800f543 	.word	0x0800f543
 800da0c:	0800f567 	.word	0x0800f567

0800da10 <_cleanup_r>:
 800da10:	4901      	ldr	r1, [pc, #4]	; (800da18 <_cleanup_r+0x8>)
 800da12:	f000 b8c1 	b.w	800db98 <_fwalk_reent>
 800da16:	bf00      	nop
 800da18:	0800d951 	.word	0x0800d951

0800da1c <__sfmoreglue>:
 800da1c:	b570      	push	{r4, r5, r6, lr}
 800da1e:	2268      	movs	r2, #104	; 0x68
 800da20:	1e4d      	subs	r5, r1, #1
 800da22:	4355      	muls	r5, r2
 800da24:	460e      	mov	r6, r1
 800da26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800da2a:	f001 fa1b 	bl	800ee64 <_malloc_r>
 800da2e:	4604      	mov	r4, r0
 800da30:	b140      	cbz	r0, 800da44 <__sfmoreglue+0x28>
 800da32:	2100      	movs	r1, #0
 800da34:	e9c0 1600 	strd	r1, r6, [r0]
 800da38:	300c      	adds	r0, #12
 800da3a:	60a0      	str	r0, [r4, #8]
 800da3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800da40:	f7fd f99e 	bl	800ad80 <memset>
 800da44:	4620      	mov	r0, r4
 800da46:	bd70      	pop	{r4, r5, r6, pc}

0800da48 <__sfp_lock_acquire>:
 800da48:	4801      	ldr	r0, [pc, #4]	; (800da50 <__sfp_lock_acquire+0x8>)
 800da4a:	f000 bc38 	b.w	800e2be <__retarget_lock_acquire_recursive>
 800da4e:	bf00      	nop
 800da50:	20000695 	.word	0x20000695

0800da54 <__sfp_lock_release>:
 800da54:	4801      	ldr	r0, [pc, #4]	; (800da5c <__sfp_lock_release+0x8>)
 800da56:	f000 bc33 	b.w	800e2c0 <__retarget_lock_release_recursive>
 800da5a:	bf00      	nop
 800da5c:	20000695 	.word	0x20000695

0800da60 <__sinit_lock_acquire>:
 800da60:	4801      	ldr	r0, [pc, #4]	; (800da68 <__sinit_lock_acquire+0x8>)
 800da62:	f000 bc2c 	b.w	800e2be <__retarget_lock_acquire_recursive>
 800da66:	bf00      	nop
 800da68:	20000696 	.word	0x20000696

0800da6c <__sinit_lock_release>:
 800da6c:	4801      	ldr	r0, [pc, #4]	; (800da74 <__sinit_lock_release+0x8>)
 800da6e:	f000 bc27 	b.w	800e2c0 <__retarget_lock_release_recursive>
 800da72:	bf00      	nop
 800da74:	20000696 	.word	0x20000696

0800da78 <__sinit>:
 800da78:	b510      	push	{r4, lr}
 800da7a:	4604      	mov	r4, r0
 800da7c:	f7ff fff0 	bl	800da60 <__sinit_lock_acquire>
 800da80:	69a3      	ldr	r3, [r4, #24]
 800da82:	b11b      	cbz	r3, 800da8c <__sinit+0x14>
 800da84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da88:	f7ff bff0 	b.w	800da6c <__sinit_lock_release>
 800da8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800da90:	6523      	str	r3, [r4, #80]	; 0x50
 800da92:	4b13      	ldr	r3, [pc, #76]	; (800dae0 <__sinit+0x68>)
 800da94:	4a13      	ldr	r2, [pc, #76]	; (800dae4 <__sinit+0x6c>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	62a2      	str	r2, [r4, #40]	; 0x28
 800da9a:	42a3      	cmp	r3, r4
 800da9c:	bf04      	itt	eq
 800da9e:	2301      	moveq	r3, #1
 800daa0:	61a3      	streq	r3, [r4, #24]
 800daa2:	4620      	mov	r0, r4
 800daa4:	f000 f820 	bl	800dae8 <__sfp>
 800daa8:	6060      	str	r0, [r4, #4]
 800daaa:	4620      	mov	r0, r4
 800daac:	f000 f81c 	bl	800dae8 <__sfp>
 800dab0:	60a0      	str	r0, [r4, #8]
 800dab2:	4620      	mov	r0, r4
 800dab4:	f000 f818 	bl	800dae8 <__sfp>
 800dab8:	2200      	movs	r2, #0
 800daba:	60e0      	str	r0, [r4, #12]
 800dabc:	2104      	movs	r1, #4
 800dabe:	6860      	ldr	r0, [r4, #4]
 800dac0:	f7ff ff82 	bl	800d9c8 <std>
 800dac4:	68a0      	ldr	r0, [r4, #8]
 800dac6:	2201      	movs	r2, #1
 800dac8:	2109      	movs	r1, #9
 800daca:	f7ff ff7d 	bl	800d9c8 <std>
 800dace:	68e0      	ldr	r0, [r4, #12]
 800dad0:	2202      	movs	r2, #2
 800dad2:	2112      	movs	r1, #18
 800dad4:	f7ff ff78 	bl	800d9c8 <std>
 800dad8:	2301      	movs	r3, #1
 800dada:	61a3      	str	r3, [r4, #24]
 800dadc:	e7d2      	b.n	800da84 <__sinit+0xc>
 800dade:	bf00      	nop
 800dae0:	0800f9d8 	.word	0x0800f9d8
 800dae4:	0800da11 	.word	0x0800da11

0800dae8 <__sfp>:
 800dae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daea:	4607      	mov	r7, r0
 800daec:	f7ff ffac 	bl	800da48 <__sfp_lock_acquire>
 800daf0:	4b1e      	ldr	r3, [pc, #120]	; (800db6c <__sfp+0x84>)
 800daf2:	681e      	ldr	r6, [r3, #0]
 800daf4:	69b3      	ldr	r3, [r6, #24]
 800daf6:	b913      	cbnz	r3, 800dafe <__sfp+0x16>
 800daf8:	4630      	mov	r0, r6
 800dafa:	f7ff ffbd 	bl	800da78 <__sinit>
 800dafe:	3648      	adds	r6, #72	; 0x48
 800db00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800db04:	3b01      	subs	r3, #1
 800db06:	d503      	bpl.n	800db10 <__sfp+0x28>
 800db08:	6833      	ldr	r3, [r6, #0]
 800db0a:	b30b      	cbz	r3, 800db50 <__sfp+0x68>
 800db0c:	6836      	ldr	r6, [r6, #0]
 800db0e:	e7f7      	b.n	800db00 <__sfp+0x18>
 800db10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800db14:	b9d5      	cbnz	r5, 800db4c <__sfp+0x64>
 800db16:	4b16      	ldr	r3, [pc, #88]	; (800db70 <__sfp+0x88>)
 800db18:	60e3      	str	r3, [r4, #12]
 800db1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800db1e:	6665      	str	r5, [r4, #100]	; 0x64
 800db20:	f000 fbcc 	bl	800e2bc <__retarget_lock_init_recursive>
 800db24:	f7ff ff96 	bl	800da54 <__sfp_lock_release>
 800db28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800db2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800db30:	6025      	str	r5, [r4, #0]
 800db32:	61a5      	str	r5, [r4, #24]
 800db34:	2208      	movs	r2, #8
 800db36:	4629      	mov	r1, r5
 800db38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800db3c:	f7fd f920 	bl	800ad80 <memset>
 800db40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800db44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800db48:	4620      	mov	r0, r4
 800db4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db4c:	3468      	adds	r4, #104	; 0x68
 800db4e:	e7d9      	b.n	800db04 <__sfp+0x1c>
 800db50:	2104      	movs	r1, #4
 800db52:	4638      	mov	r0, r7
 800db54:	f7ff ff62 	bl	800da1c <__sfmoreglue>
 800db58:	4604      	mov	r4, r0
 800db5a:	6030      	str	r0, [r6, #0]
 800db5c:	2800      	cmp	r0, #0
 800db5e:	d1d5      	bne.n	800db0c <__sfp+0x24>
 800db60:	f7ff ff78 	bl	800da54 <__sfp_lock_release>
 800db64:	230c      	movs	r3, #12
 800db66:	603b      	str	r3, [r7, #0]
 800db68:	e7ee      	b.n	800db48 <__sfp+0x60>
 800db6a:	bf00      	nop
 800db6c:	0800f9d8 	.word	0x0800f9d8
 800db70:	ffff0001 	.word	0xffff0001

0800db74 <fiprintf>:
 800db74:	b40e      	push	{r1, r2, r3}
 800db76:	b503      	push	{r0, r1, lr}
 800db78:	4601      	mov	r1, r0
 800db7a:	ab03      	add	r3, sp, #12
 800db7c:	4805      	ldr	r0, [pc, #20]	; (800db94 <fiprintf+0x20>)
 800db7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800db82:	6800      	ldr	r0, [r0, #0]
 800db84:	9301      	str	r3, [sp, #4]
 800db86:	f001 fb67 	bl	800f258 <_vfiprintf_r>
 800db8a:	b002      	add	sp, #8
 800db8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800db90:	b003      	add	sp, #12
 800db92:	4770      	bx	lr
 800db94:	20000030 	.word	0x20000030

0800db98 <_fwalk_reent>:
 800db98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db9c:	4606      	mov	r6, r0
 800db9e:	4688      	mov	r8, r1
 800dba0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dba4:	2700      	movs	r7, #0
 800dba6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dbaa:	f1b9 0901 	subs.w	r9, r9, #1
 800dbae:	d505      	bpl.n	800dbbc <_fwalk_reent+0x24>
 800dbb0:	6824      	ldr	r4, [r4, #0]
 800dbb2:	2c00      	cmp	r4, #0
 800dbb4:	d1f7      	bne.n	800dba6 <_fwalk_reent+0xe>
 800dbb6:	4638      	mov	r0, r7
 800dbb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbbc:	89ab      	ldrh	r3, [r5, #12]
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d907      	bls.n	800dbd2 <_fwalk_reent+0x3a>
 800dbc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	d003      	beq.n	800dbd2 <_fwalk_reent+0x3a>
 800dbca:	4629      	mov	r1, r5
 800dbcc:	4630      	mov	r0, r6
 800dbce:	47c0      	blx	r8
 800dbd0:	4307      	orrs	r7, r0
 800dbd2:	3568      	adds	r5, #104	; 0x68
 800dbd4:	e7e9      	b.n	800dbaa <_fwalk_reent+0x12>

0800dbd6 <rshift>:
 800dbd6:	6903      	ldr	r3, [r0, #16]
 800dbd8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dbdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dbe0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dbe4:	f100 0414 	add.w	r4, r0, #20
 800dbe8:	dd45      	ble.n	800dc76 <rshift+0xa0>
 800dbea:	f011 011f 	ands.w	r1, r1, #31
 800dbee:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dbf2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dbf6:	d10c      	bne.n	800dc12 <rshift+0x3c>
 800dbf8:	f100 0710 	add.w	r7, r0, #16
 800dbfc:	4629      	mov	r1, r5
 800dbfe:	42b1      	cmp	r1, r6
 800dc00:	d334      	bcc.n	800dc6c <rshift+0x96>
 800dc02:	1a9b      	subs	r3, r3, r2
 800dc04:	009b      	lsls	r3, r3, #2
 800dc06:	1eea      	subs	r2, r5, #3
 800dc08:	4296      	cmp	r6, r2
 800dc0a:	bf38      	it	cc
 800dc0c:	2300      	movcc	r3, #0
 800dc0e:	4423      	add	r3, r4
 800dc10:	e015      	b.n	800dc3e <rshift+0x68>
 800dc12:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dc16:	f1c1 0820 	rsb	r8, r1, #32
 800dc1a:	40cf      	lsrs	r7, r1
 800dc1c:	f105 0e04 	add.w	lr, r5, #4
 800dc20:	46a1      	mov	r9, r4
 800dc22:	4576      	cmp	r6, lr
 800dc24:	46f4      	mov	ip, lr
 800dc26:	d815      	bhi.n	800dc54 <rshift+0x7e>
 800dc28:	1a9a      	subs	r2, r3, r2
 800dc2a:	0092      	lsls	r2, r2, #2
 800dc2c:	3a04      	subs	r2, #4
 800dc2e:	3501      	adds	r5, #1
 800dc30:	42ae      	cmp	r6, r5
 800dc32:	bf38      	it	cc
 800dc34:	2200      	movcc	r2, #0
 800dc36:	18a3      	adds	r3, r4, r2
 800dc38:	50a7      	str	r7, [r4, r2]
 800dc3a:	b107      	cbz	r7, 800dc3e <rshift+0x68>
 800dc3c:	3304      	adds	r3, #4
 800dc3e:	1b1a      	subs	r2, r3, r4
 800dc40:	42a3      	cmp	r3, r4
 800dc42:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dc46:	bf08      	it	eq
 800dc48:	2300      	moveq	r3, #0
 800dc4a:	6102      	str	r2, [r0, #16]
 800dc4c:	bf08      	it	eq
 800dc4e:	6143      	streq	r3, [r0, #20]
 800dc50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc54:	f8dc c000 	ldr.w	ip, [ip]
 800dc58:	fa0c fc08 	lsl.w	ip, ip, r8
 800dc5c:	ea4c 0707 	orr.w	r7, ip, r7
 800dc60:	f849 7b04 	str.w	r7, [r9], #4
 800dc64:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dc68:	40cf      	lsrs	r7, r1
 800dc6a:	e7da      	b.n	800dc22 <rshift+0x4c>
 800dc6c:	f851 cb04 	ldr.w	ip, [r1], #4
 800dc70:	f847 cf04 	str.w	ip, [r7, #4]!
 800dc74:	e7c3      	b.n	800dbfe <rshift+0x28>
 800dc76:	4623      	mov	r3, r4
 800dc78:	e7e1      	b.n	800dc3e <rshift+0x68>

0800dc7a <__hexdig_fun>:
 800dc7a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dc7e:	2b09      	cmp	r3, #9
 800dc80:	d802      	bhi.n	800dc88 <__hexdig_fun+0xe>
 800dc82:	3820      	subs	r0, #32
 800dc84:	b2c0      	uxtb	r0, r0
 800dc86:	4770      	bx	lr
 800dc88:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dc8c:	2b05      	cmp	r3, #5
 800dc8e:	d801      	bhi.n	800dc94 <__hexdig_fun+0x1a>
 800dc90:	3847      	subs	r0, #71	; 0x47
 800dc92:	e7f7      	b.n	800dc84 <__hexdig_fun+0xa>
 800dc94:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dc98:	2b05      	cmp	r3, #5
 800dc9a:	d801      	bhi.n	800dca0 <__hexdig_fun+0x26>
 800dc9c:	3827      	subs	r0, #39	; 0x27
 800dc9e:	e7f1      	b.n	800dc84 <__hexdig_fun+0xa>
 800dca0:	2000      	movs	r0, #0
 800dca2:	4770      	bx	lr

0800dca4 <__gethex>:
 800dca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca8:	ed2d 8b02 	vpush	{d8}
 800dcac:	b089      	sub	sp, #36	; 0x24
 800dcae:	ee08 0a10 	vmov	s16, r0
 800dcb2:	9304      	str	r3, [sp, #16]
 800dcb4:	4bb4      	ldr	r3, [pc, #720]	; (800df88 <__gethex+0x2e4>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	9301      	str	r3, [sp, #4]
 800dcba:	4618      	mov	r0, r3
 800dcbc:	468b      	mov	fp, r1
 800dcbe:	4690      	mov	r8, r2
 800dcc0:	f7f2 fa86 	bl	80001d0 <strlen>
 800dcc4:	9b01      	ldr	r3, [sp, #4]
 800dcc6:	f8db 2000 	ldr.w	r2, [fp]
 800dcca:	4403      	add	r3, r0
 800dccc:	4682      	mov	sl, r0
 800dcce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800dcd2:	9305      	str	r3, [sp, #20]
 800dcd4:	1c93      	adds	r3, r2, #2
 800dcd6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dcda:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dcde:	32fe      	adds	r2, #254	; 0xfe
 800dce0:	18d1      	adds	r1, r2, r3
 800dce2:	461f      	mov	r7, r3
 800dce4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dce8:	9100      	str	r1, [sp, #0]
 800dcea:	2830      	cmp	r0, #48	; 0x30
 800dcec:	d0f8      	beq.n	800dce0 <__gethex+0x3c>
 800dcee:	f7ff ffc4 	bl	800dc7a <__hexdig_fun>
 800dcf2:	4604      	mov	r4, r0
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	d13a      	bne.n	800dd6e <__gethex+0xca>
 800dcf8:	9901      	ldr	r1, [sp, #4]
 800dcfa:	4652      	mov	r2, sl
 800dcfc:	4638      	mov	r0, r7
 800dcfe:	f001 fc36 	bl	800f56e <strncmp>
 800dd02:	4605      	mov	r5, r0
 800dd04:	2800      	cmp	r0, #0
 800dd06:	d168      	bne.n	800ddda <__gethex+0x136>
 800dd08:	f817 000a 	ldrb.w	r0, [r7, sl]
 800dd0c:	eb07 060a 	add.w	r6, r7, sl
 800dd10:	f7ff ffb3 	bl	800dc7a <__hexdig_fun>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d062      	beq.n	800ddde <__gethex+0x13a>
 800dd18:	4633      	mov	r3, r6
 800dd1a:	7818      	ldrb	r0, [r3, #0]
 800dd1c:	2830      	cmp	r0, #48	; 0x30
 800dd1e:	461f      	mov	r7, r3
 800dd20:	f103 0301 	add.w	r3, r3, #1
 800dd24:	d0f9      	beq.n	800dd1a <__gethex+0x76>
 800dd26:	f7ff ffa8 	bl	800dc7a <__hexdig_fun>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	fab0 f480 	clz	r4, r0
 800dd30:	0964      	lsrs	r4, r4, #5
 800dd32:	4635      	mov	r5, r6
 800dd34:	9300      	str	r3, [sp, #0]
 800dd36:	463a      	mov	r2, r7
 800dd38:	4616      	mov	r6, r2
 800dd3a:	3201      	adds	r2, #1
 800dd3c:	7830      	ldrb	r0, [r6, #0]
 800dd3e:	f7ff ff9c 	bl	800dc7a <__hexdig_fun>
 800dd42:	2800      	cmp	r0, #0
 800dd44:	d1f8      	bne.n	800dd38 <__gethex+0x94>
 800dd46:	9901      	ldr	r1, [sp, #4]
 800dd48:	4652      	mov	r2, sl
 800dd4a:	4630      	mov	r0, r6
 800dd4c:	f001 fc0f 	bl	800f56e <strncmp>
 800dd50:	b980      	cbnz	r0, 800dd74 <__gethex+0xd0>
 800dd52:	b94d      	cbnz	r5, 800dd68 <__gethex+0xc4>
 800dd54:	eb06 050a 	add.w	r5, r6, sl
 800dd58:	462a      	mov	r2, r5
 800dd5a:	4616      	mov	r6, r2
 800dd5c:	3201      	adds	r2, #1
 800dd5e:	7830      	ldrb	r0, [r6, #0]
 800dd60:	f7ff ff8b 	bl	800dc7a <__hexdig_fun>
 800dd64:	2800      	cmp	r0, #0
 800dd66:	d1f8      	bne.n	800dd5a <__gethex+0xb6>
 800dd68:	1bad      	subs	r5, r5, r6
 800dd6a:	00ad      	lsls	r5, r5, #2
 800dd6c:	e004      	b.n	800dd78 <__gethex+0xd4>
 800dd6e:	2400      	movs	r4, #0
 800dd70:	4625      	mov	r5, r4
 800dd72:	e7e0      	b.n	800dd36 <__gethex+0x92>
 800dd74:	2d00      	cmp	r5, #0
 800dd76:	d1f7      	bne.n	800dd68 <__gethex+0xc4>
 800dd78:	7833      	ldrb	r3, [r6, #0]
 800dd7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dd7e:	2b50      	cmp	r3, #80	; 0x50
 800dd80:	d13b      	bne.n	800ddfa <__gethex+0x156>
 800dd82:	7873      	ldrb	r3, [r6, #1]
 800dd84:	2b2b      	cmp	r3, #43	; 0x2b
 800dd86:	d02c      	beq.n	800dde2 <__gethex+0x13e>
 800dd88:	2b2d      	cmp	r3, #45	; 0x2d
 800dd8a:	d02e      	beq.n	800ddea <__gethex+0x146>
 800dd8c:	1c71      	adds	r1, r6, #1
 800dd8e:	f04f 0900 	mov.w	r9, #0
 800dd92:	7808      	ldrb	r0, [r1, #0]
 800dd94:	f7ff ff71 	bl	800dc7a <__hexdig_fun>
 800dd98:	1e43      	subs	r3, r0, #1
 800dd9a:	b2db      	uxtb	r3, r3
 800dd9c:	2b18      	cmp	r3, #24
 800dd9e:	d82c      	bhi.n	800ddfa <__gethex+0x156>
 800dda0:	f1a0 0210 	sub.w	r2, r0, #16
 800dda4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dda8:	f7ff ff67 	bl	800dc7a <__hexdig_fun>
 800ddac:	1e43      	subs	r3, r0, #1
 800ddae:	b2db      	uxtb	r3, r3
 800ddb0:	2b18      	cmp	r3, #24
 800ddb2:	d91d      	bls.n	800ddf0 <__gethex+0x14c>
 800ddb4:	f1b9 0f00 	cmp.w	r9, #0
 800ddb8:	d000      	beq.n	800ddbc <__gethex+0x118>
 800ddba:	4252      	negs	r2, r2
 800ddbc:	4415      	add	r5, r2
 800ddbe:	f8cb 1000 	str.w	r1, [fp]
 800ddc2:	b1e4      	cbz	r4, 800ddfe <__gethex+0x15a>
 800ddc4:	9b00      	ldr	r3, [sp, #0]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	bf14      	ite	ne
 800ddca:	2700      	movne	r7, #0
 800ddcc:	2706      	moveq	r7, #6
 800ddce:	4638      	mov	r0, r7
 800ddd0:	b009      	add	sp, #36	; 0x24
 800ddd2:	ecbd 8b02 	vpop	{d8}
 800ddd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddda:	463e      	mov	r6, r7
 800dddc:	4625      	mov	r5, r4
 800ddde:	2401      	movs	r4, #1
 800dde0:	e7ca      	b.n	800dd78 <__gethex+0xd4>
 800dde2:	f04f 0900 	mov.w	r9, #0
 800dde6:	1cb1      	adds	r1, r6, #2
 800dde8:	e7d3      	b.n	800dd92 <__gethex+0xee>
 800ddea:	f04f 0901 	mov.w	r9, #1
 800ddee:	e7fa      	b.n	800dde6 <__gethex+0x142>
 800ddf0:	230a      	movs	r3, #10
 800ddf2:	fb03 0202 	mla	r2, r3, r2, r0
 800ddf6:	3a10      	subs	r2, #16
 800ddf8:	e7d4      	b.n	800dda4 <__gethex+0x100>
 800ddfa:	4631      	mov	r1, r6
 800ddfc:	e7df      	b.n	800ddbe <__gethex+0x11a>
 800ddfe:	1bf3      	subs	r3, r6, r7
 800de00:	3b01      	subs	r3, #1
 800de02:	4621      	mov	r1, r4
 800de04:	2b07      	cmp	r3, #7
 800de06:	dc0b      	bgt.n	800de20 <__gethex+0x17c>
 800de08:	ee18 0a10 	vmov	r0, s16
 800de0c:	f000 fae6 	bl	800e3dc <_Balloc>
 800de10:	4604      	mov	r4, r0
 800de12:	b940      	cbnz	r0, 800de26 <__gethex+0x182>
 800de14:	4b5d      	ldr	r3, [pc, #372]	; (800df8c <__gethex+0x2e8>)
 800de16:	4602      	mov	r2, r0
 800de18:	21de      	movs	r1, #222	; 0xde
 800de1a:	485d      	ldr	r0, [pc, #372]	; (800df90 <__gethex+0x2ec>)
 800de1c:	f7fe fe78 	bl	800cb10 <__assert_func>
 800de20:	3101      	adds	r1, #1
 800de22:	105b      	asrs	r3, r3, #1
 800de24:	e7ee      	b.n	800de04 <__gethex+0x160>
 800de26:	f100 0914 	add.w	r9, r0, #20
 800de2a:	f04f 0b00 	mov.w	fp, #0
 800de2e:	f1ca 0301 	rsb	r3, sl, #1
 800de32:	f8cd 9008 	str.w	r9, [sp, #8]
 800de36:	f8cd b000 	str.w	fp, [sp]
 800de3a:	9306      	str	r3, [sp, #24]
 800de3c:	42b7      	cmp	r7, r6
 800de3e:	d340      	bcc.n	800dec2 <__gethex+0x21e>
 800de40:	9802      	ldr	r0, [sp, #8]
 800de42:	9b00      	ldr	r3, [sp, #0]
 800de44:	f840 3b04 	str.w	r3, [r0], #4
 800de48:	eba0 0009 	sub.w	r0, r0, r9
 800de4c:	1080      	asrs	r0, r0, #2
 800de4e:	0146      	lsls	r6, r0, #5
 800de50:	6120      	str	r0, [r4, #16]
 800de52:	4618      	mov	r0, r3
 800de54:	f000 fbb4 	bl	800e5c0 <__hi0bits>
 800de58:	1a30      	subs	r0, r6, r0
 800de5a:	f8d8 6000 	ldr.w	r6, [r8]
 800de5e:	42b0      	cmp	r0, r6
 800de60:	dd63      	ble.n	800df2a <__gethex+0x286>
 800de62:	1b87      	subs	r7, r0, r6
 800de64:	4639      	mov	r1, r7
 800de66:	4620      	mov	r0, r4
 800de68:	f000 ff58 	bl	800ed1c <__any_on>
 800de6c:	4682      	mov	sl, r0
 800de6e:	b1a8      	cbz	r0, 800de9c <__gethex+0x1f8>
 800de70:	1e7b      	subs	r3, r7, #1
 800de72:	1159      	asrs	r1, r3, #5
 800de74:	f003 021f 	and.w	r2, r3, #31
 800de78:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800de7c:	f04f 0a01 	mov.w	sl, #1
 800de80:	fa0a f202 	lsl.w	r2, sl, r2
 800de84:	420a      	tst	r2, r1
 800de86:	d009      	beq.n	800de9c <__gethex+0x1f8>
 800de88:	4553      	cmp	r3, sl
 800de8a:	dd05      	ble.n	800de98 <__gethex+0x1f4>
 800de8c:	1eb9      	subs	r1, r7, #2
 800de8e:	4620      	mov	r0, r4
 800de90:	f000 ff44 	bl	800ed1c <__any_on>
 800de94:	2800      	cmp	r0, #0
 800de96:	d145      	bne.n	800df24 <__gethex+0x280>
 800de98:	f04f 0a02 	mov.w	sl, #2
 800de9c:	4639      	mov	r1, r7
 800de9e:	4620      	mov	r0, r4
 800dea0:	f7ff fe99 	bl	800dbd6 <rshift>
 800dea4:	443d      	add	r5, r7
 800dea6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800deaa:	42ab      	cmp	r3, r5
 800deac:	da4c      	bge.n	800df48 <__gethex+0x2a4>
 800deae:	ee18 0a10 	vmov	r0, s16
 800deb2:	4621      	mov	r1, r4
 800deb4:	f000 fad2 	bl	800e45c <_Bfree>
 800deb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800deba:	2300      	movs	r3, #0
 800debc:	6013      	str	r3, [r2, #0]
 800debe:	27a3      	movs	r7, #163	; 0xa3
 800dec0:	e785      	b.n	800ddce <__gethex+0x12a>
 800dec2:	1e73      	subs	r3, r6, #1
 800dec4:	9a05      	ldr	r2, [sp, #20]
 800dec6:	9303      	str	r3, [sp, #12]
 800dec8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800decc:	4293      	cmp	r3, r2
 800dece:	d019      	beq.n	800df04 <__gethex+0x260>
 800ded0:	f1bb 0f20 	cmp.w	fp, #32
 800ded4:	d107      	bne.n	800dee6 <__gethex+0x242>
 800ded6:	9b02      	ldr	r3, [sp, #8]
 800ded8:	9a00      	ldr	r2, [sp, #0]
 800deda:	f843 2b04 	str.w	r2, [r3], #4
 800dede:	9302      	str	r3, [sp, #8]
 800dee0:	2300      	movs	r3, #0
 800dee2:	9300      	str	r3, [sp, #0]
 800dee4:	469b      	mov	fp, r3
 800dee6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800deea:	f7ff fec6 	bl	800dc7a <__hexdig_fun>
 800deee:	9b00      	ldr	r3, [sp, #0]
 800def0:	f000 000f 	and.w	r0, r0, #15
 800def4:	fa00 f00b 	lsl.w	r0, r0, fp
 800def8:	4303      	orrs	r3, r0
 800defa:	9300      	str	r3, [sp, #0]
 800defc:	f10b 0b04 	add.w	fp, fp, #4
 800df00:	9b03      	ldr	r3, [sp, #12]
 800df02:	e00d      	b.n	800df20 <__gethex+0x27c>
 800df04:	9b03      	ldr	r3, [sp, #12]
 800df06:	9a06      	ldr	r2, [sp, #24]
 800df08:	4413      	add	r3, r2
 800df0a:	42bb      	cmp	r3, r7
 800df0c:	d3e0      	bcc.n	800ded0 <__gethex+0x22c>
 800df0e:	4618      	mov	r0, r3
 800df10:	9901      	ldr	r1, [sp, #4]
 800df12:	9307      	str	r3, [sp, #28]
 800df14:	4652      	mov	r2, sl
 800df16:	f001 fb2a 	bl	800f56e <strncmp>
 800df1a:	9b07      	ldr	r3, [sp, #28]
 800df1c:	2800      	cmp	r0, #0
 800df1e:	d1d7      	bne.n	800ded0 <__gethex+0x22c>
 800df20:	461e      	mov	r6, r3
 800df22:	e78b      	b.n	800de3c <__gethex+0x198>
 800df24:	f04f 0a03 	mov.w	sl, #3
 800df28:	e7b8      	b.n	800de9c <__gethex+0x1f8>
 800df2a:	da0a      	bge.n	800df42 <__gethex+0x29e>
 800df2c:	1a37      	subs	r7, r6, r0
 800df2e:	4621      	mov	r1, r4
 800df30:	ee18 0a10 	vmov	r0, s16
 800df34:	463a      	mov	r2, r7
 800df36:	f000 fcad 	bl	800e894 <__lshift>
 800df3a:	1bed      	subs	r5, r5, r7
 800df3c:	4604      	mov	r4, r0
 800df3e:	f100 0914 	add.w	r9, r0, #20
 800df42:	f04f 0a00 	mov.w	sl, #0
 800df46:	e7ae      	b.n	800dea6 <__gethex+0x202>
 800df48:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800df4c:	42a8      	cmp	r0, r5
 800df4e:	dd72      	ble.n	800e036 <__gethex+0x392>
 800df50:	1b45      	subs	r5, r0, r5
 800df52:	42ae      	cmp	r6, r5
 800df54:	dc36      	bgt.n	800dfc4 <__gethex+0x320>
 800df56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df5a:	2b02      	cmp	r3, #2
 800df5c:	d02a      	beq.n	800dfb4 <__gethex+0x310>
 800df5e:	2b03      	cmp	r3, #3
 800df60:	d02c      	beq.n	800dfbc <__gethex+0x318>
 800df62:	2b01      	cmp	r3, #1
 800df64:	d11c      	bne.n	800dfa0 <__gethex+0x2fc>
 800df66:	42ae      	cmp	r6, r5
 800df68:	d11a      	bne.n	800dfa0 <__gethex+0x2fc>
 800df6a:	2e01      	cmp	r6, #1
 800df6c:	d112      	bne.n	800df94 <__gethex+0x2f0>
 800df6e:	9a04      	ldr	r2, [sp, #16]
 800df70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800df74:	6013      	str	r3, [r2, #0]
 800df76:	2301      	movs	r3, #1
 800df78:	6123      	str	r3, [r4, #16]
 800df7a:	f8c9 3000 	str.w	r3, [r9]
 800df7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df80:	2762      	movs	r7, #98	; 0x62
 800df82:	601c      	str	r4, [r3, #0]
 800df84:	e723      	b.n	800ddce <__gethex+0x12a>
 800df86:	bf00      	nop
 800df88:	0800fd58 	.word	0x0800fd58
 800df8c:	0800fc7d 	.word	0x0800fc7d
 800df90:	0800fcf0 	.word	0x0800fcf0
 800df94:	1e71      	subs	r1, r6, #1
 800df96:	4620      	mov	r0, r4
 800df98:	f000 fec0 	bl	800ed1c <__any_on>
 800df9c:	2800      	cmp	r0, #0
 800df9e:	d1e6      	bne.n	800df6e <__gethex+0x2ca>
 800dfa0:	ee18 0a10 	vmov	r0, s16
 800dfa4:	4621      	mov	r1, r4
 800dfa6:	f000 fa59 	bl	800e45c <_Bfree>
 800dfaa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dfac:	2300      	movs	r3, #0
 800dfae:	6013      	str	r3, [r2, #0]
 800dfb0:	2750      	movs	r7, #80	; 0x50
 800dfb2:	e70c      	b.n	800ddce <__gethex+0x12a>
 800dfb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d1f2      	bne.n	800dfa0 <__gethex+0x2fc>
 800dfba:	e7d8      	b.n	800df6e <__gethex+0x2ca>
 800dfbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d1d5      	bne.n	800df6e <__gethex+0x2ca>
 800dfc2:	e7ed      	b.n	800dfa0 <__gethex+0x2fc>
 800dfc4:	1e6f      	subs	r7, r5, #1
 800dfc6:	f1ba 0f00 	cmp.w	sl, #0
 800dfca:	d131      	bne.n	800e030 <__gethex+0x38c>
 800dfcc:	b127      	cbz	r7, 800dfd8 <__gethex+0x334>
 800dfce:	4639      	mov	r1, r7
 800dfd0:	4620      	mov	r0, r4
 800dfd2:	f000 fea3 	bl	800ed1c <__any_on>
 800dfd6:	4682      	mov	sl, r0
 800dfd8:	117b      	asrs	r3, r7, #5
 800dfda:	2101      	movs	r1, #1
 800dfdc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800dfe0:	f007 071f 	and.w	r7, r7, #31
 800dfe4:	fa01 f707 	lsl.w	r7, r1, r7
 800dfe8:	421f      	tst	r7, r3
 800dfea:	4629      	mov	r1, r5
 800dfec:	4620      	mov	r0, r4
 800dfee:	bf18      	it	ne
 800dff0:	f04a 0a02 	orrne.w	sl, sl, #2
 800dff4:	1b76      	subs	r6, r6, r5
 800dff6:	f7ff fdee 	bl	800dbd6 <rshift>
 800dffa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800dffe:	2702      	movs	r7, #2
 800e000:	f1ba 0f00 	cmp.w	sl, #0
 800e004:	d048      	beq.n	800e098 <__gethex+0x3f4>
 800e006:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e00a:	2b02      	cmp	r3, #2
 800e00c:	d015      	beq.n	800e03a <__gethex+0x396>
 800e00e:	2b03      	cmp	r3, #3
 800e010:	d017      	beq.n	800e042 <__gethex+0x39e>
 800e012:	2b01      	cmp	r3, #1
 800e014:	d109      	bne.n	800e02a <__gethex+0x386>
 800e016:	f01a 0f02 	tst.w	sl, #2
 800e01a:	d006      	beq.n	800e02a <__gethex+0x386>
 800e01c:	f8d9 0000 	ldr.w	r0, [r9]
 800e020:	ea4a 0a00 	orr.w	sl, sl, r0
 800e024:	f01a 0f01 	tst.w	sl, #1
 800e028:	d10e      	bne.n	800e048 <__gethex+0x3a4>
 800e02a:	f047 0710 	orr.w	r7, r7, #16
 800e02e:	e033      	b.n	800e098 <__gethex+0x3f4>
 800e030:	f04f 0a01 	mov.w	sl, #1
 800e034:	e7d0      	b.n	800dfd8 <__gethex+0x334>
 800e036:	2701      	movs	r7, #1
 800e038:	e7e2      	b.n	800e000 <__gethex+0x35c>
 800e03a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e03c:	f1c3 0301 	rsb	r3, r3, #1
 800e040:	9315      	str	r3, [sp, #84]	; 0x54
 800e042:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e044:	2b00      	cmp	r3, #0
 800e046:	d0f0      	beq.n	800e02a <__gethex+0x386>
 800e048:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e04c:	f104 0314 	add.w	r3, r4, #20
 800e050:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e054:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e058:	f04f 0c00 	mov.w	ip, #0
 800e05c:	4618      	mov	r0, r3
 800e05e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e062:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e066:	d01c      	beq.n	800e0a2 <__gethex+0x3fe>
 800e068:	3201      	adds	r2, #1
 800e06a:	6002      	str	r2, [r0, #0]
 800e06c:	2f02      	cmp	r7, #2
 800e06e:	f104 0314 	add.w	r3, r4, #20
 800e072:	d13f      	bne.n	800e0f4 <__gethex+0x450>
 800e074:	f8d8 2000 	ldr.w	r2, [r8]
 800e078:	3a01      	subs	r2, #1
 800e07a:	42b2      	cmp	r2, r6
 800e07c:	d10a      	bne.n	800e094 <__gethex+0x3f0>
 800e07e:	1171      	asrs	r1, r6, #5
 800e080:	2201      	movs	r2, #1
 800e082:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e086:	f006 061f 	and.w	r6, r6, #31
 800e08a:	fa02 f606 	lsl.w	r6, r2, r6
 800e08e:	421e      	tst	r6, r3
 800e090:	bf18      	it	ne
 800e092:	4617      	movne	r7, r2
 800e094:	f047 0720 	orr.w	r7, r7, #32
 800e098:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e09a:	601c      	str	r4, [r3, #0]
 800e09c:	9b04      	ldr	r3, [sp, #16]
 800e09e:	601d      	str	r5, [r3, #0]
 800e0a0:	e695      	b.n	800ddce <__gethex+0x12a>
 800e0a2:	4299      	cmp	r1, r3
 800e0a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e0a8:	d8d8      	bhi.n	800e05c <__gethex+0x3b8>
 800e0aa:	68a3      	ldr	r3, [r4, #8]
 800e0ac:	459b      	cmp	fp, r3
 800e0ae:	db19      	blt.n	800e0e4 <__gethex+0x440>
 800e0b0:	6861      	ldr	r1, [r4, #4]
 800e0b2:	ee18 0a10 	vmov	r0, s16
 800e0b6:	3101      	adds	r1, #1
 800e0b8:	f000 f990 	bl	800e3dc <_Balloc>
 800e0bc:	4681      	mov	r9, r0
 800e0be:	b918      	cbnz	r0, 800e0c8 <__gethex+0x424>
 800e0c0:	4b1a      	ldr	r3, [pc, #104]	; (800e12c <__gethex+0x488>)
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	2184      	movs	r1, #132	; 0x84
 800e0c6:	e6a8      	b.n	800de1a <__gethex+0x176>
 800e0c8:	6922      	ldr	r2, [r4, #16]
 800e0ca:	3202      	adds	r2, #2
 800e0cc:	f104 010c 	add.w	r1, r4, #12
 800e0d0:	0092      	lsls	r2, r2, #2
 800e0d2:	300c      	adds	r0, #12
 800e0d4:	f000 f974 	bl	800e3c0 <memcpy>
 800e0d8:	4621      	mov	r1, r4
 800e0da:	ee18 0a10 	vmov	r0, s16
 800e0de:	f000 f9bd 	bl	800e45c <_Bfree>
 800e0e2:	464c      	mov	r4, r9
 800e0e4:	6923      	ldr	r3, [r4, #16]
 800e0e6:	1c5a      	adds	r2, r3, #1
 800e0e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e0ec:	6122      	str	r2, [r4, #16]
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	615a      	str	r2, [r3, #20]
 800e0f2:	e7bb      	b.n	800e06c <__gethex+0x3c8>
 800e0f4:	6922      	ldr	r2, [r4, #16]
 800e0f6:	455a      	cmp	r2, fp
 800e0f8:	dd0b      	ble.n	800e112 <__gethex+0x46e>
 800e0fa:	2101      	movs	r1, #1
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	f7ff fd6a 	bl	800dbd6 <rshift>
 800e102:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e106:	3501      	adds	r5, #1
 800e108:	42ab      	cmp	r3, r5
 800e10a:	f6ff aed0 	blt.w	800deae <__gethex+0x20a>
 800e10e:	2701      	movs	r7, #1
 800e110:	e7c0      	b.n	800e094 <__gethex+0x3f0>
 800e112:	f016 061f 	ands.w	r6, r6, #31
 800e116:	d0fa      	beq.n	800e10e <__gethex+0x46a>
 800e118:	4453      	add	r3, sl
 800e11a:	f1c6 0620 	rsb	r6, r6, #32
 800e11e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e122:	f000 fa4d 	bl	800e5c0 <__hi0bits>
 800e126:	42b0      	cmp	r0, r6
 800e128:	dbe7      	blt.n	800e0fa <__gethex+0x456>
 800e12a:	e7f0      	b.n	800e10e <__gethex+0x46a>
 800e12c:	0800fc7d 	.word	0x0800fc7d

0800e130 <L_shift>:
 800e130:	f1c2 0208 	rsb	r2, r2, #8
 800e134:	0092      	lsls	r2, r2, #2
 800e136:	b570      	push	{r4, r5, r6, lr}
 800e138:	f1c2 0620 	rsb	r6, r2, #32
 800e13c:	6843      	ldr	r3, [r0, #4]
 800e13e:	6804      	ldr	r4, [r0, #0]
 800e140:	fa03 f506 	lsl.w	r5, r3, r6
 800e144:	432c      	orrs	r4, r5
 800e146:	40d3      	lsrs	r3, r2
 800e148:	6004      	str	r4, [r0, #0]
 800e14a:	f840 3f04 	str.w	r3, [r0, #4]!
 800e14e:	4288      	cmp	r0, r1
 800e150:	d3f4      	bcc.n	800e13c <L_shift+0xc>
 800e152:	bd70      	pop	{r4, r5, r6, pc}

0800e154 <__match>:
 800e154:	b530      	push	{r4, r5, lr}
 800e156:	6803      	ldr	r3, [r0, #0]
 800e158:	3301      	adds	r3, #1
 800e15a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e15e:	b914      	cbnz	r4, 800e166 <__match+0x12>
 800e160:	6003      	str	r3, [r0, #0]
 800e162:	2001      	movs	r0, #1
 800e164:	bd30      	pop	{r4, r5, pc}
 800e166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e16a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e16e:	2d19      	cmp	r5, #25
 800e170:	bf98      	it	ls
 800e172:	3220      	addls	r2, #32
 800e174:	42a2      	cmp	r2, r4
 800e176:	d0f0      	beq.n	800e15a <__match+0x6>
 800e178:	2000      	movs	r0, #0
 800e17a:	e7f3      	b.n	800e164 <__match+0x10>

0800e17c <__hexnan>:
 800e17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e180:	680b      	ldr	r3, [r1, #0]
 800e182:	115e      	asrs	r6, r3, #5
 800e184:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e188:	f013 031f 	ands.w	r3, r3, #31
 800e18c:	b087      	sub	sp, #28
 800e18e:	bf18      	it	ne
 800e190:	3604      	addne	r6, #4
 800e192:	2500      	movs	r5, #0
 800e194:	1f37      	subs	r7, r6, #4
 800e196:	4690      	mov	r8, r2
 800e198:	6802      	ldr	r2, [r0, #0]
 800e19a:	9301      	str	r3, [sp, #4]
 800e19c:	4682      	mov	sl, r0
 800e19e:	f846 5c04 	str.w	r5, [r6, #-4]
 800e1a2:	46b9      	mov	r9, r7
 800e1a4:	463c      	mov	r4, r7
 800e1a6:	9502      	str	r5, [sp, #8]
 800e1a8:	46ab      	mov	fp, r5
 800e1aa:	7851      	ldrb	r1, [r2, #1]
 800e1ac:	1c53      	adds	r3, r2, #1
 800e1ae:	9303      	str	r3, [sp, #12]
 800e1b0:	b341      	cbz	r1, 800e204 <__hexnan+0x88>
 800e1b2:	4608      	mov	r0, r1
 800e1b4:	9205      	str	r2, [sp, #20]
 800e1b6:	9104      	str	r1, [sp, #16]
 800e1b8:	f7ff fd5f 	bl	800dc7a <__hexdig_fun>
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	d14f      	bne.n	800e260 <__hexnan+0xe4>
 800e1c0:	9904      	ldr	r1, [sp, #16]
 800e1c2:	9a05      	ldr	r2, [sp, #20]
 800e1c4:	2920      	cmp	r1, #32
 800e1c6:	d818      	bhi.n	800e1fa <__hexnan+0x7e>
 800e1c8:	9b02      	ldr	r3, [sp, #8]
 800e1ca:	459b      	cmp	fp, r3
 800e1cc:	dd13      	ble.n	800e1f6 <__hexnan+0x7a>
 800e1ce:	454c      	cmp	r4, r9
 800e1d0:	d206      	bcs.n	800e1e0 <__hexnan+0x64>
 800e1d2:	2d07      	cmp	r5, #7
 800e1d4:	dc04      	bgt.n	800e1e0 <__hexnan+0x64>
 800e1d6:	462a      	mov	r2, r5
 800e1d8:	4649      	mov	r1, r9
 800e1da:	4620      	mov	r0, r4
 800e1dc:	f7ff ffa8 	bl	800e130 <L_shift>
 800e1e0:	4544      	cmp	r4, r8
 800e1e2:	d950      	bls.n	800e286 <__hexnan+0x10a>
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	f1a4 0904 	sub.w	r9, r4, #4
 800e1ea:	f844 3c04 	str.w	r3, [r4, #-4]
 800e1ee:	f8cd b008 	str.w	fp, [sp, #8]
 800e1f2:	464c      	mov	r4, r9
 800e1f4:	461d      	mov	r5, r3
 800e1f6:	9a03      	ldr	r2, [sp, #12]
 800e1f8:	e7d7      	b.n	800e1aa <__hexnan+0x2e>
 800e1fa:	2929      	cmp	r1, #41	; 0x29
 800e1fc:	d156      	bne.n	800e2ac <__hexnan+0x130>
 800e1fe:	3202      	adds	r2, #2
 800e200:	f8ca 2000 	str.w	r2, [sl]
 800e204:	f1bb 0f00 	cmp.w	fp, #0
 800e208:	d050      	beq.n	800e2ac <__hexnan+0x130>
 800e20a:	454c      	cmp	r4, r9
 800e20c:	d206      	bcs.n	800e21c <__hexnan+0xa0>
 800e20e:	2d07      	cmp	r5, #7
 800e210:	dc04      	bgt.n	800e21c <__hexnan+0xa0>
 800e212:	462a      	mov	r2, r5
 800e214:	4649      	mov	r1, r9
 800e216:	4620      	mov	r0, r4
 800e218:	f7ff ff8a 	bl	800e130 <L_shift>
 800e21c:	4544      	cmp	r4, r8
 800e21e:	d934      	bls.n	800e28a <__hexnan+0x10e>
 800e220:	f1a8 0204 	sub.w	r2, r8, #4
 800e224:	4623      	mov	r3, r4
 800e226:	f853 1b04 	ldr.w	r1, [r3], #4
 800e22a:	f842 1f04 	str.w	r1, [r2, #4]!
 800e22e:	429f      	cmp	r7, r3
 800e230:	d2f9      	bcs.n	800e226 <__hexnan+0xaa>
 800e232:	1b3b      	subs	r3, r7, r4
 800e234:	f023 0303 	bic.w	r3, r3, #3
 800e238:	3304      	adds	r3, #4
 800e23a:	3401      	adds	r4, #1
 800e23c:	3e03      	subs	r6, #3
 800e23e:	42b4      	cmp	r4, r6
 800e240:	bf88      	it	hi
 800e242:	2304      	movhi	r3, #4
 800e244:	4443      	add	r3, r8
 800e246:	2200      	movs	r2, #0
 800e248:	f843 2b04 	str.w	r2, [r3], #4
 800e24c:	429f      	cmp	r7, r3
 800e24e:	d2fb      	bcs.n	800e248 <__hexnan+0xcc>
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	b91b      	cbnz	r3, 800e25c <__hexnan+0xe0>
 800e254:	4547      	cmp	r7, r8
 800e256:	d127      	bne.n	800e2a8 <__hexnan+0x12c>
 800e258:	2301      	movs	r3, #1
 800e25a:	603b      	str	r3, [r7, #0]
 800e25c:	2005      	movs	r0, #5
 800e25e:	e026      	b.n	800e2ae <__hexnan+0x132>
 800e260:	3501      	adds	r5, #1
 800e262:	2d08      	cmp	r5, #8
 800e264:	f10b 0b01 	add.w	fp, fp, #1
 800e268:	dd06      	ble.n	800e278 <__hexnan+0xfc>
 800e26a:	4544      	cmp	r4, r8
 800e26c:	d9c3      	bls.n	800e1f6 <__hexnan+0x7a>
 800e26e:	2300      	movs	r3, #0
 800e270:	f844 3c04 	str.w	r3, [r4, #-4]
 800e274:	2501      	movs	r5, #1
 800e276:	3c04      	subs	r4, #4
 800e278:	6822      	ldr	r2, [r4, #0]
 800e27a:	f000 000f 	and.w	r0, r0, #15
 800e27e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e282:	6022      	str	r2, [r4, #0]
 800e284:	e7b7      	b.n	800e1f6 <__hexnan+0x7a>
 800e286:	2508      	movs	r5, #8
 800e288:	e7b5      	b.n	800e1f6 <__hexnan+0x7a>
 800e28a:	9b01      	ldr	r3, [sp, #4]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d0df      	beq.n	800e250 <__hexnan+0xd4>
 800e290:	f04f 32ff 	mov.w	r2, #4294967295
 800e294:	f1c3 0320 	rsb	r3, r3, #32
 800e298:	fa22 f303 	lsr.w	r3, r2, r3
 800e29c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e2a0:	401a      	ands	r2, r3
 800e2a2:	f846 2c04 	str.w	r2, [r6, #-4]
 800e2a6:	e7d3      	b.n	800e250 <__hexnan+0xd4>
 800e2a8:	3f04      	subs	r7, #4
 800e2aa:	e7d1      	b.n	800e250 <__hexnan+0xd4>
 800e2ac:	2004      	movs	r0, #4
 800e2ae:	b007      	add	sp, #28
 800e2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e2b4 <_localeconv_r>:
 800e2b4:	4800      	ldr	r0, [pc, #0]	; (800e2b8 <_localeconv_r+0x4>)
 800e2b6:	4770      	bx	lr
 800e2b8:	20000188 	.word	0x20000188

0800e2bc <__retarget_lock_init_recursive>:
 800e2bc:	4770      	bx	lr

0800e2be <__retarget_lock_acquire_recursive>:
 800e2be:	4770      	bx	lr

0800e2c0 <__retarget_lock_release_recursive>:
 800e2c0:	4770      	bx	lr

0800e2c2 <__swhatbuf_r>:
 800e2c2:	b570      	push	{r4, r5, r6, lr}
 800e2c4:	460e      	mov	r6, r1
 800e2c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2ca:	2900      	cmp	r1, #0
 800e2cc:	b096      	sub	sp, #88	; 0x58
 800e2ce:	4614      	mov	r4, r2
 800e2d0:	461d      	mov	r5, r3
 800e2d2:	da08      	bge.n	800e2e6 <__swhatbuf_r+0x24>
 800e2d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e2d8:	2200      	movs	r2, #0
 800e2da:	602a      	str	r2, [r5, #0]
 800e2dc:	061a      	lsls	r2, r3, #24
 800e2de:	d410      	bmi.n	800e302 <__swhatbuf_r+0x40>
 800e2e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2e4:	e00e      	b.n	800e304 <__swhatbuf_r+0x42>
 800e2e6:	466a      	mov	r2, sp
 800e2e8:	f001 f98c 	bl	800f604 <_fstat_r>
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	dbf1      	blt.n	800e2d4 <__swhatbuf_r+0x12>
 800e2f0:	9a01      	ldr	r2, [sp, #4]
 800e2f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e2f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e2fa:	425a      	negs	r2, r3
 800e2fc:	415a      	adcs	r2, r3
 800e2fe:	602a      	str	r2, [r5, #0]
 800e300:	e7ee      	b.n	800e2e0 <__swhatbuf_r+0x1e>
 800e302:	2340      	movs	r3, #64	; 0x40
 800e304:	2000      	movs	r0, #0
 800e306:	6023      	str	r3, [r4, #0]
 800e308:	b016      	add	sp, #88	; 0x58
 800e30a:	bd70      	pop	{r4, r5, r6, pc}

0800e30c <__smakebuf_r>:
 800e30c:	898b      	ldrh	r3, [r1, #12]
 800e30e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e310:	079d      	lsls	r5, r3, #30
 800e312:	4606      	mov	r6, r0
 800e314:	460c      	mov	r4, r1
 800e316:	d507      	bpl.n	800e328 <__smakebuf_r+0x1c>
 800e318:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e31c:	6023      	str	r3, [r4, #0]
 800e31e:	6123      	str	r3, [r4, #16]
 800e320:	2301      	movs	r3, #1
 800e322:	6163      	str	r3, [r4, #20]
 800e324:	b002      	add	sp, #8
 800e326:	bd70      	pop	{r4, r5, r6, pc}
 800e328:	ab01      	add	r3, sp, #4
 800e32a:	466a      	mov	r2, sp
 800e32c:	f7ff ffc9 	bl	800e2c2 <__swhatbuf_r>
 800e330:	9900      	ldr	r1, [sp, #0]
 800e332:	4605      	mov	r5, r0
 800e334:	4630      	mov	r0, r6
 800e336:	f000 fd95 	bl	800ee64 <_malloc_r>
 800e33a:	b948      	cbnz	r0, 800e350 <__smakebuf_r+0x44>
 800e33c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e340:	059a      	lsls	r2, r3, #22
 800e342:	d4ef      	bmi.n	800e324 <__smakebuf_r+0x18>
 800e344:	f023 0303 	bic.w	r3, r3, #3
 800e348:	f043 0302 	orr.w	r3, r3, #2
 800e34c:	81a3      	strh	r3, [r4, #12]
 800e34e:	e7e3      	b.n	800e318 <__smakebuf_r+0xc>
 800e350:	4b0d      	ldr	r3, [pc, #52]	; (800e388 <__smakebuf_r+0x7c>)
 800e352:	62b3      	str	r3, [r6, #40]	; 0x28
 800e354:	89a3      	ldrh	r3, [r4, #12]
 800e356:	6020      	str	r0, [r4, #0]
 800e358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e35c:	81a3      	strh	r3, [r4, #12]
 800e35e:	9b00      	ldr	r3, [sp, #0]
 800e360:	6163      	str	r3, [r4, #20]
 800e362:	9b01      	ldr	r3, [sp, #4]
 800e364:	6120      	str	r0, [r4, #16]
 800e366:	b15b      	cbz	r3, 800e380 <__smakebuf_r+0x74>
 800e368:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e36c:	4630      	mov	r0, r6
 800e36e:	f001 f95b 	bl	800f628 <_isatty_r>
 800e372:	b128      	cbz	r0, 800e380 <__smakebuf_r+0x74>
 800e374:	89a3      	ldrh	r3, [r4, #12]
 800e376:	f023 0303 	bic.w	r3, r3, #3
 800e37a:	f043 0301 	orr.w	r3, r3, #1
 800e37e:	81a3      	strh	r3, [r4, #12]
 800e380:	89a0      	ldrh	r0, [r4, #12]
 800e382:	4305      	orrs	r5, r0
 800e384:	81a5      	strh	r5, [r4, #12]
 800e386:	e7cd      	b.n	800e324 <__smakebuf_r+0x18>
 800e388:	0800da11 	.word	0x0800da11

0800e38c <malloc>:
 800e38c:	4b02      	ldr	r3, [pc, #8]	; (800e398 <malloc+0xc>)
 800e38e:	4601      	mov	r1, r0
 800e390:	6818      	ldr	r0, [r3, #0]
 800e392:	f000 bd67 	b.w	800ee64 <_malloc_r>
 800e396:	bf00      	nop
 800e398:	20000030 	.word	0x20000030

0800e39c <__ascii_mbtowc>:
 800e39c:	b082      	sub	sp, #8
 800e39e:	b901      	cbnz	r1, 800e3a2 <__ascii_mbtowc+0x6>
 800e3a0:	a901      	add	r1, sp, #4
 800e3a2:	b142      	cbz	r2, 800e3b6 <__ascii_mbtowc+0x1a>
 800e3a4:	b14b      	cbz	r3, 800e3ba <__ascii_mbtowc+0x1e>
 800e3a6:	7813      	ldrb	r3, [r2, #0]
 800e3a8:	600b      	str	r3, [r1, #0]
 800e3aa:	7812      	ldrb	r2, [r2, #0]
 800e3ac:	1e10      	subs	r0, r2, #0
 800e3ae:	bf18      	it	ne
 800e3b0:	2001      	movne	r0, #1
 800e3b2:	b002      	add	sp, #8
 800e3b4:	4770      	bx	lr
 800e3b6:	4610      	mov	r0, r2
 800e3b8:	e7fb      	b.n	800e3b2 <__ascii_mbtowc+0x16>
 800e3ba:	f06f 0001 	mvn.w	r0, #1
 800e3be:	e7f8      	b.n	800e3b2 <__ascii_mbtowc+0x16>

0800e3c0 <memcpy>:
 800e3c0:	440a      	add	r2, r1
 800e3c2:	4291      	cmp	r1, r2
 800e3c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e3c8:	d100      	bne.n	800e3cc <memcpy+0xc>
 800e3ca:	4770      	bx	lr
 800e3cc:	b510      	push	{r4, lr}
 800e3ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e3d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e3d6:	4291      	cmp	r1, r2
 800e3d8:	d1f9      	bne.n	800e3ce <memcpy+0xe>
 800e3da:	bd10      	pop	{r4, pc}

0800e3dc <_Balloc>:
 800e3dc:	b570      	push	{r4, r5, r6, lr}
 800e3de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e3e0:	4604      	mov	r4, r0
 800e3e2:	460d      	mov	r5, r1
 800e3e4:	b976      	cbnz	r6, 800e404 <_Balloc+0x28>
 800e3e6:	2010      	movs	r0, #16
 800e3e8:	f7ff ffd0 	bl	800e38c <malloc>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	6260      	str	r0, [r4, #36]	; 0x24
 800e3f0:	b920      	cbnz	r0, 800e3fc <_Balloc+0x20>
 800e3f2:	4b18      	ldr	r3, [pc, #96]	; (800e454 <_Balloc+0x78>)
 800e3f4:	4818      	ldr	r0, [pc, #96]	; (800e458 <_Balloc+0x7c>)
 800e3f6:	2166      	movs	r1, #102	; 0x66
 800e3f8:	f7fe fb8a 	bl	800cb10 <__assert_func>
 800e3fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e400:	6006      	str	r6, [r0, #0]
 800e402:	60c6      	str	r6, [r0, #12]
 800e404:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e406:	68f3      	ldr	r3, [r6, #12]
 800e408:	b183      	cbz	r3, 800e42c <_Balloc+0x50>
 800e40a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e40c:	68db      	ldr	r3, [r3, #12]
 800e40e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e412:	b9b8      	cbnz	r0, 800e444 <_Balloc+0x68>
 800e414:	2101      	movs	r1, #1
 800e416:	fa01 f605 	lsl.w	r6, r1, r5
 800e41a:	1d72      	adds	r2, r6, #5
 800e41c:	0092      	lsls	r2, r2, #2
 800e41e:	4620      	mov	r0, r4
 800e420:	f000 fc9d 	bl	800ed5e <_calloc_r>
 800e424:	b160      	cbz	r0, 800e440 <_Balloc+0x64>
 800e426:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e42a:	e00e      	b.n	800e44a <_Balloc+0x6e>
 800e42c:	2221      	movs	r2, #33	; 0x21
 800e42e:	2104      	movs	r1, #4
 800e430:	4620      	mov	r0, r4
 800e432:	f000 fc94 	bl	800ed5e <_calloc_r>
 800e436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e438:	60f0      	str	r0, [r6, #12]
 800e43a:	68db      	ldr	r3, [r3, #12]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d1e4      	bne.n	800e40a <_Balloc+0x2e>
 800e440:	2000      	movs	r0, #0
 800e442:	bd70      	pop	{r4, r5, r6, pc}
 800e444:	6802      	ldr	r2, [r0, #0]
 800e446:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e44a:	2300      	movs	r3, #0
 800e44c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e450:	e7f7      	b.n	800e442 <_Balloc+0x66>
 800e452:	bf00      	nop
 800e454:	0800fa15 	.word	0x0800fa15
 800e458:	0800fd6c 	.word	0x0800fd6c

0800e45c <_Bfree>:
 800e45c:	b570      	push	{r4, r5, r6, lr}
 800e45e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e460:	4605      	mov	r5, r0
 800e462:	460c      	mov	r4, r1
 800e464:	b976      	cbnz	r6, 800e484 <_Bfree+0x28>
 800e466:	2010      	movs	r0, #16
 800e468:	f7ff ff90 	bl	800e38c <malloc>
 800e46c:	4602      	mov	r2, r0
 800e46e:	6268      	str	r0, [r5, #36]	; 0x24
 800e470:	b920      	cbnz	r0, 800e47c <_Bfree+0x20>
 800e472:	4b09      	ldr	r3, [pc, #36]	; (800e498 <_Bfree+0x3c>)
 800e474:	4809      	ldr	r0, [pc, #36]	; (800e49c <_Bfree+0x40>)
 800e476:	218a      	movs	r1, #138	; 0x8a
 800e478:	f7fe fb4a 	bl	800cb10 <__assert_func>
 800e47c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e480:	6006      	str	r6, [r0, #0]
 800e482:	60c6      	str	r6, [r0, #12]
 800e484:	b13c      	cbz	r4, 800e496 <_Bfree+0x3a>
 800e486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e488:	6862      	ldr	r2, [r4, #4]
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e490:	6021      	str	r1, [r4, #0]
 800e492:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e496:	bd70      	pop	{r4, r5, r6, pc}
 800e498:	0800fa15 	.word	0x0800fa15
 800e49c:	0800fd6c 	.word	0x0800fd6c

0800e4a0 <__multadd>:
 800e4a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4a4:	690d      	ldr	r5, [r1, #16]
 800e4a6:	4607      	mov	r7, r0
 800e4a8:	460c      	mov	r4, r1
 800e4aa:	461e      	mov	r6, r3
 800e4ac:	f101 0c14 	add.w	ip, r1, #20
 800e4b0:	2000      	movs	r0, #0
 800e4b2:	f8dc 3000 	ldr.w	r3, [ip]
 800e4b6:	b299      	uxth	r1, r3
 800e4b8:	fb02 6101 	mla	r1, r2, r1, r6
 800e4bc:	0c1e      	lsrs	r6, r3, #16
 800e4be:	0c0b      	lsrs	r3, r1, #16
 800e4c0:	fb02 3306 	mla	r3, r2, r6, r3
 800e4c4:	b289      	uxth	r1, r1
 800e4c6:	3001      	adds	r0, #1
 800e4c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e4cc:	4285      	cmp	r5, r0
 800e4ce:	f84c 1b04 	str.w	r1, [ip], #4
 800e4d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e4d6:	dcec      	bgt.n	800e4b2 <__multadd+0x12>
 800e4d8:	b30e      	cbz	r6, 800e51e <__multadd+0x7e>
 800e4da:	68a3      	ldr	r3, [r4, #8]
 800e4dc:	42ab      	cmp	r3, r5
 800e4de:	dc19      	bgt.n	800e514 <__multadd+0x74>
 800e4e0:	6861      	ldr	r1, [r4, #4]
 800e4e2:	4638      	mov	r0, r7
 800e4e4:	3101      	adds	r1, #1
 800e4e6:	f7ff ff79 	bl	800e3dc <_Balloc>
 800e4ea:	4680      	mov	r8, r0
 800e4ec:	b928      	cbnz	r0, 800e4fa <__multadd+0x5a>
 800e4ee:	4602      	mov	r2, r0
 800e4f0:	4b0c      	ldr	r3, [pc, #48]	; (800e524 <__multadd+0x84>)
 800e4f2:	480d      	ldr	r0, [pc, #52]	; (800e528 <__multadd+0x88>)
 800e4f4:	21b5      	movs	r1, #181	; 0xb5
 800e4f6:	f7fe fb0b 	bl	800cb10 <__assert_func>
 800e4fa:	6922      	ldr	r2, [r4, #16]
 800e4fc:	3202      	adds	r2, #2
 800e4fe:	f104 010c 	add.w	r1, r4, #12
 800e502:	0092      	lsls	r2, r2, #2
 800e504:	300c      	adds	r0, #12
 800e506:	f7ff ff5b 	bl	800e3c0 <memcpy>
 800e50a:	4621      	mov	r1, r4
 800e50c:	4638      	mov	r0, r7
 800e50e:	f7ff ffa5 	bl	800e45c <_Bfree>
 800e512:	4644      	mov	r4, r8
 800e514:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e518:	3501      	adds	r5, #1
 800e51a:	615e      	str	r6, [r3, #20]
 800e51c:	6125      	str	r5, [r4, #16]
 800e51e:	4620      	mov	r0, r4
 800e520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e524:	0800fc7d 	.word	0x0800fc7d
 800e528:	0800fd6c 	.word	0x0800fd6c

0800e52c <__s2b>:
 800e52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e530:	460c      	mov	r4, r1
 800e532:	4615      	mov	r5, r2
 800e534:	461f      	mov	r7, r3
 800e536:	2209      	movs	r2, #9
 800e538:	3308      	adds	r3, #8
 800e53a:	4606      	mov	r6, r0
 800e53c:	fb93 f3f2 	sdiv	r3, r3, r2
 800e540:	2100      	movs	r1, #0
 800e542:	2201      	movs	r2, #1
 800e544:	429a      	cmp	r2, r3
 800e546:	db09      	blt.n	800e55c <__s2b+0x30>
 800e548:	4630      	mov	r0, r6
 800e54a:	f7ff ff47 	bl	800e3dc <_Balloc>
 800e54e:	b940      	cbnz	r0, 800e562 <__s2b+0x36>
 800e550:	4602      	mov	r2, r0
 800e552:	4b19      	ldr	r3, [pc, #100]	; (800e5b8 <__s2b+0x8c>)
 800e554:	4819      	ldr	r0, [pc, #100]	; (800e5bc <__s2b+0x90>)
 800e556:	21ce      	movs	r1, #206	; 0xce
 800e558:	f7fe fada 	bl	800cb10 <__assert_func>
 800e55c:	0052      	lsls	r2, r2, #1
 800e55e:	3101      	adds	r1, #1
 800e560:	e7f0      	b.n	800e544 <__s2b+0x18>
 800e562:	9b08      	ldr	r3, [sp, #32]
 800e564:	6143      	str	r3, [r0, #20]
 800e566:	2d09      	cmp	r5, #9
 800e568:	f04f 0301 	mov.w	r3, #1
 800e56c:	6103      	str	r3, [r0, #16]
 800e56e:	dd16      	ble.n	800e59e <__s2b+0x72>
 800e570:	f104 0909 	add.w	r9, r4, #9
 800e574:	46c8      	mov	r8, r9
 800e576:	442c      	add	r4, r5
 800e578:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e57c:	4601      	mov	r1, r0
 800e57e:	3b30      	subs	r3, #48	; 0x30
 800e580:	220a      	movs	r2, #10
 800e582:	4630      	mov	r0, r6
 800e584:	f7ff ff8c 	bl	800e4a0 <__multadd>
 800e588:	45a0      	cmp	r8, r4
 800e58a:	d1f5      	bne.n	800e578 <__s2b+0x4c>
 800e58c:	f1a5 0408 	sub.w	r4, r5, #8
 800e590:	444c      	add	r4, r9
 800e592:	1b2d      	subs	r5, r5, r4
 800e594:	1963      	adds	r3, r4, r5
 800e596:	42bb      	cmp	r3, r7
 800e598:	db04      	blt.n	800e5a4 <__s2b+0x78>
 800e59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e59e:	340a      	adds	r4, #10
 800e5a0:	2509      	movs	r5, #9
 800e5a2:	e7f6      	b.n	800e592 <__s2b+0x66>
 800e5a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e5a8:	4601      	mov	r1, r0
 800e5aa:	3b30      	subs	r3, #48	; 0x30
 800e5ac:	220a      	movs	r2, #10
 800e5ae:	4630      	mov	r0, r6
 800e5b0:	f7ff ff76 	bl	800e4a0 <__multadd>
 800e5b4:	e7ee      	b.n	800e594 <__s2b+0x68>
 800e5b6:	bf00      	nop
 800e5b8:	0800fc7d 	.word	0x0800fc7d
 800e5bc:	0800fd6c 	.word	0x0800fd6c

0800e5c0 <__hi0bits>:
 800e5c0:	0c03      	lsrs	r3, r0, #16
 800e5c2:	041b      	lsls	r3, r3, #16
 800e5c4:	b9d3      	cbnz	r3, 800e5fc <__hi0bits+0x3c>
 800e5c6:	0400      	lsls	r0, r0, #16
 800e5c8:	2310      	movs	r3, #16
 800e5ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e5ce:	bf04      	itt	eq
 800e5d0:	0200      	lsleq	r0, r0, #8
 800e5d2:	3308      	addeq	r3, #8
 800e5d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e5d8:	bf04      	itt	eq
 800e5da:	0100      	lsleq	r0, r0, #4
 800e5dc:	3304      	addeq	r3, #4
 800e5de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e5e2:	bf04      	itt	eq
 800e5e4:	0080      	lsleq	r0, r0, #2
 800e5e6:	3302      	addeq	r3, #2
 800e5e8:	2800      	cmp	r0, #0
 800e5ea:	db05      	blt.n	800e5f8 <__hi0bits+0x38>
 800e5ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e5f0:	f103 0301 	add.w	r3, r3, #1
 800e5f4:	bf08      	it	eq
 800e5f6:	2320      	moveq	r3, #32
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	4770      	bx	lr
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	e7e4      	b.n	800e5ca <__hi0bits+0xa>

0800e600 <__lo0bits>:
 800e600:	6803      	ldr	r3, [r0, #0]
 800e602:	f013 0207 	ands.w	r2, r3, #7
 800e606:	4601      	mov	r1, r0
 800e608:	d00b      	beq.n	800e622 <__lo0bits+0x22>
 800e60a:	07da      	lsls	r2, r3, #31
 800e60c:	d423      	bmi.n	800e656 <__lo0bits+0x56>
 800e60e:	0798      	lsls	r0, r3, #30
 800e610:	bf49      	itett	mi
 800e612:	085b      	lsrmi	r3, r3, #1
 800e614:	089b      	lsrpl	r3, r3, #2
 800e616:	2001      	movmi	r0, #1
 800e618:	600b      	strmi	r3, [r1, #0]
 800e61a:	bf5c      	itt	pl
 800e61c:	600b      	strpl	r3, [r1, #0]
 800e61e:	2002      	movpl	r0, #2
 800e620:	4770      	bx	lr
 800e622:	b298      	uxth	r0, r3
 800e624:	b9a8      	cbnz	r0, 800e652 <__lo0bits+0x52>
 800e626:	0c1b      	lsrs	r3, r3, #16
 800e628:	2010      	movs	r0, #16
 800e62a:	b2da      	uxtb	r2, r3
 800e62c:	b90a      	cbnz	r2, 800e632 <__lo0bits+0x32>
 800e62e:	3008      	adds	r0, #8
 800e630:	0a1b      	lsrs	r3, r3, #8
 800e632:	071a      	lsls	r2, r3, #28
 800e634:	bf04      	itt	eq
 800e636:	091b      	lsreq	r3, r3, #4
 800e638:	3004      	addeq	r0, #4
 800e63a:	079a      	lsls	r2, r3, #30
 800e63c:	bf04      	itt	eq
 800e63e:	089b      	lsreq	r3, r3, #2
 800e640:	3002      	addeq	r0, #2
 800e642:	07da      	lsls	r2, r3, #31
 800e644:	d403      	bmi.n	800e64e <__lo0bits+0x4e>
 800e646:	085b      	lsrs	r3, r3, #1
 800e648:	f100 0001 	add.w	r0, r0, #1
 800e64c:	d005      	beq.n	800e65a <__lo0bits+0x5a>
 800e64e:	600b      	str	r3, [r1, #0]
 800e650:	4770      	bx	lr
 800e652:	4610      	mov	r0, r2
 800e654:	e7e9      	b.n	800e62a <__lo0bits+0x2a>
 800e656:	2000      	movs	r0, #0
 800e658:	4770      	bx	lr
 800e65a:	2020      	movs	r0, #32
 800e65c:	4770      	bx	lr
	...

0800e660 <__i2b>:
 800e660:	b510      	push	{r4, lr}
 800e662:	460c      	mov	r4, r1
 800e664:	2101      	movs	r1, #1
 800e666:	f7ff feb9 	bl	800e3dc <_Balloc>
 800e66a:	4602      	mov	r2, r0
 800e66c:	b928      	cbnz	r0, 800e67a <__i2b+0x1a>
 800e66e:	4b05      	ldr	r3, [pc, #20]	; (800e684 <__i2b+0x24>)
 800e670:	4805      	ldr	r0, [pc, #20]	; (800e688 <__i2b+0x28>)
 800e672:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e676:	f7fe fa4b 	bl	800cb10 <__assert_func>
 800e67a:	2301      	movs	r3, #1
 800e67c:	6144      	str	r4, [r0, #20]
 800e67e:	6103      	str	r3, [r0, #16]
 800e680:	bd10      	pop	{r4, pc}
 800e682:	bf00      	nop
 800e684:	0800fc7d 	.word	0x0800fc7d
 800e688:	0800fd6c 	.word	0x0800fd6c

0800e68c <__multiply>:
 800e68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e690:	4691      	mov	r9, r2
 800e692:	690a      	ldr	r2, [r1, #16]
 800e694:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e698:	429a      	cmp	r2, r3
 800e69a:	bfb8      	it	lt
 800e69c:	460b      	movlt	r3, r1
 800e69e:	460c      	mov	r4, r1
 800e6a0:	bfbc      	itt	lt
 800e6a2:	464c      	movlt	r4, r9
 800e6a4:	4699      	movlt	r9, r3
 800e6a6:	6927      	ldr	r7, [r4, #16]
 800e6a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e6ac:	68a3      	ldr	r3, [r4, #8]
 800e6ae:	6861      	ldr	r1, [r4, #4]
 800e6b0:	eb07 060a 	add.w	r6, r7, sl
 800e6b4:	42b3      	cmp	r3, r6
 800e6b6:	b085      	sub	sp, #20
 800e6b8:	bfb8      	it	lt
 800e6ba:	3101      	addlt	r1, #1
 800e6bc:	f7ff fe8e 	bl	800e3dc <_Balloc>
 800e6c0:	b930      	cbnz	r0, 800e6d0 <__multiply+0x44>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	4b44      	ldr	r3, [pc, #272]	; (800e7d8 <__multiply+0x14c>)
 800e6c6:	4845      	ldr	r0, [pc, #276]	; (800e7dc <__multiply+0x150>)
 800e6c8:	f240 115d 	movw	r1, #349	; 0x15d
 800e6cc:	f7fe fa20 	bl	800cb10 <__assert_func>
 800e6d0:	f100 0514 	add.w	r5, r0, #20
 800e6d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e6d8:	462b      	mov	r3, r5
 800e6da:	2200      	movs	r2, #0
 800e6dc:	4543      	cmp	r3, r8
 800e6de:	d321      	bcc.n	800e724 <__multiply+0x98>
 800e6e0:	f104 0314 	add.w	r3, r4, #20
 800e6e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e6e8:	f109 0314 	add.w	r3, r9, #20
 800e6ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e6f0:	9202      	str	r2, [sp, #8]
 800e6f2:	1b3a      	subs	r2, r7, r4
 800e6f4:	3a15      	subs	r2, #21
 800e6f6:	f022 0203 	bic.w	r2, r2, #3
 800e6fa:	3204      	adds	r2, #4
 800e6fc:	f104 0115 	add.w	r1, r4, #21
 800e700:	428f      	cmp	r7, r1
 800e702:	bf38      	it	cc
 800e704:	2204      	movcc	r2, #4
 800e706:	9201      	str	r2, [sp, #4]
 800e708:	9a02      	ldr	r2, [sp, #8]
 800e70a:	9303      	str	r3, [sp, #12]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d80c      	bhi.n	800e72a <__multiply+0x9e>
 800e710:	2e00      	cmp	r6, #0
 800e712:	dd03      	ble.n	800e71c <__multiply+0x90>
 800e714:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d05a      	beq.n	800e7d2 <__multiply+0x146>
 800e71c:	6106      	str	r6, [r0, #16]
 800e71e:	b005      	add	sp, #20
 800e720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e724:	f843 2b04 	str.w	r2, [r3], #4
 800e728:	e7d8      	b.n	800e6dc <__multiply+0x50>
 800e72a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e72e:	f1ba 0f00 	cmp.w	sl, #0
 800e732:	d024      	beq.n	800e77e <__multiply+0xf2>
 800e734:	f104 0e14 	add.w	lr, r4, #20
 800e738:	46a9      	mov	r9, r5
 800e73a:	f04f 0c00 	mov.w	ip, #0
 800e73e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e742:	f8d9 1000 	ldr.w	r1, [r9]
 800e746:	fa1f fb82 	uxth.w	fp, r2
 800e74a:	b289      	uxth	r1, r1
 800e74c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e750:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e754:	f8d9 2000 	ldr.w	r2, [r9]
 800e758:	4461      	add	r1, ip
 800e75a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e75e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e762:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e766:	b289      	uxth	r1, r1
 800e768:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e76c:	4577      	cmp	r7, lr
 800e76e:	f849 1b04 	str.w	r1, [r9], #4
 800e772:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e776:	d8e2      	bhi.n	800e73e <__multiply+0xb2>
 800e778:	9a01      	ldr	r2, [sp, #4]
 800e77a:	f845 c002 	str.w	ip, [r5, r2]
 800e77e:	9a03      	ldr	r2, [sp, #12]
 800e780:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e784:	3304      	adds	r3, #4
 800e786:	f1b9 0f00 	cmp.w	r9, #0
 800e78a:	d020      	beq.n	800e7ce <__multiply+0x142>
 800e78c:	6829      	ldr	r1, [r5, #0]
 800e78e:	f104 0c14 	add.w	ip, r4, #20
 800e792:	46ae      	mov	lr, r5
 800e794:	f04f 0a00 	mov.w	sl, #0
 800e798:	f8bc b000 	ldrh.w	fp, [ip]
 800e79c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e7a0:	fb09 220b 	mla	r2, r9, fp, r2
 800e7a4:	4492      	add	sl, r2
 800e7a6:	b289      	uxth	r1, r1
 800e7a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e7ac:	f84e 1b04 	str.w	r1, [lr], #4
 800e7b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e7b4:	f8be 1000 	ldrh.w	r1, [lr]
 800e7b8:	0c12      	lsrs	r2, r2, #16
 800e7ba:	fb09 1102 	mla	r1, r9, r2, r1
 800e7be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e7c2:	4567      	cmp	r7, ip
 800e7c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e7c8:	d8e6      	bhi.n	800e798 <__multiply+0x10c>
 800e7ca:	9a01      	ldr	r2, [sp, #4]
 800e7cc:	50a9      	str	r1, [r5, r2]
 800e7ce:	3504      	adds	r5, #4
 800e7d0:	e79a      	b.n	800e708 <__multiply+0x7c>
 800e7d2:	3e01      	subs	r6, #1
 800e7d4:	e79c      	b.n	800e710 <__multiply+0x84>
 800e7d6:	bf00      	nop
 800e7d8:	0800fc7d 	.word	0x0800fc7d
 800e7dc:	0800fd6c 	.word	0x0800fd6c

0800e7e0 <__pow5mult>:
 800e7e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7e4:	4615      	mov	r5, r2
 800e7e6:	f012 0203 	ands.w	r2, r2, #3
 800e7ea:	4606      	mov	r6, r0
 800e7ec:	460f      	mov	r7, r1
 800e7ee:	d007      	beq.n	800e800 <__pow5mult+0x20>
 800e7f0:	4c25      	ldr	r4, [pc, #148]	; (800e888 <__pow5mult+0xa8>)
 800e7f2:	3a01      	subs	r2, #1
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e7fa:	f7ff fe51 	bl	800e4a0 <__multadd>
 800e7fe:	4607      	mov	r7, r0
 800e800:	10ad      	asrs	r5, r5, #2
 800e802:	d03d      	beq.n	800e880 <__pow5mult+0xa0>
 800e804:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e806:	b97c      	cbnz	r4, 800e828 <__pow5mult+0x48>
 800e808:	2010      	movs	r0, #16
 800e80a:	f7ff fdbf 	bl	800e38c <malloc>
 800e80e:	4602      	mov	r2, r0
 800e810:	6270      	str	r0, [r6, #36]	; 0x24
 800e812:	b928      	cbnz	r0, 800e820 <__pow5mult+0x40>
 800e814:	4b1d      	ldr	r3, [pc, #116]	; (800e88c <__pow5mult+0xac>)
 800e816:	481e      	ldr	r0, [pc, #120]	; (800e890 <__pow5mult+0xb0>)
 800e818:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e81c:	f7fe f978 	bl	800cb10 <__assert_func>
 800e820:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e824:	6004      	str	r4, [r0, #0]
 800e826:	60c4      	str	r4, [r0, #12]
 800e828:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e82c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e830:	b94c      	cbnz	r4, 800e846 <__pow5mult+0x66>
 800e832:	f240 2171 	movw	r1, #625	; 0x271
 800e836:	4630      	mov	r0, r6
 800e838:	f7ff ff12 	bl	800e660 <__i2b>
 800e83c:	2300      	movs	r3, #0
 800e83e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e842:	4604      	mov	r4, r0
 800e844:	6003      	str	r3, [r0, #0]
 800e846:	f04f 0900 	mov.w	r9, #0
 800e84a:	07eb      	lsls	r3, r5, #31
 800e84c:	d50a      	bpl.n	800e864 <__pow5mult+0x84>
 800e84e:	4639      	mov	r1, r7
 800e850:	4622      	mov	r2, r4
 800e852:	4630      	mov	r0, r6
 800e854:	f7ff ff1a 	bl	800e68c <__multiply>
 800e858:	4639      	mov	r1, r7
 800e85a:	4680      	mov	r8, r0
 800e85c:	4630      	mov	r0, r6
 800e85e:	f7ff fdfd 	bl	800e45c <_Bfree>
 800e862:	4647      	mov	r7, r8
 800e864:	106d      	asrs	r5, r5, #1
 800e866:	d00b      	beq.n	800e880 <__pow5mult+0xa0>
 800e868:	6820      	ldr	r0, [r4, #0]
 800e86a:	b938      	cbnz	r0, 800e87c <__pow5mult+0x9c>
 800e86c:	4622      	mov	r2, r4
 800e86e:	4621      	mov	r1, r4
 800e870:	4630      	mov	r0, r6
 800e872:	f7ff ff0b 	bl	800e68c <__multiply>
 800e876:	6020      	str	r0, [r4, #0]
 800e878:	f8c0 9000 	str.w	r9, [r0]
 800e87c:	4604      	mov	r4, r0
 800e87e:	e7e4      	b.n	800e84a <__pow5mult+0x6a>
 800e880:	4638      	mov	r0, r7
 800e882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e886:	bf00      	nop
 800e888:	0800feb8 	.word	0x0800feb8
 800e88c:	0800fa15 	.word	0x0800fa15
 800e890:	0800fd6c 	.word	0x0800fd6c

0800e894 <__lshift>:
 800e894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e898:	460c      	mov	r4, r1
 800e89a:	6849      	ldr	r1, [r1, #4]
 800e89c:	6923      	ldr	r3, [r4, #16]
 800e89e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e8a2:	68a3      	ldr	r3, [r4, #8]
 800e8a4:	4607      	mov	r7, r0
 800e8a6:	4691      	mov	r9, r2
 800e8a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e8ac:	f108 0601 	add.w	r6, r8, #1
 800e8b0:	42b3      	cmp	r3, r6
 800e8b2:	db0b      	blt.n	800e8cc <__lshift+0x38>
 800e8b4:	4638      	mov	r0, r7
 800e8b6:	f7ff fd91 	bl	800e3dc <_Balloc>
 800e8ba:	4605      	mov	r5, r0
 800e8bc:	b948      	cbnz	r0, 800e8d2 <__lshift+0x3e>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	4b2a      	ldr	r3, [pc, #168]	; (800e96c <__lshift+0xd8>)
 800e8c2:	482b      	ldr	r0, [pc, #172]	; (800e970 <__lshift+0xdc>)
 800e8c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e8c8:	f7fe f922 	bl	800cb10 <__assert_func>
 800e8cc:	3101      	adds	r1, #1
 800e8ce:	005b      	lsls	r3, r3, #1
 800e8d0:	e7ee      	b.n	800e8b0 <__lshift+0x1c>
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	f100 0114 	add.w	r1, r0, #20
 800e8d8:	f100 0210 	add.w	r2, r0, #16
 800e8dc:	4618      	mov	r0, r3
 800e8de:	4553      	cmp	r3, sl
 800e8e0:	db37      	blt.n	800e952 <__lshift+0xbe>
 800e8e2:	6920      	ldr	r0, [r4, #16]
 800e8e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8e8:	f104 0314 	add.w	r3, r4, #20
 800e8ec:	f019 091f 	ands.w	r9, r9, #31
 800e8f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e8f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e8f8:	d02f      	beq.n	800e95a <__lshift+0xc6>
 800e8fa:	f1c9 0e20 	rsb	lr, r9, #32
 800e8fe:	468a      	mov	sl, r1
 800e900:	f04f 0c00 	mov.w	ip, #0
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	fa02 f209 	lsl.w	r2, r2, r9
 800e90a:	ea42 020c 	orr.w	r2, r2, ip
 800e90e:	f84a 2b04 	str.w	r2, [sl], #4
 800e912:	f853 2b04 	ldr.w	r2, [r3], #4
 800e916:	4298      	cmp	r0, r3
 800e918:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e91c:	d8f2      	bhi.n	800e904 <__lshift+0x70>
 800e91e:	1b03      	subs	r3, r0, r4
 800e920:	3b15      	subs	r3, #21
 800e922:	f023 0303 	bic.w	r3, r3, #3
 800e926:	3304      	adds	r3, #4
 800e928:	f104 0215 	add.w	r2, r4, #21
 800e92c:	4290      	cmp	r0, r2
 800e92e:	bf38      	it	cc
 800e930:	2304      	movcc	r3, #4
 800e932:	f841 c003 	str.w	ip, [r1, r3]
 800e936:	f1bc 0f00 	cmp.w	ip, #0
 800e93a:	d001      	beq.n	800e940 <__lshift+0xac>
 800e93c:	f108 0602 	add.w	r6, r8, #2
 800e940:	3e01      	subs	r6, #1
 800e942:	4638      	mov	r0, r7
 800e944:	612e      	str	r6, [r5, #16]
 800e946:	4621      	mov	r1, r4
 800e948:	f7ff fd88 	bl	800e45c <_Bfree>
 800e94c:	4628      	mov	r0, r5
 800e94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e952:	f842 0f04 	str.w	r0, [r2, #4]!
 800e956:	3301      	adds	r3, #1
 800e958:	e7c1      	b.n	800e8de <__lshift+0x4a>
 800e95a:	3904      	subs	r1, #4
 800e95c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e960:	f841 2f04 	str.w	r2, [r1, #4]!
 800e964:	4298      	cmp	r0, r3
 800e966:	d8f9      	bhi.n	800e95c <__lshift+0xc8>
 800e968:	e7ea      	b.n	800e940 <__lshift+0xac>
 800e96a:	bf00      	nop
 800e96c:	0800fc7d 	.word	0x0800fc7d
 800e970:	0800fd6c 	.word	0x0800fd6c

0800e974 <__mcmp>:
 800e974:	b530      	push	{r4, r5, lr}
 800e976:	6902      	ldr	r2, [r0, #16]
 800e978:	690c      	ldr	r4, [r1, #16]
 800e97a:	1b12      	subs	r2, r2, r4
 800e97c:	d10e      	bne.n	800e99c <__mcmp+0x28>
 800e97e:	f100 0314 	add.w	r3, r0, #20
 800e982:	3114      	adds	r1, #20
 800e984:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e988:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e98c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e990:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e994:	42a5      	cmp	r5, r4
 800e996:	d003      	beq.n	800e9a0 <__mcmp+0x2c>
 800e998:	d305      	bcc.n	800e9a6 <__mcmp+0x32>
 800e99a:	2201      	movs	r2, #1
 800e99c:	4610      	mov	r0, r2
 800e99e:	bd30      	pop	{r4, r5, pc}
 800e9a0:	4283      	cmp	r3, r0
 800e9a2:	d3f3      	bcc.n	800e98c <__mcmp+0x18>
 800e9a4:	e7fa      	b.n	800e99c <__mcmp+0x28>
 800e9a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e9aa:	e7f7      	b.n	800e99c <__mcmp+0x28>

0800e9ac <__mdiff>:
 800e9ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b0:	460c      	mov	r4, r1
 800e9b2:	4606      	mov	r6, r0
 800e9b4:	4611      	mov	r1, r2
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	4690      	mov	r8, r2
 800e9ba:	f7ff ffdb 	bl	800e974 <__mcmp>
 800e9be:	1e05      	subs	r5, r0, #0
 800e9c0:	d110      	bne.n	800e9e4 <__mdiff+0x38>
 800e9c2:	4629      	mov	r1, r5
 800e9c4:	4630      	mov	r0, r6
 800e9c6:	f7ff fd09 	bl	800e3dc <_Balloc>
 800e9ca:	b930      	cbnz	r0, 800e9da <__mdiff+0x2e>
 800e9cc:	4b3a      	ldr	r3, [pc, #232]	; (800eab8 <__mdiff+0x10c>)
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	f240 2132 	movw	r1, #562	; 0x232
 800e9d4:	4839      	ldr	r0, [pc, #228]	; (800eabc <__mdiff+0x110>)
 800e9d6:	f7fe f89b 	bl	800cb10 <__assert_func>
 800e9da:	2301      	movs	r3, #1
 800e9dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e9e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9e4:	bfa4      	itt	ge
 800e9e6:	4643      	movge	r3, r8
 800e9e8:	46a0      	movge	r8, r4
 800e9ea:	4630      	mov	r0, r6
 800e9ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e9f0:	bfa6      	itte	ge
 800e9f2:	461c      	movge	r4, r3
 800e9f4:	2500      	movge	r5, #0
 800e9f6:	2501      	movlt	r5, #1
 800e9f8:	f7ff fcf0 	bl	800e3dc <_Balloc>
 800e9fc:	b920      	cbnz	r0, 800ea08 <__mdiff+0x5c>
 800e9fe:	4b2e      	ldr	r3, [pc, #184]	; (800eab8 <__mdiff+0x10c>)
 800ea00:	4602      	mov	r2, r0
 800ea02:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ea06:	e7e5      	b.n	800e9d4 <__mdiff+0x28>
 800ea08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ea0c:	6926      	ldr	r6, [r4, #16]
 800ea0e:	60c5      	str	r5, [r0, #12]
 800ea10:	f104 0914 	add.w	r9, r4, #20
 800ea14:	f108 0514 	add.w	r5, r8, #20
 800ea18:	f100 0e14 	add.w	lr, r0, #20
 800ea1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ea20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ea24:	f108 0210 	add.w	r2, r8, #16
 800ea28:	46f2      	mov	sl, lr
 800ea2a:	2100      	movs	r1, #0
 800ea2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ea30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ea34:	fa1f f883 	uxth.w	r8, r3
 800ea38:	fa11 f18b 	uxtah	r1, r1, fp
 800ea3c:	0c1b      	lsrs	r3, r3, #16
 800ea3e:	eba1 0808 	sub.w	r8, r1, r8
 800ea42:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ea46:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ea4a:	fa1f f888 	uxth.w	r8, r8
 800ea4e:	1419      	asrs	r1, r3, #16
 800ea50:	454e      	cmp	r6, r9
 800ea52:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ea56:	f84a 3b04 	str.w	r3, [sl], #4
 800ea5a:	d8e7      	bhi.n	800ea2c <__mdiff+0x80>
 800ea5c:	1b33      	subs	r3, r6, r4
 800ea5e:	3b15      	subs	r3, #21
 800ea60:	f023 0303 	bic.w	r3, r3, #3
 800ea64:	3304      	adds	r3, #4
 800ea66:	3415      	adds	r4, #21
 800ea68:	42a6      	cmp	r6, r4
 800ea6a:	bf38      	it	cc
 800ea6c:	2304      	movcc	r3, #4
 800ea6e:	441d      	add	r5, r3
 800ea70:	4473      	add	r3, lr
 800ea72:	469e      	mov	lr, r3
 800ea74:	462e      	mov	r6, r5
 800ea76:	4566      	cmp	r6, ip
 800ea78:	d30e      	bcc.n	800ea98 <__mdiff+0xec>
 800ea7a:	f10c 0203 	add.w	r2, ip, #3
 800ea7e:	1b52      	subs	r2, r2, r5
 800ea80:	f022 0203 	bic.w	r2, r2, #3
 800ea84:	3d03      	subs	r5, #3
 800ea86:	45ac      	cmp	ip, r5
 800ea88:	bf38      	it	cc
 800ea8a:	2200      	movcc	r2, #0
 800ea8c:	441a      	add	r2, r3
 800ea8e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ea92:	b17b      	cbz	r3, 800eab4 <__mdiff+0x108>
 800ea94:	6107      	str	r7, [r0, #16]
 800ea96:	e7a3      	b.n	800e9e0 <__mdiff+0x34>
 800ea98:	f856 8b04 	ldr.w	r8, [r6], #4
 800ea9c:	fa11 f288 	uxtah	r2, r1, r8
 800eaa0:	1414      	asrs	r4, r2, #16
 800eaa2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800eaa6:	b292      	uxth	r2, r2
 800eaa8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800eaac:	f84e 2b04 	str.w	r2, [lr], #4
 800eab0:	1421      	asrs	r1, r4, #16
 800eab2:	e7e0      	b.n	800ea76 <__mdiff+0xca>
 800eab4:	3f01      	subs	r7, #1
 800eab6:	e7ea      	b.n	800ea8e <__mdiff+0xe2>
 800eab8:	0800fc7d 	.word	0x0800fc7d
 800eabc:	0800fd6c 	.word	0x0800fd6c

0800eac0 <__ulp>:
 800eac0:	b082      	sub	sp, #8
 800eac2:	ed8d 0b00 	vstr	d0, [sp]
 800eac6:	9b01      	ldr	r3, [sp, #4]
 800eac8:	4912      	ldr	r1, [pc, #72]	; (800eb14 <__ulp+0x54>)
 800eaca:	4019      	ands	r1, r3
 800eacc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ead0:	2900      	cmp	r1, #0
 800ead2:	dd05      	ble.n	800eae0 <__ulp+0x20>
 800ead4:	2200      	movs	r2, #0
 800ead6:	460b      	mov	r3, r1
 800ead8:	ec43 2b10 	vmov	d0, r2, r3
 800eadc:	b002      	add	sp, #8
 800eade:	4770      	bx	lr
 800eae0:	4249      	negs	r1, r1
 800eae2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800eae6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800eaea:	f04f 0200 	mov.w	r2, #0
 800eaee:	f04f 0300 	mov.w	r3, #0
 800eaf2:	da04      	bge.n	800eafe <__ulp+0x3e>
 800eaf4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800eaf8:	fa41 f300 	asr.w	r3, r1, r0
 800eafc:	e7ec      	b.n	800ead8 <__ulp+0x18>
 800eafe:	f1a0 0114 	sub.w	r1, r0, #20
 800eb02:	291e      	cmp	r1, #30
 800eb04:	bfda      	itte	le
 800eb06:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800eb0a:	fa20 f101 	lsrle.w	r1, r0, r1
 800eb0e:	2101      	movgt	r1, #1
 800eb10:	460a      	mov	r2, r1
 800eb12:	e7e1      	b.n	800ead8 <__ulp+0x18>
 800eb14:	7ff00000 	.word	0x7ff00000

0800eb18 <__b2d>:
 800eb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb1a:	6905      	ldr	r5, [r0, #16]
 800eb1c:	f100 0714 	add.w	r7, r0, #20
 800eb20:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800eb24:	1f2e      	subs	r6, r5, #4
 800eb26:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f7ff fd48 	bl	800e5c0 <__hi0bits>
 800eb30:	f1c0 0320 	rsb	r3, r0, #32
 800eb34:	280a      	cmp	r0, #10
 800eb36:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ebb4 <__b2d+0x9c>
 800eb3a:	600b      	str	r3, [r1, #0]
 800eb3c:	dc14      	bgt.n	800eb68 <__b2d+0x50>
 800eb3e:	f1c0 0e0b 	rsb	lr, r0, #11
 800eb42:	fa24 f10e 	lsr.w	r1, r4, lr
 800eb46:	42b7      	cmp	r7, r6
 800eb48:	ea41 030c 	orr.w	r3, r1, ip
 800eb4c:	bf34      	ite	cc
 800eb4e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800eb52:	2100      	movcs	r1, #0
 800eb54:	3015      	adds	r0, #21
 800eb56:	fa04 f000 	lsl.w	r0, r4, r0
 800eb5a:	fa21 f10e 	lsr.w	r1, r1, lr
 800eb5e:	ea40 0201 	orr.w	r2, r0, r1
 800eb62:	ec43 2b10 	vmov	d0, r2, r3
 800eb66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb68:	42b7      	cmp	r7, r6
 800eb6a:	bf3a      	itte	cc
 800eb6c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800eb70:	f1a5 0608 	subcc.w	r6, r5, #8
 800eb74:	2100      	movcs	r1, #0
 800eb76:	380b      	subs	r0, #11
 800eb78:	d017      	beq.n	800ebaa <__b2d+0x92>
 800eb7a:	f1c0 0c20 	rsb	ip, r0, #32
 800eb7e:	fa04 f500 	lsl.w	r5, r4, r0
 800eb82:	42be      	cmp	r6, r7
 800eb84:	fa21 f40c 	lsr.w	r4, r1, ip
 800eb88:	ea45 0504 	orr.w	r5, r5, r4
 800eb8c:	bf8c      	ite	hi
 800eb8e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800eb92:	2400      	movls	r4, #0
 800eb94:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800eb98:	fa01 f000 	lsl.w	r0, r1, r0
 800eb9c:	fa24 f40c 	lsr.w	r4, r4, ip
 800eba0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800eba4:	ea40 0204 	orr.w	r2, r0, r4
 800eba8:	e7db      	b.n	800eb62 <__b2d+0x4a>
 800ebaa:	ea44 030c 	orr.w	r3, r4, ip
 800ebae:	460a      	mov	r2, r1
 800ebb0:	e7d7      	b.n	800eb62 <__b2d+0x4a>
 800ebb2:	bf00      	nop
 800ebb4:	3ff00000 	.word	0x3ff00000

0800ebb8 <__d2b>:
 800ebb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ebbc:	4689      	mov	r9, r1
 800ebbe:	2101      	movs	r1, #1
 800ebc0:	ec57 6b10 	vmov	r6, r7, d0
 800ebc4:	4690      	mov	r8, r2
 800ebc6:	f7ff fc09 	bl	800e3dc <_Balloc>
 800ebca:	4604      	mov	r4, r0
 800ebcc:	b930      	cbnz	r0, 800ebdc <__d2b+0x24>
 800ebce:	4602      	mov	r2, r0
 800ebd0:	4b25      	ldr	r3, [pc, #148]	; (800ec68 <__d2b+0xb0>)
 800ebd2:	4826      	ldr	r0, [pc, #152]	; (800ec6c <__d2b+0xb4>)
 800ebd4:	f240 310a 	movw	r1, #778	; 0x30a
 800ebd8:	f7fd ff9a 	bl	800cb10 <__assert_func>
 800ebdc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ebe0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ebe4:	bb35      	cbnz	r5, 800ec34 <__d2b+0x7c>
 800ebe6:	2e00      	cmp	r6, #0
 800ebe8:	9301      	str	r3, [sp, #4]
 800ebea:	d028      	beq.n	800ec3e <__d2b+0x86>
 800ebec:	4668      	mov	r0, sp
 800ebee:	9600      	str	r6, [sp, #0]
 800ebf0:	f7ff fd06 	bl	800e600 <__lo0bits>
 800ebf4:	9900      	ldr	r1, [sp, #0]
 800ebf6:	b300      	cbz	r0, 800ec3a <__d2b+0x82>
 800ebf8:	9a01      	ldr	r2, [sp, #4]
 800ebfa:	f1c0 0320 	rsb	r3, r0, #32
 800ebfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ec02:	430b      	orrs	r3, r1
 800ec04:	40c2      	lsrs	r2, r0
 800ec06:	6163      	str	r3, [r4, #20]
 800ec08:	9201      	str	r2, [sp, #4]
 800ec0a:	9b01      	ldr	r3, [sp, #4]
 800ec0c:	61a3      	str	r3, [r4, #24]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	bf14      	ite	ne
 800ec12:	2202      	movne	r2, #2
 800ec14:	2201      	moveq	r2, #1
 800ec16:	6122      	str	r2, [r4, #16]
 800ec18:	b1d5      	cbz	r5, 800ec50 <__d2b+0x98>
 800ec1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ec1e:	4405      	add	r5, r0
 800ec20:	f8c9 5000 	str.w	r5, [r9]
 800ec24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ec28:	f8c8 0000 	str.w	r0, [r8]
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	b003      	add	sp, #12
 800ec30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec38:	e7d5      	b.n	800ebe6 <__d2b+0x2e>
 800ec3a:	6161      	str	r1, [r4, #20]
 800ec3c:	e7e5      	b.n	800ec0a <__d2b+0x52>
 800ec3e:	a801      	add	r0, sp, #4
 800ec40:	f7ff fcde 	bl	800e600 <__lo0bits>
 800ec44:	9b01      	ldr	r3, [sp, #4]
 800ec46:	6163      	str	r3, [r4, #20]
 800ec48:	2201      	movs	r2, #1
 800ec4a:	6122      	str	r2, [r4, #16]
 800ec4c:	3020      	adds	r0, #32
 800ec4e:	e7e3      	b.n	800ec18 <__d2b+0x60>
 800ec50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ec54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ec58:	f8c9 0000 	str.w	r0, [r9]
 800ec5c:	6918      	ldr	r0, [r3, #16]
 800ec5e:	f7ff fcaf 	bl	800e5c0 <__hi0bits>
 800ec62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ec66:	e7df      	b.n	800ec28 <__d2b+0x70>
 800ec68:	0800fc7d 	.word	0x0800fc7d
 800ec6c:	0800fd6c 	.word	0x0800fd6c

0800ec70 <__ratio>:
 800ec70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec74:	4688      	mov	r8, r1
 800ec76:	4669      	mov	r1, sp
 800ec78:	4681      	mov	r9, r0
 800ec7a:	f7ff ff4d 	bl	800eb18 <__b2d>
 800ec7e:	a901      	add	r1, sp, #4
 800ec80:	4640      	mov	r0, r8
 800ec82:	ec55 4b10 	vmov	r4, r5, d0
 800ec86:	f7ff ff47 	bl	800eb18 <__b2d>
 800ec8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ec92:	eba3 0c02 	sub.w	ip, r3, r2
 800ec96:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ec9a:	1a9b      	subs	r3, r3, r2
 800ec9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800eca0:	ec51 0b10 	vmov	r0, r1, d0
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	bfd6      	itet	le
 800eca8:	460a      	movle	r2, r1
 800ecaa:	462a      	movgt	r2, r5
 800ecac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ecb0:	468b      	mov	fp, r1
 800ecb2:	462f      	mov	r7, r5
 800ecb4:	bfd4      	ite	le
 800ecb6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ecba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	ee10 2a10 	vmov	r2, s0
 800ecc4:	465b      	mov	r3, fp
 800ecc6:	4639      	mov	r1, r7
 800ecc8:	f7f1 fdc0 	bl	800084c <__aeabi_ddiv>
 800eccc:	ec41 0b10 	vmov	d0, r0, r1
 800ecd0:	b003      	add	sp, #12
 800ecd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ecd6 <__copybits>:
 800ecd6:	3901      	subs	r1, #1
 800ecd8:	b570      	push	{r4, r5, r6, lr}
 800ecda:	1149      	asrs	r1, r1, #5
 800ecdc:	6914      	ldr	r4, [r2, #16]
 800ecde:	3101      	adds	r1, #1
 800ece0:	f102 0314 	add.w	r3, r2, #20
 800ece4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ece8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ecec:	1f05      	subs	r5, r0, #4
 800ecee:	42a3      	cmp	r3, r4
 800ecf0:	d30c      	bcc.n	800ed0c <__copybits+0x36>
 800ecf2:	1aa3      	subs	r3, r4, r2
 800ecf4:	3b11      	subs	r3, #17
 800ecf6:	f023 0303 	bic.w	r3, r3, #3
 800ecfa:	3211      	adds	r2, #17
 800ecfc:	42a2      	cmp	r2, r4
 800ecfe:	bf88      	it	hi
 800ed00:	2300      	movhi	r3, #0
 800ed02:	4418      	add	r0, r3
 800ed04:	2300      	movs	r3, #0
 800ed06:	4288      	cmp	r0, r1
 800ed08:	d305      	bcc.n	800ed16 <__copybits+0x40>
 800ed0a:	bd70      	pop	{r4, r5, r6, pc}
 800ed0c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ed10:	f845 6f04 	str.w	r6, [r5, #4]!
 800ed14:	e7eb      	b.n	800ecee <__copybits+0x18>
 800ed16:	f840 3b04 	str.w	r3, [r0], #4
 800ed1a:	e7f4      	b.n	800ed06 <__copybits+0x30>

0800ed1c <__any_on>:
 800ed1c:	f100 0214 	add.w	r2, r0, #20
 800ed20:	6900      	ldr	r0, [r0, #16]
 800ed22:	114b      	asrs	r3, r1, #5
 800ed24:	4298      	cmp	r0, r3
 800ed26:	b510      	push	{r4, lr}
 800ed28:	db11      	blt.n	800ed4e <__any_on+0x32>
 800ed2a:	dd0a      	ble.n	800ed42 <__any_on+0x26>
 800ed2c:	f011 011f 	ands.w	r1, r1, #31
 800ed30:	d007      	beq.n	800ed42 <__any_on+0x26>
 800ed32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ed36:	fa24 f001 	lsr.w	r0, r4, r1
 800ed3a:	fa00 f101 	lsl.w	r1, r0, r1
 800ed3e:	428c      	cmp	r4, r1
 800ed40:	d10b      	bne.n	800ed5a <__any_on+0x3e>
 800ed42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d803      	bhi.n	800ed52 <__any_on+0x36>
 800ed4a:	2000      	movs	r0, #0
 800ed4c:	bd10      	pop	{r4, pc}
 800ed4e:	4603      	mov	r3, r0
 800ed50:	e7f7      	b.n	800ed42 <__any_on+0x26>
 800ed52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed56:	2900      	cmp	r1, #0
 800ed58:	d0f5      	beq.n	800ed46 <__any_on+0x2a>
 800ed5a:	2001      	movs	r0, #1
 800ed5c:	e7f6      	b.n	800ed4c <__any_on+0x30>

0800ed5e <_calloc_r>:
 800ed5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed60:	fba1 2402 	umull	r2, r4, r1, r2
 800ed64:	b94c      	cbnz	r4, 800ed7a <_calloc_r+0x1c>
 800ed66:	4611      	mov	r1, r2
 800ed68:	9201      	str	r2, [sp, #4]
 800ed6a:	f000 f87b 	bl	800ee64 <_malloc_r>
 800ed6e:	9a01      	ldr	r2, [sp, #4]
 800ed70:	4605      	mov	r5, r0
 800ed72:	b930      	cbnz	r0, 800ed82 <_calloc_r+0x24>
 800ed74:	4628      	mov	r0, r5
 800ed76:	b003      	add	sp, #12
 800ed78:	bd30      	pop	{r4, r5, pc}
 800ed7a:	220c      	movs	r2, #12
 800ed7c:	6002      	str	r2, [r0, #0]
 800ed7e:	2500      	movs	r5, #0
 800ed80:	e7f8      	b.n	800ed74 <_calloc_r+0x16>
 800ed82:	4621      	mov	r1, r4
 800ed84:	f7fb fffc 	bl	800ad80 <memset>
 800ed88:	e7f4      	b.n	800ed74 <_calloc_r+0x16>
	...

0800ed8c <_free_r>:
 800ed8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed8e:	2900      	cmp	r1, #0
 800ed90:	d044      	beq.n	800ee1c <_free_r+0x90>
 800ed92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed96:	9001      	str	r0, [sp, #4]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	f1a1 0404 	sub.w	r4, r1, #4
 800ed9e:	bfb8      	it	lt
 800eda0:	18e4      	addlt	r4, r4, r3
 800eda2:	f000 fc7d 	bl	800f6a0 <__malloc_lock>
 800eda6:	4a1e      	ldr	r2, [pc, #120]	; (800ee20 <_free_r+0x94>)
 800eda8:	9801      	ldr	r0, [sp, #4]
 800edaa:	6813      	ldr	r3, [r2, #0]
 800edac:	b933      	cbnz	r3, 800edbc <_free_r+0x30>
 800edae:	6063      	str	r3, [r4, #4]
 800edb0:	6014      	str	r4, [r2, #0]
 800edb2:	b003      	add	sp, #12
 800edb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800edb8:	f000 bc78 	b.w	800f6ac <__malloc_unlock>
 800edbc:	42a3      	cmp	r3, r4
 800edbe:	d908      	bls.n	800edd2 <_free_r+0x46>
 800edc0:	6825      	ldr	r5, [r4, #0]
 800edc2:	1961      	adds	r1, r4, r5
 800edc4:	428b      	cmp	r3, r1
 800edc6:	bf01      	itttt	eq
 800edc8:	6819      	ldreq	r1, [r3, #0]
 800edca:	685b      	ldreq	r3, [r3, #4]
 800edcc:	1949      	addeq	r1, r1, r5
 800edce:	6021      	streq	r1, [r4, #0]
 800edd0:	e7ed      	b.n	800edae <_free_r+0x22>
 800edd2:	461a      	mov	r2, r3
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	b10b      	cbz	r3, 800eddc <_free_r+0x50>
 800edd8:	42a3      	cmp	r3, r4
 800edda:	d9fa      	bls.n	800edd2 <_free_r+0x46>
 800eddc:	6811      	ldr	r1, [r2, #0]
 800edde:	1855      	adds	r5, r2, r1
 800ede0:	42a5      	cmp	r5, r4
 800ede2:	d10b      	bne.n	800edfc <_free_r+0x70>
 800ede4:	6824      	ldr	r4, [r4, #0]
 800ede6:	4421      	add	r1, r4
 800ede8:	1854      	adds	r4, r2, r1
 800edea:	42a3      	cmp	r3, r4
 800edec:	6011      	str	r1, [r2, #0]
 800edee:	d1e0      	bne.n	800edb2 <_free_r+0x26>
 800edf0:	681c      	ldr	r4, [r3, #0]
 800edf2:	685b      	ldr	r3, [r3, #4]
 800edf4:	6053      	str	r3, [r2, #4]
 800edf6:	4421      	add	r1, r4
 800edf8:	6011      	str	r1, [r2, #0]
 800edfa:	e7da      	b.n	800edb2 <_free_r+0x26>
 800edfc:	d902      	bls.n	800ee04 <_free_r+0x78>
 800edfe:	230c      	movs	r3, #12
 800ee00:	6003      	str	r3, [r0, #0]
 800ee02:	e7d6      	b.n	800edb2 <_free_r+0x26>
 800ee04:	6825      	ldr	r5, [r4, #0]
 800ee06:	1961      	adds	r1, r4, r5
 800ee08:	428b      	cmp	r3, r1
 800ee0a:	bf04      	itt	eq
 800ee0c:	6819      	ldreq	r1, [r3, #0]
 800ee0e:	685b      	ldreq	r3, [r3, #4]
 800ee10:	6063      	str	r3, [r4, #4]
 800ee12:	bf04      	itt	eq
 800ee14:	1949      	addeq	r1, r1, r5
 800ee16:	6021      	streq	r1, [r4, #0]
 800ee18:	6054      	str	r4, [r2, #4]
 800ee1a:	e7ca      	b.n	800edb2 <_free_r+0x26>
 800ee1c:	b003      	add	sp, #12
 800ee1e:	bd30      	pop	{r4, r5, pc}
 800ee20:	20000698 	.word	0x20000698

0800ee24 <sbrk_aligned>:
 800ee24:	b570      	push	{r4, r5, r6, lr}
 800ee26:	4e0e      	ldr	r6, [pc, #56]	; (800ee60 <sbrk_aligned+0x3c>)
 800ee28:	460c      	mov	r4, r1
 800ee2a:	6831      	ldr	r1, [r6, #0]
 800ee2c:	4605      	mov	r5, r0
 800ee2e:	b911      	cbnz	r1, 800ee36 <sbrk_aligned+0x12>
 800ee30:	f000 fb4a 	bl	800f4c8 <_sbrk_r>
 800ee34:	6030      	str	r0, [r6, #0]
 800ee36:	4621      	mov	r1, r4
 800ee38:	4628      	mov	r0, r5
 800ee3a:	f000 fb45 	bl	800f4c8 <_sbrk_r>
 800ee3e:	1c43      	adds	r3, r0, #1
 800ee40:	d00a      	beq.n	800ee58 <sbrk_aligned+0x34>
 800ee42:	1cc4      	adds	r4, r0, #3
 800ee44:	f024 0403 	bic.w	r4, r4, #3
 800ee48:	42a0      	cmp	r0, r4
 800ee4a:	d007      	beq.n	800ee5c <sbrk_aligned+0x38>
 800ee4c:	1a21      	subs	r1, r4, r0
 800ee4e:	4628      	mov	r0, r5
 800ee50:	f000 fb3a 	bl	800f4c8 <_sbrk_r>
 800ee54:	3001      	adds	r0, #1
 800ee56:	d101      	bne.n	800ee5c <sbrk_aligned+0x38>
 800ee58:	f04f 34ff 	mov.w	r4, #4294967295
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	bd70      	pop	{r4, r5, r6, pc}
 800ee60:	2000069c 	.word	0x2000069c

0800ee64 <_malloc_r>:
 800ee64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee68:	1ccd      	adds	r5, r1, #3
 800ee6a:	f025 0503 	bic.w	r5, r5, #3
 800ee6e:	3508      	adds	r5, #8
 800ee70:	2d0c      	cmp	r5, #12
 800ee72:	bf38      	it	cc
 800ee74:	250c      	movcc	r5, #12
 800ee76:	2d00      	cmp	r5, #0
 800ee78:	4607      	mov	r7, r0
 800ee7a:	db01      	blt.n	800ee80 <_malloc_r+0x1c>
 800ee7c:	42a9      	cmp	r1, r5
 800ee7e:	d905      	bls.n	800ee8c <_malloc_r+0x28>
 800ee80:	230c      	movs	r3, #12
 800ee82:	603b      	str	r3, [r7, #0]
 800ee84:	2600      	movs	r6, #0
 800ee86:	4630      	mov	r0, r6
 800ee88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee8c:	4e2e      	ldr	r6, [pc, #184]	; (800ef48 <_malloc_r+0xe4>)
 800ee8e:	f000 fc07 	bl	800f6a0 <__malloc_lock>
 800ee92:	6833      	ldr	r3, [r6, #0]
 800ee94:	461c      	mov	r4, r3
 800ee96:	bb34      	cbnz	r4, 800eee6 <_malloc_r+0x82>
 800ee98:	4629      	mov	r1, r5
 800ee9a:	4638      	mov	r0, r7
 800ee9c:	f7ff ffc2 	bl	800ee24 <sbrk_aligned>
 800eea0:	1c43      	adds	r3, r0, #1
 800eea2:	4604      	mov	r4, r0
 800eea4:	d14d      	bne.n	800ef42 <_malloc_r+0xde>
 800eea6:	6834      	ldr	r4, [r6, #0]
 800eea8:	4626      	mov	r6, r4
 800eeaa:	2e00      	cmp	r6, #0
 800eeac:	d140      	bne.n	800ef30 <_malloc_r+0xcc>
 800eeae:	6823      	ldr	r3, [r4, #0]
 800eeb0:	4631      	mov	r1, r6
 800eeb2:	4638      	mov	r0, r7
 800eeb4:	eb04 0803 	add.w	r8, r4, r3
 800eeb8:	f000 fb06 	bl	800f4c8 <_sbrk_r>
 800eebc:	4580      	cmp	r8, r0
 800eebe:	d13a      	bne.n	800ef36 <_malloc_r+0xd2>
 800eec0:	6821      	ldr	r1, [r4, #0]
 800eec2:	3503      	adds	r5, #3
 800eec4:	1a6d      	subs	r5, r5, r1
 800eec6:	f025 0503 	bic.w	r5, r5, #3
 800eeca:	3508      	adds	r5, #8
 800eecc:	2d0c      	cmp	r5, #12
 800eece:	bf38      	it	cc
 800eed0:	250c      	movcc	r5, #12
 800eed2:	4629      	mov	r1, r5
 800eed4:	4638      	mov	r0, r7
 800eed6:	f7ff ffa5 	bl	800ee24 <sbrk_aligned>
 800eeda:	3001      	adds	r0, #1
 800eedc:	d02b      	beq.n	800ef36 <_malloc_r+0xd2>
 800eede:	6823      	ldr	r3, [r4, #0]
 800eee0:	442b      	add	r3, r5
 800eee2:	6023      	str	r3, [r4, #0]
 800eee4:	e00e      	b.n	800ef04 <_malloc_r+0xa0>
 800eee6:	6822      	ldr	r2, [r4, #0]
 800eee8:	1b52      	subs	r2, r2, r5
 800eeea:	d41e      	bmi.n	800ef2a <_malloc_r+0xc6>
 800eeec:	2a0b      	cmp	r2, #11
 800eeee:	d916      	bls.n	800ef1e <_malloc_r+0xba>
 800eef0:	1961      	adds	r1, r4, r5
 800eef2:	42a3      	cmp	r3, r4
 800eef4:	6025      	str	r5, [r4, #0]
 800eef6:	bf18      	it	ne
 800eef8:	6059      	strne	r1, [r3, #4]
 800eefa:	6863      	ldr	r3, [r4, #4]
 800eefc:	bf08      	it	eq
 800eefe:	6031      	streq	r1, [r6, #0]
 800ef00:	5162      	str	r2, [r4, r5]
 800ef02:	604b      	str	r3, [r1, #4]
 800ef04:	4638      	mov	r0, r7
 800ef06:	f104 060b 	add.w	r6, r4, #11
 800ef0a:	f000 fbcf 	bl	800f6ac <__malloc_unlock>
 800ef0e:	f026 0607 	bic.w	r6, r6, #7
 800ef12:	1d23      	adds	r3, r4, #4
 800ef14:	1af2      	subs	r2, r6, r3
 800ef16:	d0b6      	beq.n	800ee86 <_malloc_r+0x22>
 800ef18:	1b9b      	subs	r3, r3, r6
 800ef1a:	50a3      	str	r3, [r4, r2]
 800ef1c:	e7b3      	b.n	800ee86 <_malloc_r+0x22>
 800ef1e:	6862      	ldr	r2, [r4, #4]
 800ef20:	42a3      	cmp	r3, r4
 800ef22:	bf0c      	ite	eq
 800ef24:	6032      	streq	r2, [r6, #0]
 800ef26:	605a      	strne	r2, [r3, #4]
 800ef28:	e7ec      	b.n	800ef04 <_malloc_r+0xa0>
 800ef2a:	4623      	mov	r3, r4
 800ef2c:	6864      	ldr	r4, [r4, #4]
 800ef2e:	e7b2      	b.n	800ee96 <_malloc_r+0x32>
 800ef30:	4634      	mov	r4, r6
 800ef32:	6876      	ldr	r6, [r6, #4]
 800ef34:	e7b9      	b.n	800eeaa <_malloc_r+0x46>
 800ef36:	230c      	movs	r3, #12
 800ef38:	603b      	str	r3, [r7, #0]
 800ef3a:	4638      	mov	r0, r7
 800ef3c:	f000 fbb6 	bl	800f6ac <__malloc_unlock>
 800ef40:	e7a1      	b.n	800ee86 <_malloc_r+0x22>
 800ef42:	6025      	str	r5, [r4, #0]
 800ef44:	e7de      	b.n	800ef04 <_malloc_r+0xa0>
 800ef46:	bf00      	nop
 800ef48:	20000698 	.word	0x20000698

0800ef4c <__ssputs_r>:
 800ef4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef50:	688e      	ldr	r6, [r1, #8]
 800ef52:	429e      	cmp	r6, r3
 800ef54:	4682      	mov	sl, r0
 800ef56:	460c      	mov	r4, r1
 800ef58:	4690      	mov	r8, r2
 800ef5a:	461f      	mov	r7, r3
 800ef5c:	d838      	bhi.n	800efd0 <__ssputs_r+0x84>
 800ef5e:	898a      	ldrh	r2, [r1, #12]
 800ef60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ef64:	d032      	beq.n	800efcc <__ssputs_r+0x80>
 800ef66:	6825      	ldr	r5, [r4, #0]
 800ef68:	6909      	ldr	r1, [r1, #16]
 800ef6a:	eba5 0901 	sub.w	r9, r5, r1
 800ef6e:	6965      	ldr	r5, [r4, #20]
 800ef70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef78:	3301      	adds	r3, #1
 800ef7a:	444b      	add	r3, r9
 800ef7c:	106d      	asrs	r5, r5, #1
 800ef7e:	429d      	cmp	r5, r3
 800ef80:	bf38      	it	cc
 800ef82:	461d      	movcc	r5, r3
 800ef84:	0553      	lsls	r3, r2, #21
 800ef86:	d531      	bpl.n	800efec <__ssputs_r+0xa0>
 800ef88:	4629      	mov	r1, r5
 800ef8a:	f7ff ff6b 	bl	800ee64 <_malloc_r>
 800ef8e:	4606      	mov	r6, r0
 800ef90:	b950      	cbnz	r0, 800efa8 <__ssputs_r+0x5c>
 800ef92:	230c      	movs	r3, #12
 800ef94:	f8ca 3000 	str.w	r3, [sl]
 800ef98:	89a3      	ldrh	r3, [r4, #12]
 800ef9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef9e:	81a3      	strh	r3, [r4, #12]
 800efa0:	f04f 30ff 	mov.w	r0, #4294967295
 800efa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efa8:	6921      	ldr	r1, [r4, #16]
 800efaa:	464a      	mov	r2, r9
 800efac:	f7ff fa08 	bl	800e3c0 <memcpy>
 800efb0:	89a3      	ldrh	r3, [r4, #12]
 800efb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800efb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efba:	81a3      	strh	r3, [r4, #12]
 800efbc:	6126      	str	r6, [r4, #16]
 800efbe:	6165      	str	r5, [r4, #20]
 800efc0:	444e      	add	r6, r9
 800efc2:	eba5 0509 	sub.w	r5, r5, r9
 800efc6:	6026      	str	r6, [r4, #0]
 800efc8:	60a5      	str	r5, [r4, #8]
 800efca:	463e      	mov	r6, r7
 800efcc:	42be      	cmp	r6, r7
 800efce:	d900      	bls.n	800efd2 <__ssputs_r+0x86>
 800efd0:	463e      	mov	r6, r7
 800efd2:	6820      	ldr	r0, [r4, #0]
 800efd4:	4632      	mov	r2, r6
 800efd6:	4641      	mov	r1, r8
 800efd8:	f000 fb48 	bl	800f66c <memmove>
 800efdc:	68a3      	ldr	r3, [r4, #8]
 800efde:	1b9b      	subs	r3, r3, r6
 800efe0:	60a3      	str	r3, [r4, #8]
 800efe2:	6823      	ldr	r3, [r4, #0]
 800efe4:	4433      	add	r3, r6
 800efe6:	6023      	str	r3, [r4, #0]
 800efe8:	2000      	movs	r0, #0
 800efea:	e7db      	b.n	800efa4 <__ssputs_r+0x58>
 800efec:	462a      	mov	r2, r5
 800efee:	f000 fb63 	bl	800f6b8 <_realloc_r>
 800eff2:	4606      	mov	r6, r0
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d1e1      	bne.n	800efbc <__ssputs_r+0x70>
 800eff8:	6921      	ldr	r1, [r4, #16]
 800effa:	4650      	mov	r0, sl
 800effc:	f7ff fec6 	bl	800ed8c <_free_r>
 800f000:	e7c7      	b.n	800ef92 <__ssputs_r+0x46>
	...

0800f004 <_svfiprintf_r>:
 800f004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f008:	4698      	mov	r8, r3
 800f00a:	898b      	ldrh	r3, [r1, #12]
 800f00c:	061b      	lsls	r3, r3, #24
 800f00e:	b09d      	sub	sp, #116	; 0x74
 800f010:	4607      	mov	r7, r0
 800f012:	460d      	mov	r5, r1
 800f014:	4614      	mov	r4, r2
 800f016:	d50e      	bpl.n	800f036 <_svfiprintf_r+0x32>
 800f018:	690b      	ldr	r3, [r1, #16]
 800f01a:	b963      	cbnz	r3, 800f036 <_svfiprintf_r+0x32>
 800f01c:	2140      	movs	r1, #64	; 0x40
 800f01e:	f7ff ff21 	bl	800ee64 <_malloc_r>
 800f022:	6028      	str	r0, [r5, #0]
 800f024:	6128      	str	r0, [r5, #16]
 800f026:	b920      	cbnz	r0, 800f032 <_svfiprintf_r+0x2e>
 800f028:	230c      	movs	r3, #12
 800f02a:	603b      	str	r3, [r7, #0]
 800f02c:	f04f 30ff 	mov.w	r0, #4294967295
 800f030:	e0d1      	b.n	800f1d6 <_svfiprintf_r+0x1d2>
 800f032:	2340      	movs	r3, #64	; 0x40
 800f034:	616b      	str	r3, [r5, #20]
 800f036:	2300      	movs	r3, #0
 800f038:	9309      	str	r3, [sp, #36]	; 0x24
 800f03a:	2320      	movs	r3, #32
 800f03c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f040:	f8cd 800c 	str.w	r8, [sp, #12]
 800f044:	2330      	movs	r3, #48	; 0x30
 800f046:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f1f0 <_svfiprintf_r+0x1ec>
 800f04a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f04e:	f04f 0901 	mov.w	r9, #1
 800f052:	4623      	mov	r3, r4
 800f054:	469a      	mov	sl, r3
 800f056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f05a:	b10a      	cbz	r2, 800f060 <_svfiprintf_r+0x5c>
 800f05c:	2a25      	cmp	r2, #37	; 0x25
 800f05e:	d1f9      	bne.n	800f054 <_svfiprintf_r+0x50>
 800f060:	ebba 0b04 	subs.w	fp, sl, r4
 800f064:	d00b      	beq.n	800f07e <_svfiprintf_r+0x7a>
 800f066:	465b      	mov	r3, fp
 800f068:	4622      	mov	r2, r4
 800f06a:	4629      	mov	r1, r5
 800f06c:	4638      	mov	r0, r7
 800f06e:	f7ff ff6d 	bl	800ef4c <__ssputs_r>
 800f072:	3001      	adds	r0, #1
 800f074:	f000 80aa 	beq.w	800f1cc <_svfiprintf_r+0x1c8>
 800f078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f07a:	445a      	add	r2, fp
 800f07c:	9209      	str	r2, [sp, #36]	; 0x24
 800f07e:	f89a 3000 	ldrb.w	r3, [sl]
 800f082:	2b00      	cmp	r3, #0
 800f084:	f000 80a2 	beq.w	800f1cc <_svfiprintf_r+0x1c8>
 800f088:	2300      	movs	r3, #0
 800f08a:	f04f 32ff 	mov.w	r2, #4294967295
 800f08e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f092:	f10a 0a01 	add.w	sl, sl, #1
 800f096:	9304      	str	r3, [sp, #16]
 800f098:	9307      	str	r3, [sp, #28]
 800f09a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f09e:	931a      	str	r3, [sp, #104]	; 0x68
 800f0a0:	4654      	mov	r4, sl
 800f0a2:	2205      	movs	r2, #5
 800f0a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0a8:	4851      	ldr	r0, [pc, #324]	; (800f1f0 <_svfiprintf_r+0x1ec>)
 800f0aa:	f7f1 f899 	bl	80001e0 <memchr>
 800f0ae:	9a04      	ldr	r2, [sp, #16]
 800f0b0:	b9d8      	cbnz	r0, 800f0ea <_svfiprintf_r+0xe6>
 800f0b2:	06d0      	lsls	r0, r2, #27
 800f0b4:	bf44      	itt	mi
 800f0b6:	2320      	movmi	r3, #32
 800f0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0bc:	0711      	lsls	r1, r2, #28
 800f0be:	bf44      	itt	mi
 800f0c0:	232b      	movmi	r3, #43	; 0x2b
 800f0c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0c6:	f89a 3000 	ldrb.w	r3, [sl]
 800f0ca:	2b2a      	cmp	r3, #42	; 0x2a
 800f0cc:	d015      	beq.n	800f0fa <_svfiprintf_r+0xf6>
 800f0ce:	9a07      	ldr	r2, [sp, #28]
 800f0d0:	4654      	mov	r4, sl
 800f0d2:	2000      	movs	r0, #0
 800f0d4:	f04f 0c0a 	mov.w	ip, #10
 800f0d8:	4621      	mov	r1, r4
 800f0da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0de:	3b30      	subs	r3, #48	; 0x30
 800f0e0:	2b09      	cmp	r3, #9
 800f0e2:	d94e      	bls.n	800f182 <_svfiprintf_r+0x17e>
 800f0e4:	b1b0      	cbz	r0, 800f114 <_svfiprintf_r+0x110>
 800f0e6:	9207      	str	r2, [sp, #28]
 800f0e8:	e014      	b.n	800f114 <_svfiprintf_r+0x110>
 800f0ea:	eba0 0308 	sub.w	r3, r0, r8
 800f0ee:	fa09 f303 	lsl.w	r3, r9, r3
 800f0f2:	4313      	orrs	r3, r2
 800f0f4:	9304      	str	r3, [sp, #16]
 800f0f6:	46a2      	mov	sl, r4
 800f0f8:	e7d2      	b.n	800f0a0 <_svfiprintf_r+0x9c>
 800f0fa:	9b03      	ldr	r3, [sp, #12]
 800f0fc:	1d19      	adds	r1, r3, #4
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	9103      	str	r1, [sp, #12]
 800f102:	2b00      	cmp	r3, #0
 800f104:	bfbb      	ittet	lt
 800f106:	425b      	neglt	r3, r3
 800f108:	f042 0202 	orrlt.w	r2, r2, #2
 800f10c:	9307      	strge	r3, [sp, #28]
 800f10e:	9307      	strlt	r3, [sp, #28]
 800f110:	bfb8      	it	lt
 800f112:	9204      	strlt	r2, [sp, #16]
 800f114:	7823      	ldrb	r3, [r4, #0]
 800f116:	2b2e      	cmp	r3, #46	; 0x2e
 800f118:	d10c      	bne.n	800f134 <_svfiprintf_r+0x130>
 800f11a:	7863      	ldrb	r3, [r4, #1]
 800f11c:	2b2a      	cmp	r3, #42	; 0x2a
 800f11e:	d135      	bne.n	800f18c <_svfiprintf_r+0x188>
 800f120:	9b03      	ldr	r3, [sp, #12]
 800f122:	1d1a      	adds	r2, r3, #4
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	9203      	str	r2, [sp, #12]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	bfb8      	it	lt
 800f12c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f130:	3402      	adds	r4, #2
 800f132:	9305      	str	r3, [sp, #20]
 800f134:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f200 <_svfiprintf_r+0x1fc>
 800f138:	7821      	ldrb	r1, [r4, #0]
 800f13a:	2203      	movs	r2, #3
 800f13c:	4650      	mov	r0, sl
 800f13e:	f7f1 f84f 	bl	80001e0 <memchr>
 800f142:	b140      	cbz	r0, 800f156 <_svfiprintf_r+0x152>
 800f144:	2340      	movs	r3, #64	; 0x40
 800f146:	eba0 000a 	sub.w	r0, r0, sl
 800f14a:	fa03 f000 	lsl.w	r0, r3, r0
 800f14e:	9b04      	ldr	r3, [sp, #16]
 800f150:	4303      	orrs	r3, r0
 800f152:	3401      	adds	r4, #1
 800f154:	9304      	str	r3, [sp, #16]
 800f156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f15a:	4826      	ldr	r0, [pc, #152]	; (800f1f4 <_svfiprintf_r+0x1f0>)
 800f15c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f160:	2206      	movs	r2, #6
 800f162:	f7f1 f83d 	bl	80001e0 <memchr>
 800f166:	2800      	cmp	r0, #0
 800f168:	d038      	beq.n	800f1dc <_svfiprintf_r+0x1d8>
 800f16a:	4b23      	ldr	r3, [pc, #140]	; (800f1f8 <_svfiprintf_r+0x1f4>)
 800f16c:	bb1b      	cbnz	r3, 800f1b6 <_svfiprintf_r+0x1b2>
 800f16e:	9b03      	ldr	r3, [sp, #12]
 800f170:	3307      	adds	r3, #7
 800f172:	f023 0307 	bic.w	r3, r3, #7
 800f176:	3308      	adds	r3, #8
 800f178:	9303      	str	r3, [sp, #12]
 800f17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f17c:	4433      	add	r3, r6
 800f17e:	9309      	str	r3, [sp, #36]	; 0x24
 800f180:	e767      	b.n	800f052 <_svfiprintf_r+0x4e>
 800f182:	fb0c 3202 	mla	r2, ip, r2, r3
 800f186:	460c      	mov	r4, r1
 800f188:	2001      	movs	r0, #1
 800f18a:	e7a5      	b.n	800f0d8 <_svfiprintf_r+0xd4>
 800f18c:	2300      	movs	r3, #0
 800f18e:	3401      	adds	r4, #1
 800f190:	9305      	str	r3, [sp, #20]
 800f192:	4619      	mov	r1, r3
 800f194:	f04f 0c0a 	mov.w	ip, #10
 800f198:	4620      	mov	r0, r4
 800f19a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f19e:	3a30      	subs	r2, #48	; 0x30
 800f1a0:	2a09      	cmp	r2, #9
 800f1a2:	d903      	bls.n	800f1ac <_svfiprintf_r+0x1a8>
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d0c5      	beq.n	800f134 <_svfiprintf_r+0x130>
 800f1a8:	9105      	str	r1, [sp, #20]
 800f1aa:	e7c3      	b.n	800f134 <_svfiprintf_r+0x130>
 800f1ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1b0:	4604      	mov	r4, r0
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	e7f0      	b.n	800f198 <_svfiprintf_r+0x194>
 800f1b6:	ab03      	add	r3, sp, #12
 800f1b8:	9300      	str	r3, [sp, #0]
 800f1ba:	462a      	mov	r2, r5
 800f1bc:	4b0f      	ldr	r3, [pc, #60]	; (800f1fc <_svfiprintf_r+0x1f8>)
 800f1be:	a904      	add	r1, sp, #16
 800f1c0:	4638      	mov	r0, r7
 800f1c2:	f7fb fe85 	bl	800aed0 <_printf_float>
 800f1c6:	1c42      	adds	r2, r0, #1
 800f1c8:	4606      	mov	r6, r0
 800f1ca:	d1d6      	bne.n	800f17a <_svfiprintf_r+0x176>
 800f1cc:	89ab      	ldrh	r3, [r5, #12]
 800f1ce:	065b      	lsls	r3, r3, #25
 800f1d0:	f53f af2c 	bmi.w	800f02c <_svfiprintf_r+0x28>
 800f1d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1d6:	b01d      	add	sp, #116	; 0x74
 800f1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1dc:	ab03      	add	r3, sp, #12
 800f1de:	9300      	str	r3, [sp, #0]
 800f1e0:	462a      	mov	r2, r5
 800f1e2:	4b06      	ldr	r3, [pc, #24]	; (800f1fc <_svfiprintf_r+0x1f8>)
 800f1e4:	a904      	add	r1, sp, #16
 800f1e6:	4638      	mov	r0, r7
 800f1e8:	f7fc f916 	bl	800b418 <_printf_i>
 800f1ec:	e7eb      	b.n	800f1c6 <_svfiprintf_r+0x1c2>
 800f1ee:	bf00      	nop
 800f1f0:	0800fec4 	.word	0x0800fec4
 800f1f4:	0800fece 	.word	0x0800fece
 800f1f8:	0800aed1 	.word	0x0800aed1
 800f1fc:	0800ef4d 	.word	0x0800ef4d
 800f200:	0800feca 	.word	0x0800feca

0800f204 <__sfputc_r>:
 800f204:	6893      	ldr	r3, [r2, #8]
 800f206:	3b01      	subs	r3, #1
 800f208:	2b00      	cmp	r3, #0
 800f20a:	b410      	push	{r4}
 800f20c:	6093      	str	r3, [r2, #8]
 800f20e:	da08      	bge.n	800f222 <__sfputc_r+0x1e>
 800f210:	6994      	ldr	r4, [r2, #24]
 800f212:	42a3      	cmp	r3, r4
 800f214:	db01      	blt.n	800f21a <__sfputc_r+0x16>
 800f216:	290a      	cmp	r1, #10
 800f218:	d103      	bne.n	800f222 <__sfputc_r+0x1e>
 800f21a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f21e:	f7fd bbb7 	b.w	800c990 <__swbuf_r>
 800f222:	6813      	ldr	r3, [r2, #0]
 800f224:	1c58      	adds	r0, r3, #1
 800f226:	6010      	str	r0, [r2, #0]
 800f228:	7019      	strb	r1, [r3, #0]
 800f22a:	4608      	mov	r0, r1
 800f22c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f230:	4770      	bx	lr

0800f232 <__sfputs_r>:
 800f232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f234:	4606      	mov	r6, r0
 800f236:	460f      	mov	r7, r1
 800f238:	4614      	mov	r4, r2
 800f23a:	18d5      	adds	r5, r2, r3
 800f23c:	42ac      	cmp	r4, r5
 800f23e:	d101      	bne.n	800f244 <__sfputs_r+0x12>
 800f240:	2000      	movs	r0, #0
 800f242:	e007      	b.n	800f254 <__sfputs_r+0x22>
 800f244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f248:	463a      	mov	r2, r7
 800f24a:	4630      	mov	r0, r6
 800f24c:	f7ff ffda 	bl	800f204 <__sfputc_r>
 800f250:	1c43      	adds	r3, r0, #1
 800f252:	d1f3      	bne.n	800f23c <__sfputs_r+0xa>
 800f254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f258 <_vfiprintf_r>:
 800f258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f25c:	460d      	mov	r5, r1
 800f25e:	b09d      	sub	sp, #116	; 0x74
 800f260:	4614      	mov	r4, r2
 800f262:	4698      	mov	r8, r3
 800f264:	4606      	mov	r6, r0
 800f266:	b118      	cbz	r0, 800f270 <_vfiprintf_r+0x18>
 800f268:	6983      	ldr	r3, [r0, #24]
 800f26a:	b90b      	cbnz	r3, 800f270 <_vfiprintf_r+0x18>
 800f26c:	f7fe fc04 	bl	800da78 <__sinit>
 800f270:	4b89      	ldr	r3, [pc, #548]	; (800f498 <_vfiprintf_r+0x240>)
 800f272:	429d      	cmp	r5, r3
 800f274:	d11b      	bne.n	800f2ae <_vfiprintf_r+0x56>
 800f276:	6875      	ldr	r5, [r6, #4]
 800f278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f27a:	07d9      	lsls	r1, r3, #31
 800f27c:	d405      	bmi.n	800f28a <_vfiprintf_r+0x32>
 800f27e:	89ab      	ldrh	r3, [r5, #12]
 800f280:	059a      	lsls	r2, r3, #22
 800f282:	d402      	bmi.n	800f28a <_vfiprintf_r+0x32>
 800f284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f286:	f7ff f81a 	bl	800e2be <__retarget_lock_acquire_recursive>
 800f28a:	89ab      	ldrh	r3, [r5, #12]
 800f28c:	071b      	lsls	r3, r3, #28
 800f28e:	d501      	bpl.n	800f294 <_vfiprintf_r+0x3c>
 800f290:	692b      	ldr	r3, [r5, #16]
 800f292:	b9eb      	cbnz	r3, 800f2d0 <_vfiprintf_r+0x78>
 800f294:	4629      	mov	r1, r5
 800f296:	4630      	mov	r0, r6
 800f298:	f7fd fbcc 	bl	800ca34 <__swsetup_r>
 800f29c:	b1c0      	cbz	r0, 800f2d0 <_vfiprintf_r+0x78>
 800f29e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f2a0:	07dc      	lsls	r4, r3, #31
 800f2a2:	d50e      	bpl.n	800f2c2 <_vfiprintf_r+0x6a>
 800f2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2a8:	b01d      	add	sp, #116	; 0x74
 800f2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ae:	4b7b      	ldr	r3, [pc, #492]	; (800f49c <_vfiprintf_r+0x244>)
 800f2b0:	429d      	cmp	r5, r3
 800f2b2:	d101      	bne.n	800f2b8 <_vfiprintf_r+0x60>
 800f2b4:	68b5      	ldr	r5, [r6, #8]
 800f2b6:	e7df      	b.n	800f278 <_vfiprintf_r+0x20>
 800f2b8:	4b79      	ldr	r3, [pc, #484]	; (800f4a0 <_vfiprintf_r+0x248>)
 800f2ba:	429d      	cmp	r5, r3
 800f2bc:	bf08      	it	eq
 800f2be:	68f5      	ldreq	r5, [r6, #12]
 800f2c0:	e7da      	b.n	800f278 <_vfiprintf_r+0x20>
 800f2c2:	89ab      	ldrh	r3, [r5, #12]
 800f2c4:	0598      	lsls	r0, r3, #22
 800f2c6:	d4ed      	bmi.n	800f2a4 <_vfiprintf_r+0x4c>
 800f2c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f2ca:	f7fe fff9 	bl	800e2c0 <__retarget_lock_release_recursive>
 800f2ce:	e7e9      	b.n	800f2a4 <_vfiprintf_r+0x4c>
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f2d4:	2320      	movs	r3, #32
 800f2d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2da:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2de:	2330      	movs	r3, #48	; 0x30
 800f2e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f4a4 <_vfiprintf_r+0x24c>
 800f2e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f2e8:	f04f 0901 	mov.w	r9, #1
 800f2ec:	4623      	mov	r3, r4
 800f2ee:	469a      	mov	sl, r3
 800f2f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2f4:	b10a      	cbz	r2, 800f2fa <_vfiprintf_r+0xa2>
 800f2f6:	2a25      	cmp	r2, #37	; 0x25
 800f2f8:	d1f9      	bne.n	800f2ee <_vfiprintf_r+0x96>
 800f2fa:	ebba 0b04 	subs.w	fp, sl, r4
 800f2fe:	d00b      	beq.n	800f318 <_vfiprintf_r+0xc0>
 800f300:	465b      	mov	r3, fp
 800f302:	4622      	mov	r2, r4
 800f304:	4629      	mov	r1, r5
 800f306:	4630      	mov	r0, r6
 800f308:	f7ff ff93 	bl	800f232 <__sfputs_r>
 800f30c:	3001      	adds	r0, #1
 800f30e:	f000 80aa 	beq.w	800f466 <_vfiprintf_r+0x20e>
 800f312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f314:	445a      	add	r2, fp
 800f316:	9209      	str	r2, [sp, #36]	; 0x24
 800f318:	f89a 3000 	ldrb.w	r3, [sl]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	f000 80a2 	beq.w	800f466 <_vfiprintf_r+0x20e>
 800f322:	2300      	movs	r3, #0
 800f324:	f04f 32ff 	mov.w	r2, #4294967295
 800f328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f32c:	f10a 0a01 	add.w	sl, sl, #1
 800f330:	9304      	str	r3, [sp, #16]
 800f332:	9307      	str	r3, [sp, #28]
 800f334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f338:	931a      	str	r3, [sp, #104]	; 0x68
 800f33a:	4654      	mov	r4, sl
 800f33c:	2205      	movs	r2, #5
 800f33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f342:	4858      	ldr	r0, [pc, #352]	; (800f4a4 <_vfiprintf_r+0x24c>)
 800f344:	f7f0 ff4c 	bl	80001e0 <memchr>
 800f348:	9a04      	ldr	r2, [sp, #16]
 800f34a:	b9d8      	cbnz	r0, 800f384 <_vfiprintf_r+0x12c>
 800f34c:	06d1      	lsls	r1, r2, #27
 800f34e:	bf44      	itt	mi
 800f350:	2320      	movmi	r3, #32
 800f352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f356:	0713      	lsls	r3, r2, #28
 800f358:	bf44      	itt	mi
 800f35a:	232b      	movmi	r3, #43	; 0x2b
 800f35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f360:	f89a 3000 	ldrb.w	r3, [sl]
 800f364:	2b2a      	cmp	r3, #42	; 0x2a
 800f366:	d015      	beq.n	800f394 <_vfiprintf_r+0x13c>
 800f368:	9a07      	ldr	r2, [sp, #28]
 800f36a:	4654      	mov	r4, sl
 800f36c:	2000      	movs	r0, #0
 800f36e:	f04f 0c0a 	mov.w	ip, #10
 800f372:	4621      	mov	r1, r4
 800f374:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f378:	3b30      	subs	r3, #48	; 0x30
 800f37a:	2b09      	cmp	r3, #9
 800f37c:	d94e      	bls.n	800f41c <_vfiprintf_r+0x1c4>
 800f37e:	b1b0      	cbz	r0, 800f3ae <_vfiprintf_r+0x156>
 800f380:	9207      	str	r2, [sp, #28]
 800f382:	e014      	b.n	800f3ae <_vfiprintf_r+0x156>
 800f384:	eba0 0308 	sub.w	r3, r0, r8
 800f388:	fa09 f303 	lsl.w	r3, r9, r3
 800f38c:	4313      	orrs	r3, r2
 800f38e:	9304      	str	r3, [sp, #16]
 800f390:	46a2      	mov	sl, r4
 800f392:	e7d2      	b.n	800f33a <_vfiprintf_r+0xe2>
 800f394:	9b03      	ldr	r3, [sp, #12]
 800f396:	1d19      	adds	r1, r3, #4
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	9103      	str	r1, [sp, #12]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	bfbb      	ittet	lt
 800f3a0:	425b      	neglt	r3, r3
 800f3a2:	f042 0202 	orrlt.w	r2, r2, #2
 800f3a6:	9307      	strge	r3, [sp, #28]
 800f3a8:	9307      	strlt	r3, [sp, #28]
 800f3aa:	bfb8      	it	lt
 800f3ac:	9204      	strlt	r2, [sp, #16]
 800f3ae:	7823      	ldrb	r3, [r4, #0]
 800f3b0:	2b2e      	cmp	r3, #46	; 0x2e
 800f3b2:	d10c      	bne.n	800f3ce <_vfiprintf_r+0x176>
 800f3b4:	7863      	ldrb	r3, [r4, #1]
 800f3b6:	2b2a      	cmp	r3, #42	; 0x2a
 800f3b8:	d135      	bne.n	800f426 <_vfiprintf_r+0x1ce>
 800f3ba:	9b03      	ldr	r3, [sp, #12]
 800f3bc:	1d1a      	adds	r2, r3, #4
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	9203      	str	r2, [sp, #12]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	bfb8      	it	lt
 800f3c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800f3ca:	3402      	adds	r4, #2
 800f3cc:	9305      	str	r3, [sp, #20]
 800f3ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f4b4 <_vfiprintf_r+0x25c>
 800f3d2:	7821      	ldrb	r1, [r4, #0]
 800f3d4:	2203      	movs	r2, #3
 800f3d6:	4650      	mov	r0, sl
 800f3d8:	f7f0 ff02 	bl	80001e0 <memchr>
 800f3dc:	b140      	cbz	r0, 800f3f0 <_vfiprintf_r+0x198>
 800f3de:	2340      	movs	r3, #64	; 0x40
 800f3e0:	eba0 000a 	sub.w	r0, r0, sl
 800f3e4:	fa03 f000 	lsl.w	r0, r3, r0
 800f3e8:	9b04      	ldr	r3, [sp, #16]
 800f3ea:	4303      	orrs	r3, r0
 800f3ec:	3401      	adds	r4, #1
 800f3ee:	9304      	str	r3, [sp, #16]
 800f3f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3f4:	482c      	ldr	r0, [pc, #176]	; (800f4a8 <_vfiprintf_r+0x250>)
 800f3f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3fa:	2206      	movs	r2, #6
 800f3fc:	f7f0 fef0 	bl	80001e0 <memchr>
 800f400:	2800      	cmp	r0, #0
 800f402:	d03f      	beq.n	800f484 <_vfiprintf_r+0x22c>
 800f404:	4b29      	ldr	r3, [pc, #164]	; (800f4ac <_vfiprintf_r+0x254>)
 800f406:	bb1b      	cbnz	r3, 800f450 <_vfiprintf_r+0x1f8>
 800f408:	9b03      	ldr	r3, [sp, #12]
 800f40a:	3307      	adds	r3, #7
 800f40c:	f023 0307 	bic.w	r3, r3, #7
 800f410:	3308      	adds	r3, #8
 800f412:	9303      	str	r3, [sp, #12]
 800f414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f416:	443b      	add	r3, r7
 800f418:	9309      	str	r3, [sp, #36]	; 0x24
 800f41a:	e767      	b.n	800f2ec <_vfiprintf_r+0x94>
 800f41c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f420:	460c      	mov	r4, r1
 800f422:	2001      	movs	r0, #1
 800f424:	e7a5      	b.n	800f372 <_vfiprintf_r+0x11a>
 800f426:	2300      	movs	r3, #0
 800f428:	3401      	adds	r4, #1
 800f42a:	9305      	str	r3, [sp, #20]
 800f42c:	4619      	mov	r1, r3
 800f42e:	f04f 0c0a 	mov.w	ip, #10
 800f432:	4620      	mov	r0, r4
 800f434:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f438:	3a30      	subs	r2, #48	; 0x30
 800f43a:	2a09      	cmp	r2, #9
 800f43c:	d903      	bls.n	800f446 <_vfiprintf_r+0x1ee>
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d0c5      	beq.n	800f3ce <_vfiprintf_r+0x176>
 800f442:	9105      	str	r1, [sp, #20]
 800f444:	e7c3      	b.n	800f3ce <_vfiprintf_r+0x176>
 800f446:	fb0c 2101 	mla	r1, ip, r1, r2
 800f44a:	4604      	mov	r4, r0
 800f44c:	2301      	movs	r3, #1
 800f44e:	e7f0      	b.n	800f432 <_vfiprintf_r+0x1da>
 800f450:	ab03      	add	r3, sp, #12
 800f452:	9300      	str	r3, [sp, #0]
 800f454:	462a      	mov	r2, r5
 800f456:	4b16      	ldr	r3, [pc, #88]	; (800f4b0 <_vfiprintf_r+0x258>)
 800f458:	a904      	add	r1, sp, #16
 800f45a:	4630      	mov	r0, r6
 800f45c:	f7fb fd38 	bl	800aed0 <_printf_float>
 800f460:	4607      	mov	r7, r0
 800f462:	1c78      	adds	r0, r7, #1
 800f464:	d1d6      	bne.n	800f414 <_vfiprintf_r+0x1bc>
 800f466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f468:	07d9      	lsls	r1, r3, #31
 800f46a:	d405      	bmi.n	800f478 <_vfiprintf_r+0x220>
 800f46c:	89ab      	ldrh	r3, [r5, #12]
 800f46e:	059a      	lsls	r2, r3, #22
 800f470:	d402      	bmi.n	800f478 <_vfiprintf_r+0x220>
 800f472:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f474:	f7fe ff24 	bl	800e2c0 <__retarget_lock_release_recursive>
 800f478:	89ab      	ldrh	r3, [r5, #12]
 800f47a:	065b      	lsls	r3, r3, #25
 800f47c:	f53f af12 	bmi.w	800f2a4 <_vfiprintf_r+0x4c>
 800f480:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f482:	e711      	b.n	800f2a8 <_vfiprintf_r+0x50>
 800f484:	ab03      	add	r3, sp, #12
 800f486:	9300      	str	r3, [sp, #0]
 800f488:	462a      	mov	r2, r5
 800f48a:	4b09      	ldr	r3, [pc, #36]	; (800f4b0 <_vfiprintf_r+0x258>)
 800f48c:	a904      	add	r1, sp, #16
 800f48e:	4630      	mov	r0, r6
 800f490:	f7fb ffc2 	bl	800b418 <_printf_i>
 800f494:	e7e4      	b.n	800f460 <_vfiprintf_r+0x208>
 800f496:	bf00      	nop
 800f498:	0800fcb0 	.word	0x0800fcb0
 800f49c:	0800fcd0 	.word	0x0800fcd0
 800f4a0:	0800fc90 	.word	0x0800fc90
 800f4a4:	0800fec4 	.word	0x0800fec4
 800f4a8:	0800fece 	.word	0x0800fece
 800f4ac:	0800aed1 	.word	0x0800aed1
 800f4b0:	0800f233 	.word	0x0800f233
 800f4b4:	0800feca 	.word	0x0800feca

0800f4b8 <nan>:
 800f4b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f4c0 <nan+0x8>
 800f4bc:	4770      	bx	lr
 800f4be:	bf00      	nop
 800f4c0:	00000000 	.word	0x00000000
 800f4c4:	7ff80000 	.word	0x7ff80000

0800f4c8 <_sbrk_r>:
 800f4c8:	b538      	push	{r3, r4, r5, lr}
 800f4ca:	4d06      	ldr	r5, [pc, #24]	; (800f4e4 <_sbrk_r+0x1c>)
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	4604      	mov	r4, r0
 800f4d0:	4608      	mov	r0, r1
 800f4d2:	602b      	str	r3, [r5, #0]
 800f4d4:	f7f2 fa04 	bl	80018e0 <_sbrk>
 800f4d8:	1c43      	adds	r3, r0, #1
 800f4da:	d102      	bne.n	800f4e2 <_sbrk_r+0x1a>
 800f4dc:	682b      	ldr	r3, [r5, #0]
 800f4de:	b103      	cbz	r3, 800f4e2 <_sbrk_r+0x1a>
 800f4e0:	6023      	str	r3, [r4, #0]
 800f4e2:	bd38      	pop	{r3, r4, r5, pc}
 800f4e4:	200006a0 	.word	0x200006a0

0800f4e8 <__sread>:
 800f4e8:	b510      	push	{r4, lr}
 800f4ea:	460c      	mov	r4, r1
 800f4ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4f0:	f000 f912 	bl	800f718 <_read_r>
 800f4f4:	2800      	cmp	r0, #0
 800f4f6:	bfab      	itete	ge
 800f4f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f4fa:	89a3      	ldrhlt	r3, [r4, #12]
 800f4fc:	181b      	addge	r3, r3, r0
 800f4fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f502:	bfac      	ite	ge
 800f504:	6563      	strge	r3, [r4, #84]	; 0x54
 800f506:	81a3      	strhlt	r3, [r4, #12]
 800f508:	bd10      	pop	{r4, pc}

0800f50a <__swrite>:
 800f50a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f50e:	461f      	mov	r7, r3
 800f510:	898b      	ldrh	r3, [r1, #12]
 800f512:	05db      	lsls	r3, r3, #23
 800f514:	4605      	mov	r5, r0
 800f516:	460c      	mov	r4, r1
 800f518:	4616      	mov	r6, r2
 800f51a:	d505      	bpl.n	800f528 <__swrite+0x1e>
 800f51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f520:	2302      	movs	r3, #2
 800f522:	2200      	movs	r2, #0
 800f524:	f000 f890 	bl	800f648 <_lseek_r>
 800f528:	89a3      	ldrh	r3, [r4, #12]
 800f52a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f52e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f532:	81a3      	strh	r3, [r4, #12]
 800f534:	4632      	mov	r2, r6
 800f536:	463b      	mov	r3, r7
 800f538:	4628      	mov	r0, r5
 800f53a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f53e:	f000 b837 	b.w	800f5b0 <_write_r>

0800f542 <__sseek>:
 800f542:	b510      	push	{r4, lr}
 800f544:	460c      	mov	r4, r1
 800f546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f54a:	f000 f87d 	bl	800f648 <_lseek_r>
 800f54e:	1c43      	adds	r3, r0, #1
 800f550:	89a3      	ldrh	r3, [r4, #12]
 800f552:	bf15      	itete	ne
 800f554:	6560      	strne	r0, [r4, #84]	; 0x54
 800f556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f55a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f55e:	81a3      	strheq	r3, [r4, #12]
 800f560:	bf18      	it	ne
 800f562:	81a3      	strhne	r3, [r4, #12]
 800f564:	bd10      	pop	{r4, pc}

0800f566 <__sclose>:
 800f566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f56a:	f000 b83b 	b.w	800f5e4 <_close_r>

0800f56e <strncmp>:
 800f56e:	b510      	push	{r4, lr}
 800f570:	b17a      	cbz	r2, 800f592 <strncmp+0x24>
 800f572:	4603      	mov	r3, r0
 800f574:	3901      	subs	r1, #1
 800f576:	1884      	adds	r4, r0, r2
 800f578:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f57c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f580:	4290      	cmp	r0, r2
 800f582:	d101      	bne.n	800f588 <strncmp+0x1a>
 800f584:	42a3      	cmp	r3, r4
 800f586:	d101      	bne.n	800f58c <strncmp+0x1e>
 800f588:	1a80      	subs	r0, r0, r2
 800f58a:	bd10      	pop	{r4, pc}
 800f58c:	2800      	cmp	r0, #0
 800f58e:	d1f3      	bne.n	800f578 <strncmp+0xa>
 800f590:	e7fa      	b.n	800f588 <strncmp+0x1a>
 800f592:	4610      	mov	r0, r2
 800f594:	e7f9      	b.n	800f58a <strncmp+0x1c>

0800f596 <__ascii_wctomb>:
 800f596:	b149      	cbz	r1, 800f5ac <__ascii_wctomb+0x16>
 800f598:	2aff      	cmp	r2, #255	; 0xff
 800f59a:	bf85      	ittet	hi
 800f59c:	238a      	movhi	r3, #138	; 0x8a
 800f59e:	6003      	strhi	r3, [r0, #0]
 800f5a0:	700a      	strbls	r2, [r1, #0]
 800f5a2:	f04f 30ff 	movhi.w	r0, #4294967295
 800f5a6:	bf98      	it	ls
 800f5a8:	2001      	movls	r0, #1
 800f5aa:	4770      	bx	lr
 800f5ac:	4608      	mov	r0, r1
 800f5ae:	4770      	bx	lr

0800f5b0 <_write_r>:
 800f5b0:	b538      	push	{r3, r4, r5, lr}
 800f5b2:	4d07      	ldr	r5, [pc, #28]	; (800f5d0 <_write_r+0x20>)
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	4608      	mov	r0, r1
 800f5b8:	4611      	mov	r1, r2
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	602a      	str	r2, [r5, #0]
 800f5be:	461a      	mov	r2, r3
 800f5c0:	f7f1 fe12 	bl	80011e8 <_write>
 800f5c4:	1c43      	adds	r3, r0, #1
 800f5c6:	d102      	bne.n	800f5ce <_write_r+0x1e>
 800f5c8:	682b      	ldr	r3, [r5, #0]
 800f5ca:	b103      	cbz	r3, 800f5ce <_write_r+0x1e>
 800f5cc:	6023      	str	r3, [r4, #0]
 800f5ce:	bd38      	pop	{r3, r4, r5, pc}
 800f5d0:	200006a0 	.word	0x200006a0

0800f5d4 <abort>:
 800f5d4:	b508      	push	{r3, lr}
 800f5d6:	2006      	movs	r0, #6
 800f5d8:	f000 f8d8 	bl	800f78c <raise>
 800f5dc:	2001      	movs	r0, #1
 800f5de:	f7f2 f923 	bl	8001828 <_exit>
	...

0800f5e4 <_close_r>:
 800f5e4:	b538      	push	{r3, r4, r5, lr}
 800f5e6:	4d06      	ldr	r5, [pc, #24]	; (800f600 <_close_r+0x1c>)
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	4604      	mov	r4, r0
 800f5ec:	4608      	mov	r0, r1
 800f5ee:	602b      	str	r3, [r5, #0]
 800f5f0:	f7f2 f941 	bl	8001876 <_close>
 800f5f4:	1c43      	adds	r3, r0, #1
 800f5f6:	d102      	bne.n	800f5fe <_close_r+0x1a>
 800f5f8:	682b      	ldr	r3, [r5, #0]
 800f5fa:	b103      	cbz	r3, 800f5fe <_close_r+0x1a>
 800f5fc:	6023      	str	r3, [r4, #0]
 800f5fe:	bd38      	pop	{r3, r4, r5, pc}
 800f600:	200006a0 	.word	0x200006a0

0800f604 <_fstat_r>:
 800f604:	b538      	push	{r3, r4, r5, lr}
 800f606:	4d07      	ldr	r5, [pc, #28]	; (800f624 <_fstat_r+0x20>)
 800f608:	2300      	movs	r3, #0
 800f60a:	4604      	mov	r4, r0
 800f60c:	4608      	mov	r0, r1
 800f60e:	4611      	mov	r1, r2
 800f610:	602b      	str	r3, [r5, #0]
 800f612:	f7f2 f93c 	bl	800188e <_fstat>
 800f616:	1c43      	adds	r3, r0, #1
 800f618:	d102      	bne.n	800f620 <_fstat_r+0x1c>
 800f61a:	682b      	ldr	r3, [r5, #0]
 800f61c:	b103      	cbz	r3, 800f620 <_fstat_r+0x1c>
 800f61e:	6023      	str	r3, [r4, #0]
 800f620:	bd38      	pop	{r3, r4, r5, pc}
 800f622:	bf00      	nop
 800f624:	200006a0 	.word	0x200006a0

0800f628 <_isatty_r>:
 800f628:	b538      	push	{r3, r4, r5, lr}
 800f62a:	4d06      	ldr	r5, [pc, #24]	; (800f644 <_isatty_r+0x1c>)
 800f62c:	2300      	movs	r3, #0
 800f62e:	4604      	mov	r4, r0
 800f630:	4608      	mov	r0, r1
 800f632:	602b      	str	r3, [r5, #0]
 800f634:	f7f2 f93b 	bl	80018ae <_isatty>
 800f638:	1c43      	adds	r3, r0, #1
 800f63a:	d102      	bne.n	800f642 <_isatty_r+0x1a>
 800f63c:	682b      	ldr	r3, [r5, #0]
 800f63e:	b103      	cbz	r3, 800f642 <_isatty_r+0x1a>
 800f640:	6023      	str	r3, [r4, #0]
 800f642:	bd38      	pop	{r3, r4, r5, pc}
 800f644:	200006a0 	.word	0x200006a0

0800f648 <_lseek_r>:
 800f648:	b538      	push	{r3, r4, r5, lr}
 800f64a:	4d07      	ldr	r5, [pc, #28]	; (800f668 <_lseek_r+0x20>)
 800f64c:	4604      	mov	r4, r0
 800f64e:	4608      	mov	r0, r1
 800f650:	4611      	mov	r1, r2
 800f652:	2200      	movs	r2, #0
 800f654:	602a      	str	r2, [r5, #0]
 800f656:	461a      	mov	r2, r3
 800f658:	f7f2 f934 	bl	80018c4 <_lseek>
 800f65c:	1c43      	adds	r3, r0, #1
 800f65e:	d102      	bne.n	800f666 <_lseek_r+0x1e>
 800f660:	682b      	ldr	r3, [r5, #0]
 800f662:	b103      	cbz	r3, 800f666 <_lseek_r+0x1e>
 800f664:	6023      	str	r3, [r4, #0]
 800f666:	bd38      	pop	{r3, r4, r5, pc}
 800f668:	200006a0 	.word	0x200006a0

0800f66c <memmove>:
 800f66c:	4288      	cmp	r0, r1
 800f66e:	b510      	push	{r4, lr}
 800f670:	eb01 0402 	add.w	r4, r1, r2
 800f674:	d902      	bls.n	800f67c <memmove+0x10>
 800f676:	4284      	cmp	r4, r0
 800f678:	4623      	mov	r3, r4
 800f67a:	d807      	bhi.n	800f68c <memmove+0x20>
 800f67c:	1e43      	subs	r3, r0, #1
 800f67e:	42a1      	cmp	r1, r4
 800f680:	d008      	beq.n	800f694 <memmove+0x28>
 800f682:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f68a:	e7f8      	b.n	800f67e <memmove+0x12>
 800f68c:	4402      	add	r2, r0
 800f68e:	4601      	mov	r1, r0
 800f690:	428a      	cmp	r2, r1
 800f692:	d100      	bne.n	800f696 <memmove+0x2a>
 800f694:	bd10      	pop	{r4, pc}
 800f696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f69a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f69e:	e7f7      	b.n	800f690 <memmove+0x24>

0800f6a0 <__malloc_lock>:
 800f6a0:	4801      	ldr	r0, [pc, #4]	; (800f6a8 <__malloc_lock+0x8>)
 800f6a2:	f7fe be0c 	b.w	800e2be <__retarget_lock_acquire_recursive>
 800f6a6:	bf00      	nop
 800f6a8:	20000694 	.word	0x20000694

0800f6ac <__malloc_unlock>:
 800f6ac:	4801      	ldr	r0, [pc, #4]	; (800f6b4 <__malloc_unlock+0x8>)
 800f6ae:	f7fe be07 	b.w	800e2c0 <__retarget_lock_release_recursive>
 800f6b2:	bf00      	nop
 800f6b4:	20000694 	.word	0x20000694

0800f6b8 <_realloc_r>:
 800f6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6bc:	4680      	mov	r8, r0
 800f6be:	4614      	mov	r4, r2
 800f6c0:	460e      	mov	r6, r1
 800f6c2:	b921      	cbnz	r1, 800f6ce <_realloc_r+0x16>
 800f6c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c8:	4611      	mov	r1, r2
 800f6ca:	f7ff bbcb 	b.w	800ee64 <_malloc_r>
 800f6ce:	b92a      	cbnz	r2, 800f6dc <_realloc_r+0x24>
 800f6d0:	f7ff fb5c 	bl	800ed8c <_free_r>
 800f6d4:	4625      	mov	r5, r4
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6dc:	f000 f872 	bl	800f7c4 <_malloc_usable_size_r>
 800f6e0:	4284      	cmp	r4, r0
 800f6e2:	4607      	mov	r7, r0
 800f6e4:	d802      	bhi.n	800f6ec <_realloc_r+0x34>
 800f6e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f6ea:	d812      	bhi.n	800f712 <_realloc_r+0x5a>
 800f6ec:	4621      	mov	r1, r4
 800f6ee:	4640      	mov	r0, r8
 800f6f0:	f7ff fbb8 	bl	800ee64 <_malloc_r>
 800f6f4:	4605      	mov	r5, r0
 800f6f6:	2800      	cmp	r0, #0
 800f6f8:	d0ed      	beq.n	800f6d6 <_realloc_r+0x1e>
 800f6fa:	42bc      	cmp	r4, r7
 800f6fc:	4622      	mov	r2, r4
 800f6fe:	4631      	mov	r1, r6
 800f700:	bf28      	it	cs
 800f702:	463a      	movcs	r2, r7
 800f704:	f7fe fe5c 	bl	800e3c0 <memcpy>
 800f708:	4631      	mov	r1, r6
 800f70a:	4640      	mov	r0, r8
 800f70c:	f7ff fb3e 	bl	800ed8c <_free_r>
 800f710:	e7e1      	b.n	800f6d6 <_realloc_r+0x1e>
 800f712:	4635      	mov	r5, r6
 800f714:	e7df      	b.n	800f6d6 <_realloc_r+0x1e>
	...

0800f718 <_read_r>:
 800f718:	b538      	push	{r3, r4, r5, lr}
 800f71a:	4d07      	ldr	r5, [pc, #28]	; (800f738 <_read_r+0x20>)
 800f71c:	4604      	mov	r4, r0
 800f71e:	4608      	mov	r0, r1
 800f720:	4611      	mov	r1, r2
 800f722:	2200      	movs	r2, #0
 800f724:	602a      	str	r2, [r5, #0]
 800f726:	461a      	mov	r2, r3
 800f728:	f7f2 f888 	bl	800183c <_read>
 800f72c:	1c43      	adds	r3, r0, #1
 800f72e:	d102      	bne.n	800f736 <_read_r+0x1e>
 800f730:	682b      	ldr	r3, [r5, #0]
 800f732:	b103      	cbz	r3, 800f736 <_read_r+0x1e>
 800f734:	6023      	str	r3, [r4, #0]
 800f736:	bd38      	pop	{r3, r4, r5, pc}
 800f738:	200006a0 	.word	0x200006a0

0800f73c <_raise_r>:
 800f73c:	291f      	cmp	r1, #31
 800f73e:	b538      	push	{r3, r4, r5, lr}
 800f740:	4604      	mov	r4, r0
 800f742:	460d      	mov	r5, r1
 800f744:	d904      	bls.n	800f750 <_raise_r+0x14>
 800f746:	2316      	movs	r3, #22
 800f748:	6003      	str	r3, [r0, #0]
 800f74a:	f04f 30ff 	mov.w	r0, #4294967295
 800f74e:	bd38      	pop	{r3, r4, r5, pc}
 800f750:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f752:	b112      	cbz	r2, 800f75a <_raise_r+0x1e>
 800f754:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f758:	b94b      	cbnz	r3, 800f76e <_raise_r+0x32>
 800f75a:	4620      	mov	r0, r4
 800f75c:	f000 f830 	bl	800f7c0 <_getpid_r>
 800f760:	462a      	mov	r2, r5
 800f762:	4601      	mov	r1, r0
 800f764:	4620      	mov	r0, r4
 800f766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f76a:	f000 b817 	b.w	800f79c <_kill_r>
 800f76e:	2b01      	cmp	r3, #1
 800f770:	d00a      	beq.n	800f788 <_raise_r+0x4c>
 800f772:	1c59      	adds	r1, r3, #1
 800f774:	d103      	bne.n	800f77e <_raise_r+0x42>
 800f776:	2316      	movs	r3, #22
 800f778:	6003      	str	r3, [r0, #0]
 800f77a:	2001      	movs	r0, #1
 800f77c:	e7e7      	b.n	800f74e <_raise_r+0x12>
 800f77e:	2400      	movs	r4, #0
 800f780:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f784:	4628      	mov	r0, r5
 800f786:	4798      	blx	r3
 800f788:	2000      	movs	r0, #0
 800f78a:	e7e0      	b.n	800f74e <_raise_r+0x12>

0800f78c <raise>:
 800f78c:	4b02      	ldr	r3, [pc, #8]	; (800f798 <raise+0xc>)
 800f78e:	4601      	mov	r1, r0
 800f790:	6818      	ldr	r0, [r3, #0]
 800f792:	f7ff bfd3 	b.w	800f73c <_raise_r>
 800f796:	bf00      	nop
 800f798:	20000030 	.word	0x20000030

0800f79c <_kill_r>:
 800f79c:	b538      	push	{r3, r4, r5, lr}
 800f79e:	4d07      	ldr	r5, [pc, #28]	; (800f7bc <_kill_r+0x20>)
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	4604      	mov	r4, r0
 800f7a4:	4608      	mov	r0, r1
 800f7a6:	4611      	mov	r1, r2
 800f7a8:	602b      	str	r3, [r5, #0]
 800f7aa:	f7f2 f82d 	bl	8001808 <_kill>
 800f7ae:	1c43      	adds	r3, r0, #1
 800f7b0:	d102      	bne.n	800f7b8 <_kill_r+0x1c>
 800f7b2:	682b      	ldr	r3, [r5, #0]
 800f7b4:	b103      	cbz	r3, 800f7b8 <_kill_r+0x1c>
 800f7b6:	6023      	str	r3, [r4, #0]
 800f7b8:	bd38      	pop	{r3, r4, r5, pc}
 800f7ba:	bf00      	nop
 800f7bc:	200006a0 	.word	0x200006a0

0800f7c0 <_getpid_r>:
 800f7c0:	f7f2 b81a 	b.w	80017f8 <_getpid>

0800f7c4 <_malloc_usable_size_r>:
 800f7c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7c8:	1f18      	subs	r0, r3, #4
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	bfbc      	itt	lt
 800f7ce:	580b      	ldrlt	r3, [r1, r0]
 800f7d0:	18c0      	addlt	r0, r0, r3
 800f7d2:	4770      	bx	lr

0800f7d4 <_init>:
 800f7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7d6:	bf00      	nop
 800f7d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7da:	bc08      	pop	{r3}
 800f7dc:	469e      	mov	lr, r3
 800f7de:	4770      	bx	lr

0800f7e0 <_fini>:
 800f7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7e2:	bf00      	nop
 800f7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7e6:	bc08      	pop	{r3}
 800f7e8:	469e      	mov	lr, r3
 800f7ea:	4770      	bx	lr
